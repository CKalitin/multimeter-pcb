
Capacitance-Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b74  08005b74  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005b74  08005b74  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b74  08005b74  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b74  08005b74  00006b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b78  08005b78  00006b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005b7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000060  08005bdc  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08005bdc  00007470  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8ae  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196c  00000000  00000000  00012936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000142a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a8  00000000  00000000  00014da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011786  00000000  00000000  00015650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d936  00000000  00000000  00026dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b1a2  00000000  00000000  0003470c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f8ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f80  00000000  00000000  0009f8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a2874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a54 	.word	0x08005a54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005a54 	.word	0x08005a54

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_d2lz>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	2200      	movs	r2, #0
 8000468:	2300      	movs	r3, #0
 800046a:	0004      	movs	r4, r0
 800046c:	000d      	movs	r5, r1
 800046e:	f001 fdcf 	bl	8002010 <__aeabi_dcmplt>
 8000472:	2800      	cmp	r0, #0
 8000474:	d108      	bne.n	8000488 <__aeabi_d2lz+0x24>
 8000476:	0020      	movs	r0, r4
 8000478:	0029      	movs	r1, r5
 800047a:	f000 f80f 	bl	800049c <__aeabi_d2ulz>
 800047e:	0002      	movs	r2, r0
 8000480:	000b      	movs	r3, r1
 8000482:	0010      	movs	r0, r2
 8000484:	0019      	movs	r1, r3
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	061b      	lsls	r3, r3, #24
 800048c:	18e9      	adds	r1, r5, r3
 800048e:	0020      	movs	r0, r4
 8000490:	f000 f804 	bl	800049c <__aeabi_d2ulz>
 8000494:	2300      	movs	r3, #0
 8000496:	4242      	negs	r2, r0
 8000498:	418b      	sbcs	r3, r1
 800049a:	e7f2      	b.n	8000482 <__aeabi_d2lz+0x1e>

0800049c <__aeabi_d2ulz>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	2200      	movs	r2, #0
 80004a0:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <__aeabi_d2ulz+0x34>)
 80004a2:	000d      	movs	r5, r1
 80004a4:	0004      	movs	r4, r0
 80004a6:	f000 feab 	bl	8001200 <__aeabi_dmul>
 80004aa:	f001 fdf7 	bl	800209c <__aeabi_d2uiz>
 80004ae:	0006      	movs	r6, r0
 80004b0:	f001 fd74 	bl	8001f9c <__aeabi_ui2d>
 80004b4:	2200      	movs	r2, #0
 80004b6:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <__aeabi_d2ulz+0x38>)
 80004b8:	f000 fea2 	bl	8001200 <__aeabi_dmul>
 80004bc:	0002      	movs	r2, r0
 80004be:	000b      	movs	r3, r1
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 f964 	bl	8001790 <__aeabi_dsub>
 80004c8:	f001 fde8 	bl	800209c <__aeabi_d2uiz>
 80004cc:	0031      	movs	r1, r6
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	3df00000 	.word	0x3df00000
 80004d4:	41f00000 	.word	0x41f00000

080004d8 <__aeabi_l2d>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	0006      	movs	r6, r0
 80004dc:	0008      	movs	r0, r1
 80004de:	f001 fd2f 	bl	8001f40 <__aeabi_i2d>
 80004e2:	2200      	movs	r2, #0
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <__aeabi_l2d+0x28>)
 80004e6:	f000 fe8b 	bl	8001200 <__aeabi_dmul>
 80004ea:	000d      	movs	r5, r1
 80004ec:	0004      	movs	r4, r0
 80004ee:	0030      	movs	r0, r6
 80004f0:	f001 fd54 	bl	8001f9c <__aeabi_ui2d>
 80004f4:	002b      	movs	r3, r5
 80004f6:	0022      	movs	r2, r4
 80004f8:	f000 f804 	bl	8000504 <__aeabi_dadd>
 80004fc:	bd70      	pop	{r4, r5, r6, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	41f00000 	.word	0x41f00000

08000504 <__aeabi_dadd>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	4657      	mov	r7, sl
 8000508:	464e      	mov	r6, r9
 800050a:	4645      	mov	r5, r8
 800050c:	46de      	mov	lr, fp
 800050e:	b5e0      	push	{r5, r6, r7, lr}
 8000510:	b083      	sub	sp, #12
 8000512:	9000      	str	r0, [sp, #0]
 8000514:	9101      	str	r1, [sp, #4]
 8000516:	030c      	lsls	r4, r1, #12
 8000518:	004f      	lsls	r7, r1, #1
 800051a:	0fce      	lsrs	r6, r1, #31
 800051c:	0a61      	lsrs	r1, r4, #9
 800051e:	9c00      	ldr	r4, [sp, #0]
 8000520:	031d      	lsls	r5, r3, #12
 8000522:	0f64      	lsrs	r4, r4, #29
 8000524:	430c      	orrs	r4, r1
 8000526:	9900      	ldr	r1, [sp, #0]
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	00c8      	lsls	r0, r1, #3
 800052e:	0059      	lsls	r1, r3, #1
 8000530:	0d4b      	lsrs	r3, r1, #21
 8000532:	4699      	mov	r9, r3
 8000534:	9a00      	ldr	r2, [sp, #0]
 8000536:	9b01      	ldr	r3, [sp, #4]
 8000538:	0a6d      	lsrs	r5, r5, #9
 800053a:	0fd9      	lsrs	r1, r3, #31
 800053c:	0f53      	lsrs	r3, r2, #29
 800053e:	432b      	orrs	r3, r5
 8000540:	469a      	mov	sl, r3
 8000542:	9b00      	ldr	r3, [sp, #0]
 8000544:	0d7f      	lsrs	r7, r7, #21
 8000546:	00da      	lsls	r2, r3, #3
 8000548:	4694      	mov	ip, r2
 800054a:	464a      	mov	r2, r9
 800054c:	46b0      	mov	r8, r6
 800054e:	1aba      	subs	r2, r7, r2
 8000550:	428e      	cmp	r6, r1
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0x52>
 8000554:	e0b0      	b.n	80006b8 <__aeabi_dadd+0x1b4>
 8000556:	2a00      	cmp	r2, #0
 8000558:	dc00      	bgt.n	800055c <__aeabi_dadd+0x58>
 800055a:	e078      	b.n	800064e <__aeabi_dadd+0x14a>
 800055c:	4649      	mov	r1, r9
 800055e:	2900      	cmp	r1, #0
 8000560:	d100      	bne.n	8000564 <__aeabi_dadd+0x60>
 8000562:	e0e9      	b.n	8000738 <__aeabi_dadd+0x234>
 8000564:	49c9      	ldr	r1, [pc, #804]	@ (800088c <__aeabi_dadd+0x388>)
 8000566:	428f      	cmp	r7, r1
 8000568:	d100      	bne.n	800056c <__aeabi_dadd+0x68>
 800056a:	e195      	b.n	8000898 <__aeabi_dadd+0x394>
 800056c:	2501      	movs	r5, #1
 800056e:	2a38      	cmp	r2, #56	@ 0x38
 8000570:	dc16      	bgt.n	80005a0 <__aeabi_dadd+0x9c>
 8000572:	2180      	movs	r1, #128	@ 0x80
 8000574:	4653      	mov	r3, sl
 8000576:	0409      	lsls	r1, r1, #16
 8000578:	430b      	orrs	r3, r1
 800057a:	469a      	mov	sl, r3
 800057c:	2a1f      	cmp	r2, #31
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0x7e>
 8000580:	e1e7      	b.n	8000952 <__aeabi_dadd+0x44e>
 8000582:	2120      	movs	r1, #32
 8000584:	4655      	mov	r5, sl
 8000586:	1a8b      	subs	r3, r1, r2
 8000588:	4661      	mov	r1, ip
 800058a:	409d      	lsls	r5, r3
 800058c:	40d1      	lsrs	r1, r2
 800058e:	430d      	orrs	r5, r1
 8000590:	4661      	mov	r1, ip
 8000592:	4099      	lsls	r1, r3
 8000594:	1e4b      	subs	r3, r1, #1
 8000596:	4199      	sbcs	r1, r3
 8000598:	4653      	mov	r3, sl
 800059a:	40d3      	lsrs	r3, r2
 800059c:	430d      	orrs	r5, r1
 800059e:	1ae4      	subs	r4, r4, r3
 80005a0:	1b45      	subs	r5, r0, r5
 80005a2:	42a8      	cmp	r0, r5
 80005a4:	4180      	sbcs	r0, r0
 80005a6:	4240      	negs	r0, r0
 80005a8:	1a24      	subs	r4, r4, r0
 80005aa:	0223      	lsls	r3, r4, #8
 80005ac:	d400      	bmi.n	80005b0 <__aeabi_dadd+0xac>
 80005ae:	e10f      	b.n	80007d0 <__aeabi_dadd+0x2cc>
 80005b0:	0264      	lsls	r4, r4, #9
 80005b2:	0a64      	lsrs	r4, r4, #9
 80005b4:	2c00      	cmp	r4, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_dadd+0xb6>
 80005b8:	e139      	b.n	800082e <__aeabi_dadd+0x32a>
 80005ba:	0020      	movs	r0, r4
 80005bc:	f001 fd50 	bl	8002060 <__clzsi2>
 80005c0:	0003      	movs	r3, r0
 80005c2:	3b08      	subs	r3, #8
 80005c4:	2120      	movs	r1, #32
 80005c6:	0028      	movs	r0, r5
 80005c8:	1aca      	subs	r2, r1, r3
 80005ca:	40d0      	lsrs	r0, r2
 80005cc:	409c      	lsls	r4, r3
 80005ce:	0002      	movs	r2, r0
 80005d0:	409d      	lsls	r5, r3
 80005d2:	4322      	orrs	r2, r4
 80005d4:	429f      	cmp	r7, r3
 80005d6:	dd00      	ble.n	80005da <__aeabi_dadd+0xd6>
 80005d8:	e173      	b.n	80008c2 <__aeabi_dadd+0x3be>
 80005da:	1bd8      	subs	r0, r3, r7
 80005dc:	3001      	adds	r0, #1
 80005de:	1a09      	subs	r1, r1, r0
 80005e0:	002c      	movs	r4, r5
 80005e2:	408d      	lsls	r5, r1
 80005e4:	40c4      	lsrs	r4, r0
 80005e6:	1e6b      	subs	r3, r5, #1
 80005e8:	419d      	sbcs	r5, r3
 80005ea:	0013      	movs	r3, r2
 80005ec:	40c2      	lsrs	r2, r0
 80005ee:	408b      	lsls	r3, r1
 80005f0:	4325      	orrs	r5, r4
 80005f2:	2700      	movs	r7, #0
 80005f4:	0014      	movs	r4, r2
 80005f6:	431d      	orrs	r5, r3
 80005f8:	076b      	lsls	r3, r5, #29
 80005fa:	d009      	beq.n	8000610 <__aeabi_dadd+0x10c>
 80005fc:	230f      	movs	r3, #15
 80005fe:	402b      	ands	r3, r5
 8000600:	2b04      	cmp	r3, #4
 8000602:	d005      	beq.n	8000610 <__aeabi_dadd+0x10c>
 8000604:	1d2b      	adds	r3, r5, #4
 8000606:	42ab      	cmp	r3, r5
 8000608:	41ad      	sbcs	r5, r5
 800060a:	426d      	negs	r5, r5
 800060c:	1964      	adds	r4, r4, r5
 800060e:	001d      	movs	r5, r3
 8000610:	0223      	lsls	r3, r4, #8
 8000612:	d400      	bmi.n	8000616 <__aeabi_dadd+0x112>
 8000614:	e12d      	b.n	8000872 <__aeabi_dadd+0x36e>
 8000616:	4a9d      	ldr	r2, [pc, #628]	@ (800088c <__aeabi_dadd+0x388>)
 8000618:	3701      	adds	r7, #1
 800061a:	4297      	cmp	r7, r2
 800061c:	d100      	bne.n	8000620 <__aeabi_dadd+0x11c>
 800061e:	e0d3      	b.n	80007c8 <__aeabi_dadd+0x2c4>
 8000620:	4646      	mov	r6, r8
 8000622:	499b      	ldr	r1, [pc, #620]	@ (8000890 <__aeabi_dadd+0x38c>)
 8000624:	08ed      	lsrs	r5, r5, #3
 8000626:	4021      	ands	r1, r4
 8000628:	074a      	lsls	r2, r1, #29
 800062a:	432a      	orrs	r2, r5
 800062c:	057c      	lsls	r4, r7, #21
 800062e:	024d      	lsls	r5, r1, #9
 8000630:	0b2d      	lsrs	r5, r5, #12
 8000632:	0d64      	lsrs	r4, r4, #21
 8000634:	0524      	lsls	r4, r4, #20
 8000636:	432c      	orrs	r4, r5
 8000638:	07f6      	lsls	r6, r6, #31
 800063a:	4334      	orrs	r4, r6
 800063c:	0010      	movs	r0, r2
 800063e:	0021      	movs	r1, r4
 8000640:	b003      	add	sp, #12
 8000642:	bcf0      	pop	{r4, r5, r6, r7}
 8000644:	46bb      	mov	fp, r7
 8000646:	46b2      	mov	sl, r6
 8000648:	46a9      	mov	r9, r5
 800064a:	46a0      	mov	r8, r4
 800064c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064e:	2a00      	cmp	r2, #0
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x150>
 8000652:	e084      	b.n	800075e <__aeabi_dadd+0x25a>
 8000654:	464a      	mov	r2, r9
 8000656:	1bd2      	subs	r2, r2, r7
 8000658:	2f00      	cmp	r7, #0
 800065a:	d000      	beq.n	800065e <__aeabi_dadd+0x15a>
 800065c:	e16d      	b.n	800093a <__aeabi_dadd+0x436>
 800065e:	0025      	movs	r5, r4
 8000660:	4305      	orrs	r5, r0
 8000662:	d100      	bne.n	8000666 <__aeabi_dadd+0x162>
 8000664:	e127      	b.n	80008b6 <__aeabi_dadd+0x3b2>
 8000666:	1e56      	subs	r6, r2, #1
 8000668:	2a01      	cmp	r2, #1
 800066a:	d100      	bne.n	800066e <__aeabi_dadd+0x16a>
 800066c:	e23b      	b.n	8000ae6 <__aeabi_dadd+0x5e2>
 800066e:	4d87      	ldr	r5, [pc, #540]	@ (800088c <__aeabi_dadd+0x388>)
 8000670:	42aa      	cmp	r2, r5
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x172>
 8000674:	e26a      	b.n	8000b4c <__aeabi_dadd+0x648>
 8000676:	2501      	movs	r5, #1
 8000678:	2e38      	cmp	r6, #56	@ 0x38
 800067a:	dc12      	bgt.n	80006a2 <__aeabi_dadd+0x19e>
 800067c:	0032      	movs	r2, r6
 800067e:	2a1f      	cmp	r2, #31
 8000680:	dd00      	ble.n	8000684 <__aeabi_dadd+0x180>
 8000682:	e1f8      	b.n	8000a76 <__aeabi_dadd+0x572>
 8000684:	2620      	movs	r6, #32
 8000686:	0025      	movs	r5, r4
 8000688:	1ab6      	subs	r6, r6, r2
 800068a:	0007      	movs	r7, r0
 800068c:	4653      	mov	r3, sl
 800068e:	40b0      	lsls	r0, r6
 8000690:	40d4      	lsrs	r4, r2
 8000692:	40b5      	lsls	r5, r6
 8000694:	40d7      	lsrs	r7, r2
 8000696:	1e46      	subs	r6, r0, #1
 8000698:	41b0      	sbcs	r0, r6
 800069a:	1b1b      	subs	r3, r3, r4
 800069c:	469a      	mov	sl, r3
 800069e:	433d      	orrs	r5, r7
 80006a0:	4305      	orrs	r5, r0
 80006a2:	4662      	mov	r2, ip
 80006a4:	1b55      	subs	r5, r2, r5
 80006a6:	45ac      	cmp	ip, r5
 80006a8:	4192      	sbcs	r2, r2
 80006aa:	4653      	mov	r3, sl
 80006ac:	4252      	negs	r2, r2
 80006ae:	000e      	movs	r6, r1
 80006b0:	464f      	mov	r7, r9
 80006b2:	4688      	mov	r8, r1
 80006b4:	1a9c      	subs	r4, r3, r2
 80006b6:	e778      	b.n	80005aa <__aeabi_dadd+0xa6>
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	dc00      	bgt.n	80006be <__aeabi_dadd+0x1ba>
 80006bc:	e08e      	b.n	80007dc <__aeabi_dadd+0x2d8>
 80006be:	4649      	mov	r1, r9
 80006c0:	2900      	cmp	r1, #0
 80006c2:	d175      	bne.n	80007b0 <__aeabi_dadd+0x2ac>
 80006c4:	4661      	mov	r1, ip
 80006c6:	4653      	mov	r3, sl
 80006c8:	4319      	orrs	r1, r3
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x1ca>
 80006cc:	e0f6      	b.n	80008bc <__aeabi_dadd+0x3b8>
 80006ce:	1e51      	subs	r1, r2, #1
 80006d0:	2a01      	cmp	r2, #1
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x1d2>
 80006d4:	e191      	b.n	80009fa <__aeabi_dadd+0x4f6>
 80006d6:	4d6d      	ldr	r5, [pc, #436]	@ (800088c <__aeabi_dadd+0x388>)
 80006d8:	42aa      	cmp	r2, r5
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x1da>
 80006dc:	e0dc      	b.n	8000898 <__aeabi_dadd+0x394>
 80006de:	2501      	movs	r5, #1
 80006e0:	2938      	cmp	r1, #56	@ 0x38
 80006e2:	dc14      	bgt.n	800070e <__aeabi_dadd+0x20a>
 80006e4:	000a      	movs	r2, r1
 80006e6:	2a1f      	cmp	r2, #31
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x1e8>
 80006ea:	e1a2      	b.n	8000a32 <__aeabi_dadd+0x52e>
 80006ec:	2120      	movs	r1, #32
 80006ee:	4653      	mov	r3, sl
 80006f0:	1a89      	subs	r1, r1, r2
 80006f2:	408b      	lsls	r3, r1
 80006f4:	001d      	movs	r5, r3
 80006f6:	4663      	mov	r3, ip
 80006f8:	40d3      	lsrs	r3, r2
 80006fa:	431d      	orrs	r5, r3
 80006fc:	4663      	mov	r3, ip
 80006fe:	408b      	lsls	r3, r1
 8000700:	0019      	movs	r1, r3
 8000702:	1e4b      	subs	r3, r1, #1
 8000704:	4199      	sbcs	r1, r3
 8000706:	4653      	mov	r3, sl
 8000708:	40d3      	lsrs	r3, r2
 800070a:	430d      	orrs	r5, r1
 800070c:	18e4      	adds	r4, r4, r3
 800070e:	182d      	adds	r5, r5, r0
 8000710:	4285      	cmp	r5, r0
 8000712:	4180      	sbcs	r0, r0
 8000714:	4240      	negs	r0, r0
 8000716:	1824      	adds	r4, r4, r0
 8000718:	0223      	lsls	r3, r4, #8
 800071a:	d559      	bpl.n	80007d0 <__aeabi_dadd+0x2cc>
 800071c:	4b5b      	ldr	r3, [pc, #364]	@ (800088c <__aeabi_dadd+0x388>)
 800071e:	3701      	adds	r7, #1
 8000720:	429f      	cmp	r7, r3
 8000722:	d051      	beq.n	80007c8 <__aeabi_dadd+0x2c4>
 8000724:	2101      	movs	r1, #1
 8000726:	4b5a      	ldr	r3, [pc, #360]	@ (8000890 <__aeabi_dadd+0x38c>)
 8000728:	086a      	lsrs	r2, r5, #1
 800072a:	401c      	ands	r4, r3
 800072c:	4029      	ands	r1, r5
 800072e:	430a      	orrs	r2, r1
 8000730:	07e5      	lsls	r5, r4, #31
 8000732:	4315      	orrs	r5, r2
 8000734:	0864      	lsrs	r4, r4, #1
 8000736:	e75f      	b.n	80005f8 <__aeabi_dadd+0xf4>
 8000738:	4661      	mov	r1, ip
 800073a:	4653      	mov	r3, sl
 800073c:	4319      	orrs	r1, r3
 800073e:	d100      	bne.n	8000742 <__aeabi_dadd+0x23e>
 8000740:	e0bc      	b.n	80008bc <__aeabi_dadd+0x3b8>
 8000742:	1e51      	subs	r1, r2, #1
 8000744:	2a01      	cmp	r2, #1
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x246>
 8000748:	e164      	b.n	8000a14 <__aeabi_dadd+0x510>
 800074a:	4d50      	ldr	r5, [pc, #320]	@ (800088c <__aeabi_dadd+0x388>)
 800074c:	42aa      	cmp	r2, r5
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x24e>
 8000750:	e16a      	b.n	8000a28 <__aeabi_dadd+0x524>
 8000752:	2501      	movs	r5, #1
 8000754:	2938      	cmp	r1, #56	@ 0x38
 8000756:	dd00      	ble.n	800075a <__aeabi_dadd+0x256>
 8000758:	e722      	b.n	80005a0 <__aeabi_dadd+0x9c>
 800075a:	000a      	movs	r2, r1
 800075c:	e70e      	b.n	800057c <__aeabi_dadd+0x78>
 800075e:	4a4d      	ldr	r2, [pc, #308]	@ (8000894 <__aeabi_dadd+0x390>)
 8000760:	1c7d      	adds	r5, r7, #1
 8000762:	4215      	tst	r5, r2
 8000764:	d000      	beq.n	8000768 <__aeabi_dadd+0x264>
 8000766:	e0d0      	b.n	800090a <__aeabi_dadd+0x406>
 8000768:	0025      	movs	r5, r4
 800076a:	4662      	mov	r2, ip
 800076c:	4653      	mov	r3, sl
 800076e:	4305      	orrs	r5, r0
 8000770:	431a      	orrs	r2, r3
 8000772:	2f00      	cmp	r7, #0
 8000774:	d000      	beq.n	8000778 <__aeabi_dadd+0x274>
 8000776:	e137      	b.n	80009e8 <__aeabi_dadd+0x4e4>
 8000778:	2d00      	cmp	r5, #0
 800077a:	d100      	bne.n	800077e <__aeabi_dadd+0x27a>
 800077c:	e1a8      	b.n	8000ad0 <__aeabi_dadd+0x5cc>
 800077e:	2a00      	cmp	r2, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0x280>
 8000782:	e16a      	b.n	8000a5a <__aeabi_dadd+0x556>
 8000784:	4663      	mov	r3, ip
 8000786:	1ac5      	subs	r5, r0, r3
 8000788:	4653      	mov	r3, sl
 800078a:	1ae2      	subs	r2, r4, r3
 800078c:	42a8      	cmp	r0, r5
 800078e:	419b      	sbcs	r3, r3
 8000790:	425b      	negs	r3, r3
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	021a      	lsls	r2, r3, #8
 8000796:	d400      	bmi.n	800079a <__aeabi_dadd+0x296>
 8000798:	e203      	b.n	8000ba2 <__aeabi_dadd+0x69e>
 800079a:	4663      	mov	r3, ip
 800079c:	1a1d      	subs	r5, r3, r0
 800079e:	45ac      	cmp	ip, r5
 80007a0:	4192      	sbcs	r2, r2
 80007a2:	4653      	mov	r3, sl
 80007a4:	4252      	negs	r2, r2
 80007a6:	1b1c      	subs	r4, r3, r4
 80007a8:	000e      	movs	r6, r1
 80007aa:	4688      	mov	r8, r1
 80007ac:	1aa4      	subs	r4, r4, r2
 80007ae:	e723      	b.n	80005f8 <__aeabi_dadd+0xf4>
 80007b0:	4936      	ldr	r1, [pc, #216]	@ (800088c <__aeabi_dadd+0x388>)
 80007b2:	428f      	cmp	r7, r1
 80007b4:	d070      	beq.n	8000898 <__aeabi_dadd+0x394>
 80007b6:	2501      	movs	r5, #1
 80007b8:	2a38      	cmp	r2, #56	@ 0x38
 80007ba:	dca8      	bgt.n	800070e <__aeabi_dadd+0x20a>
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	4653      	mov	r3, sl
 80007c0:	0409      	lsls	r1, r1, #16
 80007c2:	430b      	orrs	r3, r1
 80007c4:	469a      	mov	sl, r3
 80007c6:	e78e      	b.n	80006e6 <__aeabi_dadd+0x1e2>
 80007c8:	003c      	movs	r4, r7
 80007ca:	2500      	movs	r5, #0
 80007cc:	2200      	movs	r2, #0
 80007ce:	e731      	b.n	8000634 <__aeabi_dadd+0x130>
 80007d0:	2307      	movs	r3, #7
 80007d2:	402b      	ands	r3, r5
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x2d6>
 80007d8:	e710      	b.n	80005fc <__aeabi_dadd+0xf8>
 80007da:	e093      	b.n	8000904 <__aeabi_dadd+0x400>
 80007dc:	2a00      	cmp	r2, #0
 80007de:	d074      	beq.n	80008ca <__aeabi_dadd+0x3c6>
 80007e0:	464a      	mov	r2, r9
 80007e2:	1bd2      	subs	r2, r2, r7
 80007e4:	2f00      	cmp	r7, #0
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x2e6>
 80007e8:	e0c7      	b.n	800097a <__aeabi_dadd+0x476>
 80007ea:	4928      	ldr	r1, [pc, #160]	@ (800088c <__aeabi_dadd+0x388>)
 80007ec:	4589      	cmp	r9, r1
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x2ee>
 80007f0:	e185      	b.n	8000afe <__aeabi_dadd+0x5fa>
 80007f2:	2501      	movs	r5, #1
 80007f4:	2a38      	cmp	r2, #56	@ 0x38
 80007f6:	dc12      	bgt.n	800081e <__aeabi_dadd+0x31a>
 80007f8:	2180      	movs	r1, #128	@ 0x80
 80007fa:	0409      	lsls	r1, r1, #16
 80007fc:	430c      	orrs	r4, r1
 80007fe:	2a1f      	cmp	r2, #31
 8000800:	dd00      	ble.n	8000804 <__aeabi_dadd+0x300>
 8000802:	e1ab      	b.n	8000b5c <__aeabi_dadd+0x658>
 8000804:	2120      	movs	r1, #32
 8000806:	0025      	movs	r5, r4
 8000808:	1a89      	subs	r1, r1, r2
 800080a:	0007      	movs	r7, r0
 800080c:	4088      	lsls	r0, r1
 800080e:	408d      	lsls	r5, r1
 8000810:	40d7      	lsrs	r7, r2
 8000812:	1e41      	subs	r1, r0, #1
 8000814:	4188      	sbcs	r0, r1
 8000816:	40d4      	lsrs	r4, r2
 8000818:	433d      	orrs	r5, r7
 800081a:	4305      	orrs	r5, r0
 800081c:	44a2      	add	sl, r4
 800081e:	4465      	add	r5, ip
 8000820:	4565      	cmp	r5, ip
 8000822:	4192      	sbcs	r2, r2
 8000824:	4252      	negs	r2, r2
 8000826:	4452      	add	r2, sl
 8000828:	0014      	movs	r4, r2
 800082a:	464f      	mov	r7, r9
 800082c:	e774      	b.n	8000718 <__aeabi_dadd+0x214>
 800082e:	0028      	movs	r0, r5
 8000830:	f001 fc16 	bl	8002060 <__clzsi2>
 8000834:	0003      	movs	r3, r0
 8000836:	3318      	adds	r3, #24
 8000838:	2b1f      	cmp	r3, #31
 800083a:	dc00      	bgt.n	800083e <__aeabi_dadd+0x33a>
 800083c:	e6c2      	b.n	80005c4 <__aeabi_dadd+0xc0>
 800083e:	002a      	movs	r2, r5
 8000840:	3808      	subs	r0, #8
 8000842:	4082      	lsls	r2, r0
 8000844:	429f      	cmp	r7, r3
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0x346>
 8000848:	e0a9      	b.n	800099e <__aeabi_dadd+0x49a>
 800084a:	1bdb      	subs	r3, r3, r7
 800084c:	1c58      	adds	r0, r3, #1
 800084e:	281f      	cmp	r0, #31
 8000850:	dc00      	bgt.n	8000854 <__aeabi_dadd+0x350>
 8000852:	e1ac      	b.n	8000bae <__aeabi_dadd+0x6aa>
 8000854:	0015      	movs	r5, r2
 8000856:	3b1f      	subs	r3, #31
 8000858:	40dd      	lsrs	r5, r3
 800085a:	2820      	cmp	r0, #32
 800085c:	d005      	beq.n	800086a <__aeabi_dadd+0x366>
 800085e:	2340      	movs	r3, #64	@ 0x40
 8000860:	1a1b      	subs	r3, r3, r0
 8000862:	409a      	lsls	r2, r3
 8000864:	1e53      	subs	r3, r2, #1
 8000866:	419a      	sbcs	r2, r3
 8000868:	4315      	orrs	r5, r2
 800086a:	2307      	movs	r3, #7
 800086c:	2700      	movs	r7, #0
 800086e:	402b      	ands	r3, r5
 8000870:	e7b0      	b.n	80007d4 <__aeabi_dadd+0x2d0>
 8000872:	08ed      	lsrs	r5, r5, #3
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <__aeabi_dadd+0x388>)
 8000876:	0762      	lsls	r2, r4, #29
 8000878:	432a      	orrs	r2, r5
 800087a:	08e4      	lsrs	r4, r4, #3
 800087c:	429f      	cmp	r7, r3
 800087e:	d00f      	beq.n	80008a0 <__aeabi_dadd+0x39c>
 8000880:	0324      	lsls	r4, r4, #12
 8000882:	0b25      	lsrs	r5, r4, #12
 8000884:	057c      	lsls	r4, r7, #21
 8000886:	0d64      	lsrs	r4, r4, #21
 8000888:	e6d4      	b.n	8000634 <__aeabi_dadd+0x130>
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	000007ff 	.word	0x000007ff
 8000890:	ff7fffff 	.word	0xff7fffff
 8000894:	000007fe 	.word	0x000007fe
 8000898:	08c0      	lsrs	r0, r0, #3
 800089a:	0762      	lsls	r2, r4, #29
 800089c:	4302      	orrs	r2, r0
 800089e:	08e4      	lsrs	r4, r4, #3
 80008a0:	0013      	movs	r3, r2
 80008a2:	4323      	orrs	r3, r4
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x3a4>
 80008a6:	e186      	b.n	8000bb6 <__aeabi_dadd+0x6b2>
 80008a8:	2580      	movs	r5, #128	@ 0x80
 80008aa:	032d      	lsls	r5, r5, #12
 80008ac:	4325      	orrs	r5, r4
 80008ae:	032d      	lsls	r5, r5, #12
 80008b0:	4cc3      	ldr	r4, [pc, #780]	@ (8000bc0 <__aeabi_dadd+0x6bc>)
 80008b2:	0b2d      	lsrs	r5, r5, #12
 80008b4:	e6be      	b.n	8000634 <__aeabi_dadd+0x130>
 80008b6:	4660      	mov	r0, ip
 80008b8:	4654      	mov	r4, sl
 80008ba:	000e      	movs	r6, r1
 80008bc:	0017      	movs	r7, r2
 80008be:	08c5      	lsrs	r5, r0, #3
 80008c0:	e7d8      	b.n	8000874 <__aeabi_dadd+0x370>
 80008c2:	4cc0      	ldr	r4, [pc, #768]	@ (8000bc4 <__aeabi_dadd+0x6c0>)
 80008c4:	1aff      	subs	r7, r7, r3
 80008c6:	4014      	ands	r4, r2
 80008c8:	e696      	b.n	80005f8 <__aeabi_dadd+0xf4>
 80008ca:	4abf      	ldr	r2, [pc, #764]	@ (8000bc8 <__aeabi_dadd+0x6c4>)
 80008cc:	1c79      	adds	r1, r7, #1
 80008ce:	4211      	tst	r1, r2
 80008d0:	d16b      	bne.n	80009aa <__aeabi_dadd+0x4a6>
 80008d2:	0022      	movs	r2, r4
 80008d4:	4302      	orrs	r2, r0
 80008d6:	2f00      	cmp	r7, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_dadd+0x3d8>
 80008da:	e0db      	b.n	8000a94 <__aeabi_dadd+0x590>
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x3de>
 80008e0:	e12d      	b.n	8000b3e <__aeabi_dadd+0x63a>
 80008e2:	4662      	mov	r2, ip
 80008e4:	4653      	mov	r3, sl
 80008e6:	431a      	orrs	r2, r3
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x3e8>
 80008ea:	e0b6      	b.n	8000a5a <__aeabi_dadd+0x556>
 80008ec:	4663      	mov	r3, ip
 80008ee:	18c5      	adds	r5, r0, r3
 80008f0:	4285      	cmp	r5, r0
 80008f2:	4180      	sbcs	r0, r0
 80008f4:	4454      	add	r4, sl
 80008f6:	4240      	negs	r0, r0
 80008f8:	1824      	adds	r4, r4, r0
 80008fa:	0223      	lsls	r3, r4, #8
 80008fc:	d502      	bpl.n	8000904 <__aeabi_dadd+0x400>
 80008fe:	000f      	movs	r7, r1
 8000900:	4bb0      	ldr	r3, [pc, #704]	@ (8000bc4 <__aeabi_dadd+0x6c0>)
 8000902:	401c      	ands	r4, r3
 8000904:	003a      	movs	r2, r7
 8000906:	0028      	movs	r0, r5
 8000908:	e7d8      	b.n	80008bc <__aeabi_dadd+0x3b8>
 800090a:	4662      	mov	r2, ip
 800090c:	1a85      	subs	r5, r0, r2
 800090e:	42a8      	cmp	r0, r5
 8000910:	4192      	sbcs	r2, r2
 8000912:	4653      	mov	r3, sl
 8000914:	4252      	negs	r2, r2
 8000916:	4691      	mov	r9, r2
 8000918:	1ae3      	subs	r3, r4, r3
 800091a:	001a      	movs	r2, r3
 800091c:	464b      	mov	r3, r9
 800091e:	1ad2      	subs	r2, r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	4691      	mov	r9, r2
 8000924:	021a      	lsls	r2, r3, #8
 8000926:	d454      	bmi.n	80009d2 <__aeabi_dadd+0x4ce>
 8000928:	464a      	mov	r2, r9
 800092a:	464c      	mov	r4, r9
 800092c:	432a      	orrs	r2, r5
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x42e>
 8000930:	e640      	b.n	80005b4 <__aeabi_dadd+0xb0>
 8000932:	2600      	movs	r6, #0
 8000934:	2400      	movs	r4, #0
 8000936:	2500      	movs	r5, #0
 8000938:	e67c      	b.n	8000634 <__aeabi_dadd+0x130>
 800093a:	4da1      	ldr	r5, [pc, #644]	@ (8000bc0 <__aeabi_dadd+0x6bc>)
 800093c:	45a9      	cmp	r9, r5
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x43e>
 8000940:	e090      	b.n	8000a64 <__aeabi_dadd+0x560>
 8000942:	2501      	movs	r5, #1
 8000944:	2a38      	cmp	r2, #56	@ 0x38
 8000946:	dd00      	ble.n	800094a <__aeabi_dadd+0x446>
 8000948:	e6ab      	b.n	80006a2 <__aeabi_dadd+0x19e>
 800094a:	2580      	movs	r5, #128	@ 0x80
 800094c:	042d      	lsls	r5, r5, #16
 800094e:	432c      	orrs	r4, r5
 8000950:	e695      	b.n	800067e <__aeabi_dadd+0x17a>
 8000952:	0011      	movs	r1, r2
 8000954:	4655      	mov	r5, sl
 8000956:	3920      	subs	r1, #32
 8000958:	40cd      	lsrs	r5, r1
 800095a:	46a9      	mov	r9, r5
 800095c:	2a20      	cmp	r2, #32
 800095e:	d006      	beq.n	800096e <__aeabi_dadd+0x46a>
 8000960:	2140      	movs	r1, #64	@ 0x40
 8000962:	4653      	mov	r3, sl
 8000964:	1a8a      	subs	r2, r1, r2
 8000966:	4093      	lsls	r3, r2
 8000968:	4662      	mov	r2, ip
 800096a:	431a      	orrs	r2, r3
 800096c:	4694      	mov	ip, r2
 800096e:	4665      	mov	r5, ip
 8000970:	1e6b      	subs	r3, r5, #1
 8000972:	419d      	sbcs	r5, r3
 8000974:	464b      	mov	r3, r9
 8000976:	431d      	orrs	r5, r3
 8000978:	e612      	b.n	80005a0 <__aeabi_dadd+0x9c>
 800097a:	0021      	movs	r1, r4
 800097c:	4301      	orrs	r1, r0
 800097e:	d100      	bne.n	8000982 <__aeabi_dadd+0x47e>
 8000980:	e0c4      	b.n	8000b0c <__aeabi_dadd+0x608>
 8000982:	1e51      	subs	r1, r2, #1
 8000984:	2a01      	cmp	r2, #1
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x486>
 8000988:	e0fb      	b.n	8000b82 <__aeabi_dadd+0x67e>
 800098a:	4d8d      	ldr	r5, [pc, #564]	@ (8000bc0 <__aeabi_dadd+0x6bc>)
 800098c:	42aa      	cmp	r2, r5
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x48e>
 8000990:	e0b5      	b.n	8000afe <__aeabi_dadd+0x5fa>
 8000992:	2501      	movs	r5, #1
 8000994:	2938      	cmp	r1, #56	@ 0x38
 8000996:	dd00      	ble.n	800099a <__aeabi_dadd+0x496>
 8000998:	e741      	b.n	800081e <__aeabi_dadd+0x31a>
 800099a:	000a      	movs	r2, r1
 800099c:	e72f      	b.n	80007fe <__aeabi_dadd+0x2fa>
 800099e:	4c89      	ldr	r4, [pc, #548]	@ (8000bc4 <__aeabi_dadd+0x6c0>)
 80009a0:	1aff      	subs	r7, r7, r3
 80009a2:	4014      	ands	r4, r2
 80009a4:	0762      	lsls	r2, r4, #29
 80009a6:	08e4      	lsrs	r4, r4, #3
 80009a8:	e76a      	b.n	8000880 <__aeabi_dadd+0x37c>
 80009aa:	4a85      	ldr	r2, [pc, #532]	@ (8000bc0 <__aeabi_dadd+0x6bc>)
 80009ac:	4291      	cmp	r1, r2
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x4ae>
 80009b0:	e0e3      	b.n	8000b7a <__aeabi_dadd+0x676>
 80009b2:	4663      	mov	r3, ip
 80009b4:	18c2      	adds	r2, r0, r3
 80009b6:	4282      	cmp	r2, r0
 80009b8:	4180      	sbcs	r0, r0
 80009ba:	0023      	movs	r3, r4
 80009bc:	4240      	negs	r0, r0
 80009be:	4453      	add	r3, sl
 80009c0:	181b      	adds	r3, r3, r0
 80009c2:	07dd      	lsls	r5, r3, #31
 80009c4:	085c      	lsrs	r4, r3, #1
 80009c6:	2307      	movs	r3, #7
 80009c8:	0852      	lsrs	r2, r2, #1
 80009ca:	4315      	orrs	r5, r2
 80009cc:	000f      	movs	r7, r1
 80009ce:	402b      	ands	r3, r5
 80009d0:	e700      	b.n	80007d4 <__aeabi_dadd+0x2d0>
 80009d2:	4663      	mov	r3, ip
 80009d4:	1a1d      	subs	r5, r3, r0
 80009d6:	45ac      	cmp	ip, r5
 80009d8:	4192      	sbcs	r2, r2
 80009da:	4653      	mov	r3, sl
 80009dc:	4252      	negs	r2, r2
 80009de:	1b1c      	subs	r4, r3, r4
 80009e0:	000e      	movs	r6, r1
 80009e2:	4688      	mov	r8, r1
 80009e4:	1aa4      	subs	r4, r4, r2
 80009e6:	e5e5      	b.n	80005b4 <__aeabi_dadd+0xb0>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d000      	beq.n	80009ee <__aeabi_dadd+0x4ea>
 80009ec:	e091      	b.n	8000b12 <__aeabi_dadd+0x60e>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d138      	bne.n	8000a64 <__aeabi_dadd+0x560>
 80009f2:	2480      	movs	r4, #128	@ 0x80
 80009f4:	2600      	movs	r6, #0
 80009f6:	0324      	lsls	r4, r4, #12
 80009f8:	e756      	b.n	80008a8 <__aeabi_dadd+0x3a4>
 80009fa:	4663      	mov	r3, ip
 80009fc:	18c5      	adds	r5, r0, r3
 80009fe:	4285      	cmp	r5, r0
 8000a00:	4180      	sbcs	r0, r0
 8000a02:	4454      	add	r4, sl
 8000a04:	4240      	negs	r0, r0
 8000a06:	1824      	adds	r4, r4, r0
 8000a08:	2701      	movs	r7, #1
 8000a0a:	0223      	lsls	r3, r4, #8
 8000a0c:	d400      	bmi.n	8000a10 <__aeabi_dadd+0x50c>
 8000a0e:	e6df      	b.n	80007d0 <__aeabi_dadd+0x2cc>
 8000a10:	2702      	movs	r7, #2
 8000a12:	e687      	b.n	8000724 <__aeabi_dadd+0x220>
 8000a14:	4663      	mov	r3, ip
 8000a16:	1ac5      	subs	r5, r0, r3
 8000a18:	42a8      	cmp	r0, r5
 8000a1a:	4180      	sbcs	r0, r0
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	4240      	negs	r0, r0
 8000a20:	1ae4      	subs	r4, r4, r3
 8000a22:	2701      	movs	r7, #1
 8000a24:	1a24      	subs	r4, r4, r0
 8000a26:	e5c0      	b.n	80005aa <__aeabi_dadd+0xa6>
 8000a28:	0762      	lsls	r2, r4, #29
 8000a2a:	08c0      	lsrs	r0, r0, #3
 8000a2c:	4302      	orrs	r2, r0
 8000a2e:	08e4      	lsrs	r4, r4, #3
 8000a30:	e736      	b.n	80008a0 <__aeabi_dadd+0x39c>
 8000a32:	0011      	movs	r1, r2
 8000a34:	4653      	mov	r3, sl
 8000a36:	3920      	subs	r1, #32
 8000a38:	40cb      	lsrs	r3, r1
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	2a20      	cmp	r2, #32
 8000a3e:	d006      	beq.n	8000a4e <__aeabi_dadd+0x54a>
 8000a40:	2140      	movs	r1, #64	@ 0x40
 8000a42:	4653      	mov	r3, sl
 8000a44:	1a8a      	subs	r2, r1, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	4662      	mov	r2, ip
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	4665      	mov	r5, ip
 8000a50:	1e6b      	subs	r3, r5, #1
 8000a52:	419d      	sbcs	r5, r3
 8000a54:	464b      	mov	r3, r9
 8000a56:	431d      	orrs	r5, r3
 8000a58:	e659      	b.n	800070e <__aeabi_dadd+0x20a>
 8000a5a:	0762      	lsls	r2, r4, #29
 8000a5c:	08c0      	lsrs	r0, r0, #3
 8000a5e:	4302      	orrs	r2, r0
 8000a60:	08e4      	lsrs	r4, r4, #3
 8000a62:	e70d      	b.n	8000880 <__aeabi_dadd+0x37c>
 8000a64:	4653      	mov	r3, sl
 8000a66:	075a      	lsls	r2, r3, #29
 8000a68:	4663      	mov	r3, ip
 8000a6a:	08d8      	lsrs	r0, r3, #3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	000e      	movs	r6, r1
 8000a70:	4302      	orrs	r2, r0
 8000a72:	08dc      	lsrs	r4, r3, #3
 8000a74:	e714      	b.n	80008a0 <__aeabi_dadd+0x39c>
 8000a76:	0015      	movs	r5, r2
 8000a78:	0026      	movs	r6, r4
 8000a7a:	3d20      	subs	r5, #32
 8000a7c:	40ee      	lsrs	r6, r5
 8000a7e:	2a20      	cmp	r2, #32
 8000a80:	d003      	beq.n	8000a8a <__aeabi_dadd+0x586>
 8000a82:	2540      	movs	r5, #64	@ 0x40
 8000a84:	1aaa      	subs	r2, r5, r2
 8000a86:	4094      	lsls	r4, r2
 8000a88:	4320      	orrs	r0, r4
 8000a8a:	1e42      	subs	r2, r0, #1
 8000a8c:	4190      	sbcs	r0, r2
 8000a8e:	0005      	movs	r5, r0
 8000a90:	4335      	orrs	r5, r6
 8000a92:	e606      	b.n	80006a2 <__aeabi_dadd+0x19e>
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d07c      	beq.n	8000b92 <__aeabi_dadd+0x68e>
 8000a98:	4662      	mov	r2, ip
 8000a9a:	4653      	mov	r3, sl
 8000a9c:	08c0      	lsrs	r0, r0, #3
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x5a0>
 8000aa2:	e6fa      	b.n	800089a <__aeabi_dadd+0x396>
 8000aa4:	0762      	lsls	r2, r4, #29
 8000aa6:	4310      	orrs	r0, r2
 8000aa8:	2280      	movs	r2, #128	@ 0x80
 8000aaa:	08e4      	lsrs	r4, r4, #3
 8000aac:	0312      	lsls	r2, r2, #12
 8000aae:	4214      	tst	r4, r2
 8000ab0:	d008      	beq.n	8000ac4 <__aeabi_dadd+0x5c0>
 8000ab2:	08d9      	lsrs	r1, r3, #3
 8000ab4:	4211      	tst	r1, r2
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_dadd+0x5c0>
 8000ab8:	4663      	mov	r3, ip
 8000aba:	08d8      	lsrs	r0, r3, #3
 8000abc:	4653      	mov	r3, sl
 8000abe:	000c      	movs	r4, r1
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4318      	orrs	r0, r3
 8000ac4:	0f42      	lsrs	r2, r0, #29
 8000ac6:	00c0      	lsls	r0, r0, #3
 8000ac8:	08c0      	lsrs	r0, r0, #3
 8000aca:	0752      	lsls	r2, r2, #29
 8000acc:	4302      	orrs	r2, r0
 8000ace:	e6e7      	b.n	80008a0 <__aeabi_dadd+0x39c>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x5d2>
 8000ad4:	e72d      	b.n	8000932 <__aeabi_dadd+0x42e>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	08d8      	lsrs	r0, r3, #3
 8000ada:	4653      	mov	r3, sl
 8000adc:	075a      	lsls	r2, r3, #29
 8000ade:	000e      	movs	r6, r1
 8000ae0:	4302      	orrs	r2, r0
 8000ae2:	08dc      	lsrs	r4, r3, #3
 8000ae4:	e6cc      	b.n	8000880 <__aeabi_dadd+0x37c>
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	1a1d      	subs	r5, r3, r0
 8000aea:	45ac      	cmp	ip, r5
 8000aec:	4192      	sbcs	r2, r2
 8000aee:	4653      	mov	r3, sl
 8000af0:	4252      	negs	r2, r2
 8000af2:	1b1c      	subs	r4, r3, r4
 8000af4:	000e      	movs	r6, r1
 8000af6:	4688      	mov	r8, r1
 8000af8:	1aa4      	subs	r4, r4, r2
 8000afa:	3701      	adds	r7, #1
 8000afc:	e555      	b.n	80005aa <__aeabi_dadd+0xa6>
 8000afe:	4663      	mov	r3, ip
 8000b00:	08d9      	lsrs	r1, r3, #3
 8000b02:	4653      	mov	r3, sl
 8000b04:	075a      	lsls	r2, r3, #29
 8000b06:	430a      	orrs	r2, r1
 8000b08:	08dc      	lsrs	r4, r3, #3
 8000b0a:	e6c9      	b.n	80008a0 <__aeabi_dadd+0x39c>
 8000b0c:	4660      	mov	r0, ip
 8000b0e:	4654      	mov	r4, sl
 8000b10:	e6d4      	b.n	80008bc <__aeabi_dadd+0x3b8>
 8000b12:	08c0      	lsrs	r0, r0, #3
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x616>
 8000b18:	e6bf      	b.n	800089a <__aeabi_dadd+0x396>
 8000b1a:	0762      	lsls	r2, r4, #29
 8000b1c:	4310      	orrs	r0, r2
 8000b1e:	2280      	movs	r2, #128	@ 0x80
 8000b20:	08e4      	lsrs	r4, r4, #3
 8000b22:	0312      	lsls	r2, r2, #12
 8000b24:	4214      	tst	r4, r2
 8000b26:	d0cd      	beq.n	8000ac4 <__aeabi_dadd+0x5c0>
 8000b28:	08dd      	lsrs	r5, r3, #3
 8000b2a:	4215      	tst	r5, r2
 8000b2c:	d1ca      	bne.n	8000ac4 <__aeabi_dadd+0x5c0>
 8000b2e:	4663      	mov	r3, ip
 8000b30:	08d8      	lsrs	r0, r3, #3
 8000b32:	4653      	mov	r3, sl
 8000b34:	075b      	lsls	r3, r3, #29
 8000b36:	000e      	movs	r6, r1
 8000b38:	002c      	movs	r4, r5
 8000b3a:	4318      	orrs	r0, r3
 8000b3c:	e7c2      	b.n	8000ac4 <__aeabi_dadd+0x5c0>
 8000b3e:	4663      	mov	r3, ip
 8000b40:	08d9      	lsrs	r1, r3, #3
 8000b42:	4653      	mov	r3, sl
 8000b44:	075a      	lsls	r2, r3, #29
 8000b46:	430a      	orrs	r2, r1
 8000b48:	08dc      	lsrs	r4, r3, #3
 8000b4a:	e699      	b.n	8000880 <__aeabi_dadd+0x37c>
 8000b4c:	4663      	mov	r3, ip
 8000b4e:	08d8      	lsrs	r0, r3, #3
 8000b50:	4653      	mov	r3, sl
 8000b52:	075a      	lsls	r2, r3, #29
 8000b54:	000e      	movs	r6, r1
 8000b56:	4302      	orrs	r2, r0
 8000b58:	08dc      	lsrs	r4, r3, #3
 8000b5a:	e6a1      	b.n	80008a0 <__aeabi_dadd+0x39c>
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0027      	movs	r7, r4
 8000b60:	3920      	subs	r1, #32
 8000b62:	40cf      	lsrs	r7, r1
 8000b64:	2a20      	cmp	r2, #32
 8000b66:	d003      	beq.n	8000b70 <__aeabi_dadd+0x66c>
 8000b68:	2140      	movs	r1, #64	@ 0x40
 8000b6a:	1a8a      	subs	r2, r1, r2
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	4320      	orrs	r0, r4
 8000b70:	1e42      	subs	r2, r0, #1
 8000b72:	4190      	sbcs	r0, r2
 8000b74:	0005      	movs	r5, r0
 8000b76:	433d      	orrs	r5, r7
 8000b78:	e651      	b.n	800081e <__aeabi_dadd+0x31a>
 8000b7a:	000c      	movs	r4, r1
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	2200      	movs	r2, #0
 8000b80:	e558      	b.n	8000634 <__aeabi_dadd+0x130>
 8000b82:	4460      	add	r0, ip
 8000b84:	4560      	cmp	r0, ip
 8000b86:	4192      	sbcs	r2, r2
 8000b88:	4454      	add	r4, sl
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	0005      	movs	r5, r0
 8000b8e:	18a4      	adds	r4, r4, r2
 8000b90:	e73a      	b.n	8000a08 <__aeabi_dadd+0x504>
 8000b92:	4653      	mov	r3, sl
 8000b94:	075a      	lsls	r2, r3, #29
 8000b96:	4663      	mov	r3, ip
 8000b98:	08d9      	lsrs	r1, r3, #3
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	08dc      	lsrs	r4, r3, #3
 8000ba0:	e67e      	b.n	80008a0 <__aeabi_dadd+0x39c>
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	432a      	orrs	r2, r5
 8000ba8:	d000      	beq.n	8000bac <__aeabi_dadd+0x6a8>
 8000baa:	e6ab      	b.n	8000904 <__aeabi_dadd+0x400>
 8000bac:	e6c1      	b.n	8000932 <__aeabi_dadd+0x42e>
 8000bae:	2120      	movs	r1, #32
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	1a09      	subs	r1, r1, r0
 8000bb4:	e519      	b.n	80005ea <__aeabi_dadd+0xe6>
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2500      	movs	r5, #0
 8000bba:	4c01      	ldr	r4, [pc, #4]	@ (8000bc0 <__aeabi_dadd+0x6bc>)
 8000bbc:	e53a      	b.n	8000634 <__aeabi_dadd+0x130>
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	000007ff 	.word	0x000007ff
 8000bc4:	ff7fffff 	.word	0xff7fffff
 8000bc8:	000007fe 	.word	0x000007fe

08000bcc <__aeabi_ddiv>:
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	46de      	mov	lr, fp
 8000bd0:	4645      	mov	r5, r8
 8000bd2:	4657      	mov	r7, sl
 8000bd4:	464e      	mov	r6, r9
 8000bd6:	b5e0      	push	{r5, r6, r7, lr}
 8000bd8:	b087      	sub	sp, #28
 8000bda:	9200      	str	r2, [sp, #0]
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	030b      	lsls	r3, r1, #12
 8000be0:	0b1b      	lsrs	r3, r3, #12
 8000be2:	469b      	mov	fp, r3
 8000be4:	0fca      	lsrs	r2, r1, #31
 8000be6:	004b      	lsls	r3, r1, #1
 8000be8:	0004      	movs	r4, r0
 8000bea:	4680      	mov	r8, r0
 8000bec:	0d5b      	lsrs	r3, r3, #21
 8000bee:	9202      	str	r2, [sp, #8]
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_ddiv+0x28>
 8000bf2:	e16a      	b.n	8000eca <__aeabi_ddiv+0x2fe>
 8000bf4:	4ad4      	ldr	r2, [pc, #848]	@ (8000f48 <__aeabi_ddiv+0x37c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_ddiv+0x30>
 8000bfa:	e18c      	b.n	8000f16 <__aeabi_ddiv+0x34a>
 8000bfc:	4659      	mov	r1, fp
 8000bfe:	0f42      	lsrs	r2, r0, #29
 8000c00:	00c9      	lsls	r1, r1, #3
 8000c02:	430a      	orrs	r2, r1
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	0409      	lsls	r1, r1, #16
 8000c08:	4311      	orrs	r1, r2
 8000c0a:	00c2      	lsls	r2, r0, #3
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	4acf      	ldr	r2, [pc, #828]	@ (8000f4c <__aeabi_ddiv+0x380>)
 8000c10:	4689      	mov	r9, r1
 8000c12:	4692      	mov	sl, r2
 8000c14:	449a      	add	sl, r3
 8000c16:	2300      	movs	r3, #0
 8000c18:	2400      	movs	r4, #0
 8000c1a:	9303      	str	r3, [sp, #12]
 8000c1c:	9e00      	ldr	r6, [sp, #0]
 8000c1e:	9f01      	ldr	r7, [sp, #4]
 8000c20:	033b      	lsls	r3, r7, #12
 8000c22:	0b1b      	lsrs	r3, r3, #12
 8000c24:	469b      	mov	fp, r3
 8000c26:	007b      	lsls	r3, r7, #1
 8000c28:	0030      	movs	r0, r6
 8000c2a:	0d5b      	lsrs	r3, r3, #21
 8000c2c:	0ffd      	lsrs	r5, r7, #31
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_ddiv+0x68>
 8000c32:	e128      	b.n	8000e86 <__aeabi_ddiv+0x2ba>
 8000c34:	4ac4      	ldr	r2, [pc, #784]	@ (8000f48 <__aeabi_ddiv+0x37c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x70>
 8000c3a:	e177      	b.n	8000f2c <__aeabi_ddiv+0x360>
 8000c3c:	4659      	mov	r1, fp
 8000c3e:	0f72      	lsrs	r2, r6, #29
 8000c40:	00c9      	lsls	r1, r1, #3
 8000c42:	430a      	orrs	r2, r1
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	0409      	lsls	r1, r1, #16
 8000c48:	4311      	orrs	r1, r2
 8000c4a:	468b      	mov	fp, r1
 8000c4c:	49bf      	ldr	r1, [pc, #764]	@ (8000f4c <__aeabi_ddiv+0x380>)
 8000c4e:	00f2      	lsls	r2, r6, #3
 8000c50:	468c      	mov	ip, r1
 8000c52:	4651      	mov	r1, sl
 8000c54:	4463      	add	r3, ip
 8000c56:	1acb      	subs	r3, r1, r3
 8000c58:	469a      	mov	sl, r3
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	9e02      	ldr	r6, [sp, #8]
 8000c5e:	406e      	eors	r6, r5
 8000c60:	2c0f      	cmp	r4, #15
 8000c62:	d827      	bhi.n	8000cb4 <__aeabi_ddiv+0xe8>
 8000c64:	49ba      	ldr	r1, [pc, #744]	@ (8000f50 <__aeabi_ddiv+0x384>)
 8000c66:	00a4      	lsls	r4, r4, #2
 8000c68:	5909      	ldr	r1, [r1, r4]
 8000c6a:	468f      	mov	pc, r1
 8000c6c:	46cb      	mov	fp, r9
 8000c6e:	4642      	mov	r2, r8
 8000c70:	9e02      	ldr	r6, [sp, #8]
 8000c72:	9b03      	ldr	r3, [sp, #12]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d016      	beq.n	8000ca6 <__aeabi_ddiv+0xda>
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_ddiv+0xb2>
 8000c7c:	e2a6      	b.n	80011cc <__aeabi_ddiv+0x600>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d000      	beq.n	8000c84 <__aeabi_ddiv+0xb8>
 8000c82:	e0df      	b.n	8000e44 <__aeabi_ddiv+0x278>
 8000c84:	2200      	movs	r2, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	2400      	movs	r4, #0
 8000c8a:	4690      	mov	r8, r2
 8000c8c:	051b      	lsls	r3, r3, #20
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	07f6      	lsls	r6, r6, #31
 8000c92:	4333      	orrs	r3, r6
 8000c94:	4640      	mov	r0, r8
 8000c96:	0019      	movs	r1, r3
 8000c98:	b007      	add	sp, #28
 8000c9a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c9c:	46bb      	mov	fp, r7
 8000c9e:	46b2      	mov	sl, r6
 8000ca0:	46a9      	mov	r9, r5
 8000ca2:	46a0      	mov	r8, r4
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2400      	movs	r4, #0
 8000caa:	4690      	mov	r8, r2
 8000cac:	4ba6      	ldr	r3, [pc, #664]	@ (8000f48 <__aeabi_ddiv+0x37c>)
 8000cae:	e7ed      	b.n	8000c8c <__aeabi_ddiv+0xc0>
 8000cb0:	002e      	movs	r6, r5
 8000cb2:	e7df      	b.n	8000c74 <__aeabi_ddiv+0xa8>
 8000cb4:	45cb      	cmp	fp, r9
 8000cb6:	d200      	bcs.n	8000cba <__aeabi_ddiv+0xee>
 8000cb8:	e1d4      	b.n	8001064 <__aeabi_ddiv+0x498>
 8000cba:	d100      	bne.n	8000cbe <__aeabi_ddiv+0xf2>
 8000cbc:	e1cf      	b.n	800105e <__aeabi_ddiv+0x492>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	425b      	negs	r3, r3
 8000cc2:	469c      	mov	ip, r3
 8000cc4:	4644      	mov	r4, r8
 8000cc6:	4648      	mov	r0, r9
 8000cc8:	2700      	movs	r7, #0
 8000cca:	44e2      	add	sl, ip
 8000ccc:	465b      	mov	r3, fp
 8000cce:	0e15      	lsrs	r5, r2, #24
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	431d      	orrs	r5, r3
 8000cd4:	0c19      	lsrs	r1, r3, #16
 8000cd6:	042b      	lsls	r3, r5, #16
 8000cd8:	0212      	lsls	r2, r2, #8
 8000cda:	9500      	str	r5, [sp, #0]
 8000cdc:	0c1d      	lsrs	r5, r3, #16
 8000cde:	4691      	mov	r9, r2
 8000ce0:	9102      	str	r1, [sp, #8]
 8000ce2:	9503      	str	r5, [sp, #12]
 8000ce4:	f7ff faa0 	bl	8000228 <__aeabi_uidivmod>
 8000ce8:	0002      	movs	r2, r0
 8000cea:	436a      	muls	r2, r5
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	0c21      	lsrs	r1, r4, #16
 8000cf0:	4680      	mov	r8, r0
 8000cf2:	4319      	orrs	r1, r3
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	d909      	bls.n	8000d0c <__aeabi_ddiv+0x140>
 8000cf8:	9d00      	ldr	r5, [sp, #0]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	46ac      	mov	ip, r5
 8000cfe:	425b      	negs	r3, r3
 8000d00:	4461      	add	r1, ip
 8000d02:	469c      	mov	ip, r3
 8000d04:	44e0      	add	r8, ip
 8000d06:	428d      	cmp	r5, r1
 8000d08:	d800      	bhi.n	8000d0c <__aeabi_ddiv+0x140>
 8000d0a:	e1fb      	b.n	8001104 <__aeabi_ddiv+0x538>
 8000d0c:	1a88      	subs	r0, r1, r2
 8000d0e:	9902      	ldr	r1, [sp, #8]
 8000d10:	f7ff fa8a 	bl	8000228 <__aeabi_uidivmod>
 8000d14:	9a03      	ldr	r2, [sp, #12]
 8000d16:	0424      	lsls	r4, r4, #16
 8000d18:	4342      	muls	r2, r0
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	0c24      	lsrs	r4, r4, #16
 8000d1e:	0003      	movs	r3, r0
 8000d20:	430c      	orrs	r4, r1
 8000d22:	42a2      	cmp	r2, r4
 8000d24:	d906      	bls.n	8000d34 <__aeabi_ddiv+0x168>
 8000d26:	9900      	ldr	r1, [sp, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	468c      	mov	ip, r1
 8000d2c:	4464      	add	r4, ip
 8000d2e:	42a1      	cmp	r1, r4
 8000d30:	d800      	bhi.n	8000d34 <__aeabi_ddiv+0x168>
 8000d32:	e1e1      	b.n	80010f8 <__aeabi_ddiv+0x52c>
 8000d34:	1aa0      	subs	r0, r4, r2
 8000d36:	4642      	mov	r2, r8
 8000d38:	0412      	lsls	r2, r2, #16
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	4693      	mov	fp, r2
 8000d3e:	464b      	mov	r3, r9
 8000d40:	4659      	mov	r1, fp
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	001d      	movs	r5, r3
 8000d46:	9304      	str	r3, [sp, #16]
 8000d48:	040b      	lsls	r3, r1, #16
 8000d4a:	4649      	mov	r1, r9
 8000d4c:	0409      	lsls	r1, r1, #16
 8000d4e:	0c09      	lsrs	r1, r1, #16
 8000d50:	000c      	movs	r4, r1
 8000d52:	0c1b      	lsrs	r3, r3, #16
 8000d54:	435c      	muls	r4, r3
 8000d56:	0c12      	lsrs	r2, r2, #16
 8000d58:	436b      	muls	r3, r5
 8000d5a:	4688      	mov	r8, r1
 8000d5c:	4351      	muls	r1, r2
 8000d5e:	436a      	muls	r2, r5
 8000d60:	0c25      	lsrs	r5, r4, #16
 8000d62:	46ac      	mov	ip, r5
 8000d64:	185b      	adds	r3, r3, r1
 8000d66:	4463      	add	r3, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d903      	bls.n	8000d74 <__aeabi_ddiv+0x1a8>
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	0249      	lsls	r1, r1, #9
 8000d70:	468c      	mov	ip, r1
 8000d72:	4462      	add	r2, ip
 8000d74:	0c19      	lsrs	r1, r3, #16
 8000d76:	0424      	lsls	r4, r4, #16
 8000d78:	041b      	lsls	r3, r3, #16
 8000d7a:	0c24      	lsrs	r4, r4, #16
 8000d7c:	188a      	adds	r2, r1, r2
 8000d7e:	191c      	adds	r4, r3, r4
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d302      	bcc.n	8000d8a <__aeabi_ddiv+0x1be>
 8000d84:	d116      	bne.n	8000db4 <__aeabi_ddiv+0x1e8>
 8000d86:	42a7      	cmp	r7, r4
 8000d88:	d214      	bcs.n	8000db4 <__aeabi_ddiv+0x1e8>
 8000d8a:	465b      	mov	r3, fp
 8000d8c:	9d00      	ldr	r5, [sp, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	444f      	add	r7, r9
 8000d92:	9305      	str	r3, [sp, #20]
 8000d94:	454f      	cmp	r7, r9
 8000d96:	419b      	sbcs	r3, r3
 8000d98:	46ac      	mov	ip, r5
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	4463      	add	r3, ip
 8000d9e:	18c0      	adds	r0, r0, r3
 8000da0:	4285      	cmp	r5, r0
 8000da2:	d300      	bcc.n	8000da6 <__aeabi_ddiv+0x1da>
 8000da4:	e1a1      	b.n	80010ea <__aeabi_ddiv+0x51e>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	d900      	bls.n	8000dac <__aeabi_ddiv+0x1e0>
 8000daa:	e1f6      	b.n	800119a <__aeabi_ddiv+0x5ce>
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x1e4>
 8000dae:	e1f1      	b.n	8001194 <__aeabi_ddiv+0x5c8>
 8000db0:	9b05      	ldr	r3, [sp, #20]
 8000db2:	469b      	mov	fp, r3
 8000db4:	1b3c      	subs	r4, r7, r4
 8000db6:	42a7      	cmp	r7, r4
 8000db8:	41bf      	sbcs	r7, r7
 8000dba:	9d00      	ldr	r5, [sp, #0]
 8000dbc:	1a80      	subs	r0, r0, r2
 8000dbe:	427f      	negs	r7, r7
 8000dc0:	1bc0      	subs	r0, r0, r7
 8000dc2:	4285      	cmp	r5, r0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_ddiv+0x1fc>
 8000dc6:	e1d0      	b.n	800116a <__aeabi_ddiv+0x59e>
 8000dc8:	9902      	ldr	r1, [sp, #8]
 8000dca:	f7ff fa2d 	bl	8000228 <__aeabi_uidivmod>
 8000dce:	9a03      	ldr	r2, [sp, #12]
 8000dd0:	040b      	lsls	r3, r1, #16
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c21      	lsrs	r1, r4, #16
 8000dd6:	0007      	movs	r7, r0
 8000dd8:	4319      	orrs	r1, r3
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d900      	bls.n	8000de0 <__aeabi_ddiv+0x214>
 8000dde:	e178      	b.n	80010d2 <__aeabi_ddiv+0x506>
 8000de0:	1a88      	subs	r0, r1, r2
 8000de2:	9902      	ldr	r1, [sp, #8]
 8000de4:	f7ff fa20 	bl	8000228 <__aeabi_uidivmod>
 8000de8:	9a03      	ldr	r2, [sp, #12]
 8000dea:	0424      	lsls	r4, r4, #16
 8000dec:	4342      	muls	r2, r0
 8000dee:	0409      	lsls	r1, r1, #16
 8000df0:	0c24      	lsrs	r4, r4, #16
 8000df2:	0003      	movs	r3, r0
 8000df4:	430c      	orrs	r4, r1
 8000df6:	42a2      	cmp	r2, r4
 8000df8:	d900      	bls.n	8000dfc <__aeabi_ddiv+0x230>
 8000dfa:	e15d      	b.n	80010b8 <__aeabi_ddiv+0x4ec>
 8000dfc:	4641      	mov	r1, r8
 8000dfe:	1aa4      	subs	r4, r4, r2
 8000e00:	043a      	lsls	r2, r7, #16
 8000e02:	431a      	orrs	r2, r3
 8000e04:	9d04      	ldr	r5, [sp, #16]
 8000e06:	0413      	lsls	r3, r2, #16
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	4359      	muls	r1, r3
 8000e0c:	4647      	mov	r7, r8
 8000e0e:	436b      	muls	r3, r5
 8000e10:	469c      	mov	ip, r3
 8000e12:	0c10      	lsrs	r0, r2, #16
 8000e14:	4347      	muls	r7, r0
 8000e16:	0c0b      	lsrs	r3, r1, #16
 8000e18:	44bc      	add	ip, r7
 8000e1a:	4463      	add	r3, ip
 8000e1c:	4368      	muls	r0, r5
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d903      	bls.n	8000e2a <__aeabi_ddiv+0x25e>
 8000e22:	2580      	movs	r5, #128	@ 0x80
 8000e24:	026d      	lsls	r5, r5, #9
 8000e26:	46ac      	mov	ip, r5
 8000e28:	4460      	add	r0, ip
 8000e2a:	0c1f      	lsrs	r7, r3, #16
 8000e2c:	0409      	lsls	r1, r1, #16
 8000e2e:	041b      	lsls	r3, r3, #16
 8000e30:	0c09      	lsrs	r1, r1, #16
 8000e32:	183f      	adds	r7, r7, r0
 8000e34:	185b      	adds	r3, r3, r1
 8000e36:	42bc      	cmp	r4, r7
 8000e38:	d200      	bcs.n	8000e3c <__aeabi_ddiv+0x270>
 8000e3a:	e102      	b.n	8001042 <__aeabi_ddiv+0x476>
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_ddiv+0x274>
 8000e3e:	e0fd      	b.n	800103c <__aeabi_ddiv+0x470>
 8000e40:	2301      	movs	r3, #1
 8000e42:	431a      	orrs	r2, r3
 8000e44:	4b43      	ldr	r3, [pc, #268]	@ (8000f54 <__aeabi_ddiv+0x388>)
 8000e46:	4453      	add	r3, sl
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	dc00      	bgt.n	8000e4e <__aeabi_ddiv+0x282>
 8000e4c:	e0ae      	b.n	8000fac <__aeabi_ddiv+0x3e0>
 8000e4e:	0751      	lsls	r1, r2, #29
 8000e50:	d000      	beq.n	8000e54 <__aeabi_ddiv+0x288>
 8000e52:	e198      	b.n	8001186 <__aeabi_ddiv+0x5ba>
 8000e54:	4659      	mov	r1, fp
 8000e56:	01c9      	lsls	r1, r1, #7
 8000e58:	d506      	bpl.n	8000e68 <__aeabi_ddiv+0x29c>
 8000e5a:	4659      	mov	r1, fp
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <__aeabi_ddiv+0x38c>)
 8000e5e:	4019      	ands	r1, r3
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	468b      	mov	fp, r1
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4453      	add	r3, sl
 8000e68:	493c      	ldr	r1, [pc, #240]	@ (8000f5c <__aeabi_ddiv+0x390>)
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	dd00      	ble.n	8000e70 <__aeabi_ddiv+0x2a4>
 8000e6e:	e71a      	b.n	8000ca6 <__aeabi_ddiv+0xda>
 8000e70:	4659      	mov	r1, fp
 8000e72:	08d2      	lsrs	r2, r2, #3
 8000e74:	0749      	lsls	r1, r1, #29
 8000e76:	4311      	orrs	r1, r2
 8000e78:	465a      	mov	r2, fp
 8000e7a:	055b      	lsls	r3, r3, #21
 8000e7c:	0254      	lsls	r4, r2, #9
 8000e7e:	4688      	mov	r8, r1
 8000e80:	0b24      	lsrs	r4, r4, #12
 8000e82:	0d5b      	lsrs	r3, r3, #21
 8000e84:	e702      	b.n	8000c8c <__aeabi_ddiv+0xc0>
 8000e86:	465a      	mov	r2, fp
 8000e88:	9b00      	ldr	r3, [sp, #0]
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_ddiv+0x2c4>
 8000e8e:	e07e      	b.n	8000f8e <__aeabi_ddiv+0x3c2>
 8000e90:	465b      	mov	r3, fp
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0x2cc>
 8000e96:	e100      	b.n	800109a <__aeabi_ddiv+0x4ce>
 8000e98:	4658      	mov	r0, fp
 8000e9a:	f001 f8e1 	bl	8002060 <__clzsi2>
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	3a0b      	subs	r2, #11
 8000ea4:	271d      	movs	r7, #29
 8000ea6:	9e00      	ldr	r6, [sp, #0]
 8000ea8:	1aba      	subs	r2, r7, r2
 8000eaa:	0019      	movs	r1, r3
 8000eac:	4658      	mov	r0, fp
 8000eae:	40d6      	lsrs	r6, r2
 8000eb0:	3908      	subs	r1, #8
 8000eb2:	4088      	lsls	r0, r1
 8000eb4:	0032      	movs	r2, r6
 8000eb6:	4302      	orrs	r2, r0
 8000eb8:	4693      	mov	fp, r2
 8000eba:	9a00      	ldr	r2, [sp, #0]
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	4928      	ldr	r1, [pc, #160]	@ (8000f60 <__aeabi_ddiv+0x394>)
 8000ec0:	4453      	add	r3, sl
 8000ec2:	468a      	mov	sl, r1
 8000ec4:	449a      	add	sl, r3
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e6c8      	b.n	8000c5c <__aeabi_ddiv+0x90>
 8000eca:	465b      	mov	r3, fp
 8000ecc:	4303      	orrs	r3, r0
 8000ece:	4699      	mov	r9, r3
 8000ed0:	d056      	beq.n	8000f80 <__aeabi_ddiv+0x3b4>
 8000ed2:	465b      	mov	r3, fp
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_ddiv+0x30e>
 8000ed8:	e0cd      	b.n	8001076 <__aeabi_ddiv+0x4aa>
 8000eda:	4658      	mov	r0, fp
 8000edc:	f001 f8c0 	bl	8002060 <__clzsi2>
 8000ee0:	230b      	movs	r3, #11
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	4484      	add	ip, r0
 8000eea:	4666      	mov	r6, ip
 8000eec:	231d      	movs	r3, #29
 8000eee:	1b9b      	subs	r3, r3, r6
 8000ef0:	0026      	movs	r6, r4
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	4658      	mov	r0, fp
 8000ef6:	40de      	lsrs	r6, r3
 8000ef8:	3908      	subs	r1, #8
 8000efa:	4088      	lsls	r0, r1
 8000efc:	0033      	movs	r3, r6
 8000efe:	4303      	orrs	r3, r0
 8000f00:	4699      	mov	r9, r3
 8000f02:	0023      	movs	r3, r4
 8000f04:	408b      	lsls	r3, r1
 8000f06:	4698      	mov	r8, r3
 8000f08:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <__aeabi_ddiv+0x398>)
 8000f0a:	2400      	movs	r4, #0
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	469a      	mov	sl, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	9303      	str	r3, [sp, #12]
 8000f14:	e682      	b.n	8000c1c <__aeabi_ddiv+0x50>
 8000f16:	465a      	mov	r2, fp
 8000f18:	4302      	orrs	r2, r0
 8000f1a:	4691      	mov	r9, r2
 8000f1c:	d12a      	bne.n	8000f74 <__aeabi_ddiv+0x3a8>
 8000f1e:	2200      	movs	r2, #0
 8000f20:	469a      	mov	sl, r3
 8000f22:	2302      	movs	r3, #2
 8000f24:	4690      	mov	r8, r2
 8000f26:	2408      	movs	r4, #8
 8000f28:	9303      	str	r3, [sp, #12]
 8000f2a:	e677      	b.n	8000c1c <__aeabi_ddiv+0x50>
 8000f2c:	465a      	mov	r2, fp
 8000f2e:	9b00      	ldr	r3, [sp, #0]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <__aeabi_ddiv+0x39c>)
 8000f34:	469c      	mov	ip, r3
 8000f36:	44e2      	add	sl, ip
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d117      	bne.n	8000f6c <__aeabi_ddiv+0x3a0>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	431c      	orrs	r4, r3
 8000f40:	2300      	movs	r3, #0
 8000f42:	469b      	mov	fp, r3
 8000f44:	3302      	adds	r3, #2
 8000f46:	e689      	b.n	8000c5c <__aeabi_ddiv+0x90>
 8000f48:	000007ff 	.word	0x000007ff
 8000f4c:	fffffc01 	.word	0xfffffc01
 8000f50:	08005ac8 	.word	0x08005ac8
 8000f54:	000003ff 	.word	0x000003ff
 8000f58:	feffffff 	.word	0xfeffffff
 8000f5c:	000007fe 	.word	0x000007fe
 8000f60:	000003f3 	.word	0x000003f3
 8000f64:	fffffc0d 	.word	0xfffffc0d
 8000f68:	fffff801 	.word	0xfffff801
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	0032      	movs	r2, r6
 8000f70:	431c      	orrs	r4, r3
 8000f72:	e673      	b.n	8000c5c <__aeabi_ddiv+0x90>
 8000f74:	469a      	mov	sl, r3
 8000f76:	2303      	movs	r3, #3
 8000f78:	46d9      	mov	r9, fp
 8000f7a:	240c      	movs	r4, #12
 8000f7c:	9303      	str	r3, [sp, #12]
 8000f7e:	e64d      	b.n	8000c1c <__aeabi_ddiv+0x50>
 8000f80:	2300      	movs	r3, #0
 8000f82:	4698      	mov	r8, r3
 8000f84:	469a      	mov	sl, r3
 8000f86:	3301      	adds	r3, #1
 8000f88:	2404      	movs	r4, #4
 8000f8a:	9303      	str	r3, [sp, #12]
 8000f8c:	e646      	b.n	8000c1c <__aeabi_ddiv+0x50>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	431c      	orrs	r4, r3
 8000f92:	2300      	movs	r3, #0
 8000f94:	469b      	mov	fp, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	e660      	b.n	8000c5c <__aeabi_ddiv+0x90>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	2480      	movs	r4, #128	@ 0x80
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	4b92      	ldr	r3, [pc, #584]	@ (80011ec <__aeabi_ddiv+0x620>)
 8000fa4:	0324      	lsls	r4, r4, #12
 8000fa6:	e671      	b.n	8000c8c <__aeabi_ddiv+0xc0>
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4252      	negs	r2, r2
 8000fac:	2101      	movs	r1, #1
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	2938      	cmp	r1, #56	@ 0x38
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_ddiv+0x3ea>
 8000fb4:	e666      	b.n	8000c84 <__aeabi_ddiv+0xb8>
 8000fb6:	291f      	cmp	r1, #31
 8000fb8:	dc00      	bgt.n	8000fbc <__aeabi_ddiv+0x3f0>
 8000fba:	e0ab      	b.n	8001114 <__aeabi_ddiv+0x548>
 8000fbc:	201f      	movs	r0, #31
 8000fbe:	4240      	negs	r0, r0
 8000fc0:	1ac3      	subs	r3, r0, r3
 8000fc2:	4658      	mov	r0, fp
 8000fc4:	40d8      	lsrs	r0, r3
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	2920      	cmp	r1, #32
 8000fca:	d004      	beq.n	8000fd6 <__aeabi_ddiv+0x40a>
 8000fcc:	4658      	mov	r0, fp
 8000fce:	4988      	ldr	r1, [pc, #544]	@ (80011f0 <__aeabi_ddiv+0x624>)
 8000fd0:	4451      	add	r1, sl
 8000fd2:	4088      	lsls	r0, r1
 8000fd4:	4302      	orrs	r2, r0
 8000fd6:	1e51      	subs	r1, r2, #1
 8000fd8:	418a      	sbcs	r2, r1
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	2307      	movs	r3, #7
 8000fde:	0019      	movs	r1, r3
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	4011      	ands	r1, r2
 8000fe4:	4213      	tst	r3, r2
 8000fe6:	d00c      	beq.n	8001002 <__aeabi_ddiv+0x436>
 8000fe8:	230f      	movs	r3, #15
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_ddiv+0x426>
 8000ff0:	e0f9      	b.n	80011e6 <__aeabi_ddiv+0x61a>
 8000ff2:	1d11      	adds	r1, r2, #4
 8000ff4:	4291      	cmp	r1, r2
 8000ff6:	419b      	sbcs	r3, r3
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	0759      	lsls	r1, r3, #29
 8000ffe:	025b      	lsls	r3, r3, #9
 8001000:	0b1c      	lsrs	r4, r3, #12
 8001002:	08d2      	lsrs	r2, r2, #3
 8001004:	430a      	orrs	r2, r1
 8001006:	4690      	mov	r8, r2
 8001008:	2300      	movs	r3, #0
 800100a:	e63f      	b.n	8000c8c <__aeabi_ddiv+0xc0>
 800100c:	2480      	movs	r4, #128	@ 0x80
 800100e:	464b      	mov	r3, r9
 8001010:	0324      	lsls	r4, r4, #12
 8001012:	4223      	tst	r3, r4
 8001014:	d009      	beq.n	800102a <__aeabi_ddiv+0x45e>
 8001016:	465b      	mov	r3, fp
 8001018:	4223      	tst	r3, r4
 800101a:	d106      	bne.n	800102a <__aeabi_ddiv+0x45e>
 800101c:	431c      	orrs	r4, r3
 800101e:	0324      	lsls	r4, r4, #12
 8001020:	002e      	movs	r6, r5
 8001022:	4690      	mov	r8, r2
 8001024:	4b71      	ldr	r3, [pc, #452]	@ (80011ec <__aeabi_ddiv+0x620>)
 8001026:	0b24      	lsrs	r4, r4, #12
 8001028:	e630      	b.n	8000c8c <__aeabi_ddiv+0xc0>
 800102a:	2480      	movs	r4, #128	@ 0x80
 800102c:	464b      	mov	r3, r9
 800102e:	0324      	lsls	r4, r4, #12
 8001030:	431c      	orrs	r4, r3
 8001032:	0324      	lsls	r4, r4, #12
 8001034:	9e02      	ldr	r6, [sp, #8]
 8001036:	4b6d      	ldr	r3, [pc, #436]	@ (80011ec <__aeabi_ddiv+0x620>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e627      	b.n	8000c8c <__aeabi_ddiv+0xc0>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_ddiv+0x476>
 8001040:	e700      	b.n	8000e44 <__aeabi_ddiv+0x278>
 8001042:	9800      	ldr	r0, [sp, #0]
 8001044:	1e51      	subs	r1, r2, #1
 8001046:	4684      	mov	ip, r0
 8001048:	4464      	add	r4, ip
 800104a:	4284      	cmp	r4, r0
 800104c:	d200      	bcs.n	8001050 <__aeabi_ddiv+0x484>
 800104e:	e084      	b.n	800115a <__aeabi_ddiv+0x58e>
 8001050:	42bc      	cmp	r4, r7
 8001052:	d200      	bcs.n	8001056 <__aeabi_ddiv+0x48a>
 8001054:	e0ae      	b.n	80011b4 <__aeabi_ddiv+0x5e8>
 8001056:	d100      	bne.n	800105a <__aeabi_ddiv+0x48e>
 8001058:	e0c1      	b.n	80011de <__aeabi_ddiv+0x612>
 800105a:	000a      	movs	r2, r1
 800105c:	e6f0      	b.n	8000e40 <__aeabi_ddiv+0x274>
 800105e:	4542      	cmp	r2, r8
 8001060:	d900      	bls.n	8001064 <__aeabi_ddiv+0x498>
 8001062:	e62c      	b.n	8000cbe <__aeabi_ddiv+0xf2>
 8001064:	464b      	mov	r3, r9
 8001066:	07dc      	lsls	r4, r3, #31
 8001068:	0858      	lsrs	r0, r3, #1
 800106a:	4643      	mov	r3, r8
 800106c:	085b      	lsrs	r3, r3, #1
 800106e:	431c      	orrs	r4, r3
 8001070:	4643      	mov	r3, r8
 8001072:	07df      	lsls	r7, r3, #31
 8001074:	e62a      	b.n	8000ccc <__aeabi_ddiv+0x100>
 8001076:	f000 fff3 	bl	8002060 <__clzsi2>
 800107a:	2315      	movs	r3, #21
 800107c:	469c      	mov	ip, r3
 800107e:	4484      	add	ip, r0
 8001080:	0002      	movs	r2, r0
 8001082:	4663      	mov	r3, ip
 8001084:	3220      	adds	r2, #32
 8001086:	2b1c      	cmp	r3, #28
 8001088:	dc00      	bgt.n	800108c <__aeabi_ddiv+0x4c0>
 800108a:	e72e      	b.n	8000eea <__aeabi_ddiv+0x31e>
 800108c:	0023      	movs	r3, r4
 800108e:	3808      	subs	r0, #8
 8001090:	4083      	lsls	r3, r0
 8001092:	4699      	mov	r9, r3
 8001094:	2300      	movs	r3, #0
 8001096:	4698      	mov	r8, r3
 8001098:	e736      	b.n	8000f08 <__aeabi_ddiv+0x33c>
 800109a:	f000 ffe1 	bl	8002060 <__clzsi2>
 800109e:	0002      	movs	r2, r0
 80010a0:	0003      	movs	r3, r0
 80010a2:	3215      	adds	r2, #21
 80010a4:	3320      	adds	r3, #32
 80010a6:	2a1c      	cmp	r2, #28
 80010a8:	dc00      	bgt.n	80010ac <__aeabi_ddiv+0x4e0>
 80010aa:	e6fb      	b.n	8000ea4 <__aeabi_ddiv+0x2d8>
 80010ac:	9900      	ldr	r1, [sp, #0]
 80010ae:	3808      	subs	r0, #8
 80010b0:	4081      	lsls	r1, r0
 80010b2:	2200      	movs	r2, #0
 80010b4:	468b      	mov	fp, r1
 80010b6:	e702      	b.n	8000ebe <__aeabi_ddiv+0x2f2>
 80010b8:	9900      	ldr	r1, [sp, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	468c      	mov	ip, r1
 80010be:	4464      	add	r4, ip
 80010c0:	42a1      	cmp	r1, r4
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4fa>
 80010c4:	e69a      	b.n	8000dfc <__aeabi_ddiv+0x230>
 80010c6:	42a2      	cmp	r2, r4
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x500>
 80010ca:	e697      	b.n	8000dfc <__aeabi_ddiv+0x230>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	4464      	add	r4, ip
 80010d0:	e694      	b.n	8000dfc <__aeabi_ddiv+0x230>
 80010d2:	46ac      	mov	ip, r5
 80010d4:	4461      	add	r1, ip
 80010d6:	3f01      	subs	r7, #1
 80010d8:	428d      	cmp	r5, r1
 80010da:	d900      	bls.n	80010de <__aeabi_ddiv+0x512>
 80010dc:	e680      	b.n	8000de0 <__aeabi_ddiv+0x214>
 80010de:	428a      	cmp	r2, r1
 80010e0:	d800      	bhi.n	80010e4 <__aeabi_ddiv+0x518>
 80010e2:	e67d      	b.n	8000de0 <__aeabi_ddiv+0x214>
 80010e4:	1e87      	subs	r7, r0, #2
 80010e6:	4461      	add	r1, ip
 80010e8:	e67a      	b.n	8000de0 <__aeabi_ddiv+0x214>
 80010ea:	4285      	cmp	r5, r0
 80010ec:	d000      	beq.n	80010f0 <__aeabi_ddiv+0x524>
 80010ee:	e65f      	b.n	8000db0 <__aeabi_ddiv+0x1e4>
 80010f0:	45b9      	cmp	r9, r7
 80010f2:	d900      	bls.n	80010f6 <__aeabi_ddiv+0x52a>
 80010f4:	e65c      	b.n	8000db0 <__aeabi_ddiv+0x1e4>
 80010f6:	e656      	b.n	8000da6 <__aeabi_ddiv+0x1da>
 80010f8:	42a2      	cmp	r2, r4
 80010fa:	d800      	bhi.n	80010fe <__aeabi_ddiv+0x532>
 80010fc:	e61a      	b.n	8000d34 <__aeabi_ddiv+0x168>
 80010fe:	1e83      	subs	r3, r0, #2
 8001100:	4464      	add	r4, ip
 8001102:	e617      	b.n	8000d34 <__aeabi_ddiv+0x168>
 8001104:	428a      	cmp	r2, r1
 8001106:	d800      	bhi.n	800110a <__aeabi_ddiv+0x53e>
 8001108:	e600      	b.n	8000d0c <__aeabi_ddiv+0x140>
 800110a:	46ac      	mov	ip, r5
 800110c:	1e83      	subs	r3, r0, #2
 800110e:	4698      	mov	r8, r3
 8001110:	4461      	add	r1, ip
 8001112:	e5fb      	b.n	8000d0c <__aeabi_ddiv+0x140>
 8001114:	4837      	ldr	r0, [pc, #220]	@ (80011f4 <__aeabi_ddiv+0x628>)
 8001116:	0014      	movs	r4, r2
 8001118:	4450      	add	r0, sl
 800111a:	4082      	lsls	r2, r0
 800111c:	465b      	mov	r3, fp
 800111e:	0017      	movs	r7, r2
 8001120:	4083      	lsls	r3, r0
 8001122:	40cc      	lsrs	r4, r1
 8001124:	1e7a      	subs	r2, r7, #1
 8001126:	4197      	sbcs	r7, r2
 8001128:	4323      	orrs	r3, r4
 800112a:	433b      	orrs	r3, r7
 800112c:	001a      	movs	r2, r3
 800112e:	465b      	mov	r3, fp
 8001130:	40cb      	lsrs	r3, r1
 8001132:	0751      	lsls	r1, r2, #29
 8001134:	d009      	beq.n	800114a <__aeabi_ddiv+0x57e>
 8001136:	210f      	movs	r1, #15
 8001138:	4011      	ands	r1, r2
 800113a:	2904      	cmp	r1, #4
 800113c:	d005      	beq.n	800114a <__aeabi_ddiv+0x57e>
 800113e:	1d11      	adds	r1, r2, #4
 8001140:	4291      	cmp	r1, r2
 8001142:	4192      	sbcs	r2, r2
 8001144:	4252      	negs	r2, r2
 8001146:	189b      	adds	r3, r3, r2
 8001148:	000a      	movs	r2, r1
 800114a:	0219      	lsls	r1, r3, #8
 800114c:	d400      	bmi.n	8001150 <__aeabi_ddiv+0x584>
 800114e:	e755      	b.n	8000ffc <__aeabi_ddiv+0x430>
 8001150:	2200      	movs	r2, #0
 8001152:	2301      	movs	r3, #1
 8001154:	2400      	movs	r4, #0
 8001156:	4690      	mov	r8, r2
 8001158:	e598      	b.n	8000c8c <__aeabi_ddiv+0xc0>
 800115a:	000a      	movs	r2, r1
 800115c:	42bc      	cmp	r4, r7
 800115e:	d000      	beq.n	8001162 <__aeabi_ddiv+0x596>
 8001160:	e66e      	b.n	8000e40 <__aeabi_ddiv+0x274>
 8001162:	454b      	cmp	r3, r9
 8001164:	d000      	beq.n	8001168 <__aeabi_ddiv+0x59c>
 8001166:	e66b      	b.n	8000e40 <__aeabi_ddiv+0x274>
 8001168:	e66c      	b.n	8000e44 <__aeabi_ddiv+0x278>
 800116a:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <__aeabi_ddiv+0x62c>)
 800116c:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <__aeabi_ddiv+0x630>)
 800116e:	4453      	add	r3, sl
 8001170:	4592      	cmp	sl, r2
 8001172:	da00      	bge.n	8001176 <__aeabi_ddiv+0x5aa>
 8001174:	e718      	b.n	8000fa8 <__aeabi_ddiv+0x3dc>
 8001176:	2101      	movs	r1, #1
 8001178:	4249      	negs	r1, r1
 800117a:	1d0a      	adds	r2, r1, #4
 800117c:	428a      	cmp	r2, r1
 800117e:	4189      	sbcs	r1, r1
 8001180:	4249      	negs	r1, r1
 8001182:	448b      	add	fp, r1
 8001184:	e666      	b.n	8000e54 <__aeabi_ddiv+0x288>
 8001186:	210f      	movs	r1, #15
 8001188:	4011      	ands	r1, r2
 800118a:	2904      	cmp	r1, #4
 800118c:	d100      	bne.n	8001190 <__aeabi_ddiv+0x5c4>
 800118e:	e661      	b.n	8000e54 <__aeabi_ddiv+0x288>
 8001190:	0011      	movs	r1, r2
 8001192:	e7f2      	b.n	800117a <__aeabi_ddiv+0x5ae>
 8001194:	42bc      	cmp	r4, r7
 8001196:	d800      	bhi.n	800119a <__aeabi_ddiv+0x5ce>
 8001198:	e60a      	b.n	8000db0 <__aeabi_ddiv+0x1e4>
 800119a:	2302      	movs	r3, #2
 800119c:	425b      	negs	r3, r3
 800119e:	469c      	mov	ip, r3
 80011a0:	9900      	ldr	r1, [sp, #0]
 80011a2:	444f      	add	r7, r9
 80011a4:	454f      	cmp	r7, r9
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	44e3      	add	fp, ip
 80011aa:	468c      	mov	ip, r1
 80011ac:	425b      	negs	r3, r3
 80011ae:	4463      	add	r3, ip
 80011b0:	18c0      	adds	r0, r0, r3
 80011b2:	e5ff      	b.n	8000db4 <__aeabi_ddiv+0x1e8>
 80011b4:	4649      	mov	r1, r9
 80011b6:	9d00      	ldr	r5, [sp, #0]
 80011b8:	0048      	lsls	r0, r1, #1
 80011ba:	4548      	cmp	r0, r9
 80011bc:	4189      	sbcs	r1, r1
 80011be:	46ac      	mov	ip, r5
 80011c0:	4249      	negs	r1, r1
 80011c2:	4461      	add	r1, ip
 80011c4:	4681      	mov	r9, r0
 80011c6:	3a02      	subs	r2, #2
 80011c8:	1864      	adds	r4, r4, r1
 80011ca:	e7c7      	b.n	800115c <__aeabi_ddiv+0x590>
 80011cc:	2480      	movs	r4, #128	@ 0x80
 80011ce:	465b      	mov	r3, fp
 80011d0:	0324      	lsls	r4, r4, #12
 80011d2:	431c      	orrs	r4, r3
 80011d4:	0324      	lsls	r4, r4, #12
 80011d6:	4690      	mov	r8, r2
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <__aeabi_ddiv+0x620>)
 80011da:	0b24      	lsrs	r4, r4, #12
 80011dc:	e556      	b.n	8000c8c <__aeabi_ddiv+0xc0>
 80011de:	4599      	cmp	r9, r3
 80011e0:	d3e8      	bcc.n	80011b4 <__aeabi_ddiv+0x5e8>
 80011e2:	000a      	movs	r2, r1
 80011e4:	e7bd      	b.n	8001162 <__aeabi_ddiv+0x596>
 80011e6:	2300      	movs	r3, #0
 80011e8:	e708      	b.n	8000ffc <__aeabi_ddiv+0x430>
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	0000043e 	.word	0x0000043e
 80011f4:	0000041e 	.word	0x0000041e
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	fffffc02 	.word	0xfffffc02

08001200 <__aeabi_dmul>:
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	4657      	mov	r7, sl
 8001204:	46de      	mov	lr, fp
 8001206:	464e      	mov	r6, r9
 8001208:	4645      	mov	r5, r8
 800120a:	b5e0      	push	{r5, r6, r7, lr}
 800120c:	001f      	movs	r7, r3
 800120e:	030b      	lsls	r3, r1, #12
 8001210:	0b1b      	lsrs	r3, r3, #12
 8001212:	0016      	movs	r6, r2
 8001214:	469a      	mov	sl, r3
 8001216:	0fca      	lsrs	r2, r1, #31
 8001218:	004b      	lsls	r3, r1, #1
 800121a:	0004      	movs	r4, r0
 800121c:	4693      	mov	fp, r2
 800121e:	b087      	sub	sp, #28
 8001220:	0d5b      	lsrs	r3, r3, #21
 8001222:	d100      	bne.n	8001226 <__aeabi_dmul+0x26>
 8001224:	e0d5      	b.n	80013d2 <__aeabi_dmul+0x1d2>
 8001226:	4abb      	ldr	r2, [pc, #748]	@ (8001514 <__aeabi_dmul+0x314>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d100      	bne.n	800122e <__aeabi_dmul+0x2e>
 800122c:	e0f8      	b.n	8001420 <__aeabi_dmul+0x220>
 800122e:	4651      	mov	r1, sl
 8001230:	0f42      	lsrs	r2, r0, #29
 8001232:	00c9      	lsls	r1, r1, #3
 8001234:	430a      	orrs	r2, r1
 8001236:	2180      	movs	r1, #128	@ 0x80
 8001238:	0409      	lsls	r1, r1, #16
 800123a:	4311      	orrs	r1, r2
 800123c:	00c2      	lsls	r2, r0, #3
 800123e:	4691      	mov	r9, r2
 8001240:	4ab5      	ldr	r2, [pc, #724]	@ (8001518 <__aeabi_dmul+0x318>)
 8001242:	468a      	mov	sl, r1
 8001244:	189d      	adds	r5, r3, r2
 8001246:	2300      	movs	r3, #0
 8001248:	4698      	mov	r8, r3
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	033c      	lsls	r4, r7, #12
 800124e:	007b      	lsls	r3, r7, #1
 8001250:	0ffa      	lsrs	r2, r7, #31
 8001252:	0030      	movs	r0, r6
 8001254:	0b24      	lsrs	r4, r4, #12
 8001256:	0d5b      	lsrs	r3, r3, #21
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	d100      	bne.n	800125e <__aeabi_dmul+0x5e>
 800125c:	e096      	b.n	800138c <__aeabi_dmul+0x18c>
 800125e:	4aad      	ldr	r2, [pc, #692]	@ (8001514 <__aeabi_dmul+0x314>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d031      	beq.n	80012c8 <__aeabi_dmul+0xc8>
 8001264:	0f72      	lsrs	r2, r6, #29
 8001266:	00e4      	lsls	r4, r4, #3
 8001268:	4322      	orrs	r2, r4
 800126a:	2480      	movs	r4, #128	@ 0x80
 800126c:	0424      	lsls	r4, r4, #16
 800126e:	4314      	orrs	r4, r2
 8001270:	4aa9      	ldr	r2, [pc, #676]	@ (8001518 <__aeabi_dmul+0x318>)
 8001272:	00f0      	lsls	r0, r6, #3
 8001274:	4694      	mov	ip, r2
 8001276:	4463      	add	r3, ip
 8001278:	195b      	adds	r3, r3, r5
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	4642      	mov	r2, r8
 8001280:	2600      	movs	r6, #0
 8001282:	2a0a      	cmp	r2, #10
 8001284:	dc42      	bgt.n	800130c <__aeabi_dmul+0x10c>
 8001286:	465a      	mov	r2, fp
 8001288:	9900      	ldr	r1, [sp, #0]
 800128a:	404a      	eors	r2, r1
 800128c:	4693      	mov	fp, r2
 800128e:	4642      	mov	r2, r8
 8001290:	2a02      	cmp	r2, #2
 8001292:	dc32      	bgt.n	80012fa <__aeabi_dmul+0xfa>
 8001294:	3a01      	subs	r2, #1
 8001296:	2a01      	cmp	r2, #1
 8001298:	d900      	bls.n	800129c <__aeabi_dmul+0x9c>
 800129a:	e149      	b.n	8001530 <__aeabi_dmul+0x330>
 800129c:	2e02      	cmp	r6, #2
 800129e:	d100      	bne.n	80012a2 <__aeabi_dmul+0xa2>
 80012a0:	e0ca      	b.n	8001438 <__aeabi_dmul+0x238>
 80012a2:	2e01      	cmp	r6, #1
 80012a4:	d13d      	bne.n	8001322 <__aeabi_dmul+0x122>
 80012a6:	2300      	movs	r3, #0
 80012a8:	2400      	movs	r4, #0
 80012aa:	2200      	movs	r2, #0
 80012ac:	0010      	movs	r0, r2
 80012ae:	465a      	mov	r2, fp
 80012b0:	051b      	lsls	r3, r3, #20
 80012b2:	4323      	orrs	r3, r4
 80012b4:	07d2      	lsls	r2, r2, #31
 80012b6:	4313      	orrs	r3, r2
 80012b8:	0019      	movs	r1, r3
 80012ba:	b007      	add	sp, #28
 80012bc:	bcf0      	pop	{r4, r5, r6, r7}
 80012be:	46bb      	mov	fp, r7
 80012c0:	46b2      	mov	sl, r6
 80012c2:	46a9      	mov	r9, r5
 80012c4:	46a0      	mov	r8, r4
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c8:	4b92      	ldr	r3, [pc, #584]	@ (8001514 <__aeabi_dmul+0x314>)
 80012ca:	4326      	orrs	r6, r4
 80012cc:	18eb      	adds	r3, r5, r3
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dmul+0xd4>
 80012d2:	e0bb      	b.n	800144c <__aeabi_dmul+0x24c>
 80012d4:	2203      	movs	r2, #3
 80012d6:	4641      	mov	r1, r8
 80012d8:	4311      	orrs	r1, r2
 80012da:	465a      	mov	r2, fp
 80012dc:	4688      	mov	r8, r1
 80012de:	9900      	ldr	r1, [sp, #0]
 80012e0:	404a      	eors	r2, r1
 80012e2:	2180      	movs	r1, #128	@ 0x80
 80012e4:	0109      	lsls	r1, r1, #4
 80012e6:	468c      	mov	ip, r1
 80012e8:	0029      	movs	r1, r5
 80012ea:	4461      	add	r1, ip
 80012ec:	9101      	str	r1, [sp, #4]
 80012ee:	4641      	mov	r1, r8
 80012f0:	290a      	cmp	r1, #10
 80012f2:	dd00      	ble.n	80012f6 <__aeabi_dmul+0xf6>
 80012f4:	e233      	b.n	800175e <__aeabi_dmul+0x55e>
 80012f6:	4693      	mov	fp, r2
 80012f8:	2603      	movs	r6, #3
 80012fa:	4642      	mov	r2, r8
 80012fc:	2701      	movs	r7, #1
 80012fe:	4097      	lsls	r7, r2
 8001300:	21a6      	movs	r1, #166	@ 0xa6
 8001302:	003a      	movs	r2, r7
 8001304:	00c9      	lsls	r1, r1, #3
 8001306:	400a      	ands	r2, r1
 8001308:	420f      	tst	r7, r1
 800130a:	d031      	beq.n	8001370 <__aeabi_dmul+0x170>
 800130c:	9e02      	ldr	r6, [sp, #8]
 800130e:	2e02      	cmp	r6, #2
 8001310:	d100      	bne.n	8001314 <__aeabi_dmul+0x114>
 8001312:	e235      	b.n	8001780 <__aeabi_dmul+0x580>
 8001314:	2e03      	cmp	r6, #3
 8001316:	d100      	bne.n	800131a <__aeabi_dmul+0x11a>
 8001318:	e1d2      	b.n	80016c0 <__aeabi_dmul+0x4c0>
 800131a:	4654      	mov	r4, sl
 800131c:	4648      	mov	r0, r9
 800131e:	2e01      	cmp	r6, #1
 8001320:	d0c1      	beq.n	80012a6 <__aeabi_dmul+0xa6>
 8001322:	9a01      	ldr	r2, [sp, #4]
 8001324:	4b7d      	ldr	r3, [pc, #500]	@ (800151c <__aeabi_dmul+0x31c>)
 8001326:	4694      	mov	ip, r2
 8001328:	4463      	add	r3, ip
 800132a:	2b00      	cmp	r3, #0
 800132c:	dc00      	bgt.n	8001330 <__aeabi_dmul+0x130>
 800132e:	e0c0      	b.n	80014b2 <__aeabi_dmul+0x2b2>
 8001330:	0742      	lsls	r2, r0, #29
 8001332:	d009      	beq.n	8001348 <__aeabi_dmul+0x148>
 8001334:	220f      	movs	r2, #15
 8001336:	4002      	ands	r2, r0
 8001338:	2a04      	cmp	r2, #4
 800133a:	d005      	beq.n	8001348 <__aeabi_dmul+0x148>
 800133c:	1d02      	adds	r2, r0, #4
 800133e:	4282      	cmp	r2, r0
 8001340:	4180      	sbcs	r0, r0
 8001342:	4240      	negs	r0, r0
 8001344:	1824      	adds	r4, r4, r0
 8001346:	0010      	movs	r0, r2
 8001348:	01e2      	lsls	r2, r4, #7
 800134a:	d506      	bpl.n	800135a <__aeabi_dmul+0x15a>
 800134c:	4b74      	ldr	r3, [pc, #464]	@ (8001520 <__aeabi_dmul+0x320>)
 800134e:	9a01      	ldr	r2, [sp, #4]
 8001350:	401c      	ands	r4, r3
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	4694      	mov	ip, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4463      	add	r3, ip
 800135a:	4a72      	ldr	r2, [pc, #456]	@ (8001524 <__aeabi_dmul+0x324>)
 800135c:	4293      	cmp	r3, r2
 800135e:	dc6b      	bgt.n	8001438 <__aeabi_dmul+0x238>
 8001360:	0762      	lsls	r2, r4, #29
 8001362:	08c0      	lsrs	r0, r0, #3
 8001364:	0264      	lsls	r4, r4, #9
 8001366:	055b      	lsls	r3, r3, #21
 8001368:	4302      	orrs	r2, r0
 800136a:	0b24      	lsrs	r4, r4, #12
 800136c:	0d5b      	lsrs	r3, r3, #21
 800136e:	e79d      	b.n	80012ac <__aeabi_dmul+0xac>
 8001370:	2190      	movs	r1, #144	@ 0x90
 8001372:	0089      	lsls	r1, r1, #2
 8001374:	420f      	tst	r7, r1
 8001376:	d163      	bne.n	8001440 <__aeabi_dmul+0x240>
 8001378:	2288      	movs	r2, #136	@ 0x88
 800137a:	423a      	tst	r2, r7
 800137c:	d100      	bne.n	8001380 <__aeabi_dmul+0x180>
 800137e:	e0d7      	b.n	8001530 <__aeabi_dmul+0x330>
 8001380:	9b00      	ldr	r3, [sp, #0]
 8001382:	46a2      	mov	sl, r4
 8001384:	469b      	mov	fp, r3
 8001386:	4681      	mov	r9, r0
 8001388:	9602      	str	r6, [sp, #8]
 800138a:	e7bf      	b.n	800130c <__aeabi_dmul+0x10c>
 800138c:	0023      	movs	r3, r4
 800138e:	4333      	orrs	r3, r6
 8001390:	d100      	bne.n	8001394 <__aeabi_dmul+0x194>
 8001392:	e07f      	b.n	8001494 <__aeabi_dmul+0x294>
 8001394:	2c00      	cmp	r4, #0
 8001396:	d100      	bne.n	800139a <__aeabi_dmul+0x19a>
 8001398:	e1ad      	b.n	80016f6 <__aeabi_dmul+0x4f6>
 800139a:	0020      	movs	r0, r4
 800139c:	f000 fe60 	bl	8002060 <__clzsi2>
 80013a0:	0002      	movs	r2, r0
 80013a2:	0003      	movs	r3, r0
 80013a4:	3a0b      	subs	r2, #11
 80013a6:	201d      	movs	r0, #29
 80013a8:	0019      	movs	r1, r3
 80013aa:	1a82      	subs	r2, r0, r2
 80013ac:	0030      	movs	r0, r6
 80013ae:	3908      	subs	r1, #8
 80013b0:	40d0      	lsrs	r0, r2
 80013b2:	408c      	lsls	r4, r1
 80013b4:	4304      	orrs	r4, r0
 80013b6:	0030      	movs	r0, r6
 80013b8:	4088      	lsls	r0, r1
 80013ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001528 <__aeabi_dmul+0x328>)
 80013bc:	1aeb      	subs	r3, r5, r3
 80013be:	4694      	mov	ip, r2
 80013c0:	4463      	add	r3, ip
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	9201      	str	r2, [sp, #4]
 80013c6:	4642      	mov	r2, r8
 80013c8:	2600      	movs	r6, #0
 80013ca:	2a0a      	cmp	r2, #10
 80013cc:	dc00      	bgt.n	80013d0 <__aeabi_dmul+0x1d0>
 80013ce:	e75a      	b.n	8001286 <__aeabi_dmul+0x86>
 80013d0:	e79c      	b.n	800130c <__aeabi_dmul+0x10c>
 80013d2:	4653      	mov	r3, sl
 80013d4:	4303      	orrs	r3, r0
 80013d6:	4699      	mov	r9, r3
 80013d8:	d054      	beq.n	8001484 <__aeabi_dmul+0x284>
 80013da:	4653      	mov	r3, sl
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d100      	bne.n	80013e2 <__aeabi_dmul+0x1e2>
 80013e0:	e177      	b.n	80016d2 <__aeabi_dmul+0x4d2>
 80013e2:	4650      	mov	r0, sl
 80013e4:	f000 fe3c 	bl	8002060 <__clzsi2>
 80013e8:	230b      	movs	r3, #11
 80013ea:	425b      	negs	r3, r3
 80013ec:	469c      	mov	ip, r3
 80013ee:	0002      	movs	r2, r0
 80013f0:	4484      	add	ip, r0
 80013f2:	0011      	movs	r1, r2
 80013f4:	4650      	mov	r0, sl
 80013f6:	3908      	subs	r1, #8
 80013f8:	4088      	lsls	r0, r1
 80013fa:	231d      	movs	r3, #29
 80013fc:	4680      	mov	r8, r0
 80013fe:	4660      	mov	r0, ip
 8001400:	1a1b      	subs	r3, r3, r0
 8001402:	0020      	movs	r0, r4
 8001404:	40d8      	lsrs	r0, r3
 8001406:	0003      	movs	r3, r0
 8001408:	4640      	mov	r0, r8
 800140a:	4303      	orrs	r3, r0
 800140c:	469a      	mov	sl, r3
 800140e:	0023      	movs	r3, r4
 8001410:	408b      	lsls	r3, r1
 8001412:	4699      	mov	r9, r3
 8001414:	2300      	movs	r3, #0
 8001416:	4d44      	ldr	r5, [pc, #272]	@ (8001528 <__aeabi_dmul+0x328>)
 8001418:	4698      	mov	r8, r3
 800141a:	1aad      	subs	r5, r5, r2
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	e715      	b.n	800124c <__aeabi_dmul+0x4c>
 8001420:	4652      	mov	r2, sl
 8001422:	4302      	orrs	r2, r0
 8001424:	4691      	mov	r9, r2
 8001426:	d126      	bne.n	8001476 <__aeabi_dmul+0x276>
 8001428:	2200      	movs	r2, #0
 800142a:	001d      	movs	r5, r3
 800142c:	2302      	movs	r3, #2
 800142e:	4692      	mov	sl, r2
 8001430:	3208      	adds	r2, #8
 8001432:	4690      	mov	r8, r2
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	e709      	b.n	800124c <__aeabi_dmul+0x4c>
 8001438:	2400      	movs	r4, #0
 800143a:	2200      	movs	r2, #0
 800143c:	4b35      	ldr	r3, [pc, #212]	@ (8001514 <__aeabi_dmul+0x314>)
 800143e:	e735      	b.n	80012ac <__aeabi_dmul+0xac>
 8001440:	2300      	movs	r3, #0
 8001442:	2480      	movs	r4, #128	@ 0x80
 8001444:	469b      	mov	fp, r3
 8001446:	0324      	lsls	r4, r4, #12
 8001448:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <__aeabi_dmul+0x314>)
 800144a:	e72f      	b.n	80012ac <__aeabi_dmul+0xac>
 800144c:	2202      	movs	r2, #2
 800144e:	4641      	mov	r1, r8
 8001450:	4311      	orrs	r1, r2
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	4694      	mov	ip, r2
 8001458:	002a      	movs	r2, r5
 800145a:	4462      	add	r2, ip
 800145c:	4688      	mov	r8, r1
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	290a      	cmp	r1, #10
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x266>
 8001464:	e752      	b.n	800130c <__aeabi_dmul+0x10c>
 8001466:	465a      	mov	r2, fp
 8001468:	2000      	movs	r0, #0
 800146a:	9900      	ldr	r1, [sp, #0]
 800146c:	0004      	movs	r4, r0
 800146e:	404a      	eors	r2, r1
 8001470:	4693      	mov	fp, r2
 8001472:	2602      	movs	r6, #2
 8001474:	e70b      	b.n	800128e <__aeabi_dmul+0x8e>
 8001476:	220c      	movs	r2, #12
 8001478:	001d      	movs	r5, r3
 800147a:	2303      	movs	r3, #3
 800147c:	4681      	mov	r9, r0
 800147e:	4690      	mov	r8, r2
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	e6e3      	b.n	800124c <__aeabi_dmul+0x4c>
 8001484:	2300      	movs	r3, #0
 8001486:	469a      	mov	sl, r3
 8001488:	3304      	adds	r3, #4
 800148a:	4698      	mov	r8, r3
 800148c:	3b03      	subs	r3, #3
 800148e:	2500      	movs	r5, #0
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	e6db      	b.n	800124c <__aeabi_dmul+0x4c>
 8001494:	4642      	mov	r2, r8
 8001496:	3301      	adds	r3, #1
 8001498:	431a      	orrs	r2, r3
 800149a:	002b      	movs	r3, r5
 800149c:	4690      	mov	r8, r2
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	9201      	str	r2, [sp, #4]
 80014a2:	4642      	mov	r2, r8
 80014a4:	2400      	movs	r4, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	2601      	movs	r6, #1
 80014aa:	2a0a      	cmp	r2, #10
 80014ac:	dc00      	bgt.n	80014b0 <__aeabi_dmul+0x2b0>
 80014ae:	e6ea      	b.n	8001286 <__aeabi_dmul+0x86>
 80014b0:	e72c      	b.n	800130c <__aeabi_dmul+0x10c>
 80014b2:	2201      	movs	r2, #1
 80014b4:	1ad2      	subs	r2, r2, r3
 80014b6:	2a38      	cmp	r2, #56	@ 0x38
 80014b8:	dd00      	ble.n	80014bc <__aeabi_dmul+0x2bc>
 80014ba:	e6f4      	b.n	80012a6 <__aeabi_dmul+0xa6>
 80014bc:	2a1f      	cmp	r2, #31
 80014be:	dc00      	bgt.n	80014c2 <__aeabi_dmul+0x2c2>
 80014c0:	e12a      	b.n	8001718 <__aeabi_dmul+0x518>
 80014c2:	211f      	movs	r1, #31
 80014c4:	4249      	negs	r1, r1
 80014c6:	1acb      	subs	r3, r1, r3
 80014c8:	0021      	movs	r1, r4
 80014ca:	40d9      	lsrs	r1, r3
 80014cc:	000b      	movs	r3, r1
 80014ce:	2a20      	cmp	r2, #32
 80014d0:	d005      	beq.n	80014de <__aeabi_dmul+0x2de>
 80014d2:	4a16      	ldr	r2, [pc, #88]	@ (800152c <__aeabi_dmul+0x32c>)
 80014d4:	9d01      	ldr	r5, [sp, #4]
 80014d6:	4694      	mov	ip, r2
 80014d8:	4465      	add	r5, ip
 80014da:	40ac      	lsls	r4, r5
 80014dc:	4320      	orrs	r0, r4
 80014de:	1e42      	subs	r2, r0, #1
 80014e0:	4190      	sbcs	r0, r2
 80014e2:	4318      	orrs	r0, r3
 80014e4:	2307      	movs	r3, #7
 80014e6:	0019      	movs	r1, r3
 80014e8:	2400      	movs	r4, #0
 80014ea:	4001      	ands	r1, r0
 80014ec:	4203      	tst	r3, r0
 80014ee:	d00c      	beq.n	800150a <__aeabi_dmul+0x30a>
 80014f0:	230f      	movs	r3, #15
 80014f2:	4003      	ands	r3, r0
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d100      	bne.n	80014fa <__aeabi_dmul+0x2fa>
 80014f8:	e140      	b.n	800177c <__aeabi_dmul+0x57c>
 80014fa:	1d03      	adds	r3, r0, #4
 80014fc:	4283      	cmp	r3, r0
 80014fe:	41a4      	sbcs	r4, r4
 8001500:	0018      	movs	r0, r3
 8001502:	4264      	negs	r4, r4
 8001504:	0761      	lsls	r1, r4, #29
 8001506:	0264      	lsls	r4, r4, #9
 8001508:	0b24      	lsrs	r4, r4, #12
 800150a:	08c2      	lsrs	r2, r0, #3
 800150c:	2300      	movs	r3, #0
 800150e:	430a      	orrs	r2, r1
 8001510:	e6cc      	b.n	80012ac <__aeabi_dmul+0xac>
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	000007ff 	.word	0x000007ff
 8001518:	fffffc01 	.word	0xfffffc01
 800151c:	000003ff 	.word	0x000003ff
 8001520:	feffffff 	.word	0xfeffffff
 8001524:	000007fe 	.word	0x000007fe
 8001528:	fffffc0d 	.word	0xfffffc0d
 800152c:	0000043e 	.word	0x0000043e
 8001530:	4649      	mov	r1, r9
 8001532:	464a      	mov	r2, r9
 8001534:	0409      	lsls	r1, r1, #16
 8001536:	0c09      	lsrs	r1, r1, #16
 8001538:	000d      	movs	r5, r1
 800153a:	0c16      	lsrs	r6, r2, #16
 800153c:	0c02      	lsrs	r2, r0, #16
 800153e:	0400      	lsls	r0, r0, #16
 8001540:	0c00      	lsrs	r0, r0, #16
 8001542:	4345      	muls	r5, r0
 8001544:	46ac      	mov	ip, r5
 8001546:	0005      	movs	r5, r0
 8001548:	4375      	muls	r5, r6
 800154a:	46a8      	mov	r8, r5
 800154c:	0015      	movs	r5, r2
 800154e:	000f      	movs	r7, r1
 8001550:	4375      	muls	r5, r6
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	9502      	str	r5, [sp, #8]
 8001556:	002a      	movs	r2, r5
 8001558:	9d00      	ldr	r5, [sp, #0]
 800155a:	436f      	muls	r7, r5
 800155c:	4665      	mov	r5, ip
 800155e:	0c2d      	lsrs	r5, r5, #16
 8001560:	46a9      	mov	r9, r5
 8001562:	4447      	add	r7, r8
 8001564:	444f      	add	r7, r9
 8001566:	45b8      	cmp	r8, r7
 8001568:	d905      	bls.n	8001576 <__aeabi_dmul+0x376>
 800156a:	0015      	movs	r5, r2
 800156c:	2280      	movs	r2, #128	@ 0x80
 800156e:	0252      	lsls	r2, r2, #9
 8001570:	4690      	mov	r8, r2
 8001572:	4445      	add	r5, r8
 8001574:	9502      	str	r5, [sp, #8]
 8001576:	0c3d      	lsrs	r5, r7, #16
 8001578:	9503      	str	r5, [sp, #12]
 800157a:	4665      	mov	r5, ip
 800157c:	042d      	lsls	r5, r5, #16
 800157e:	043f      	lsls	r7, r7, #16
 8001580:	0c2d      	lsrs	r5, r5, #16
 8001582:	46ac      	mov	ip, r5
 8001584:	003d      	movs	r5, r7
 8001586:	4465      	add	r5, ip
 8001588:	9504      	str	r5, [sp, #16]
 800158a:	0c25      	lsrs	r5, r4, #16
 800158c:	0424      	lsls	r4, r4, #16
 800158e:	0c24      	lsrs	r4, r4, #16
 8001590:	46ac      	mov	ip, r5
 8001592:	0025      	movs	r5, r4
 8001594:	4375      	muls	r5, r6
 8001596:	46a8      	mov	r8, r5
 8001598:	4665      	mov	r5, ip
 800159a:	000f      	movs	r7, r1
 800159c:	4369      	muls	r1, r5
 800159e:	4441      	add	r1, r8
 80015a0:	4689      	mov	r9, r1
 80015a2:	4367      	muls	r7, r4
 80015a4:	0c39      	lsrs	r1, r7, #16
 80015a6:	4449      	add	r1, r9
 80015a8:	436e      	muls	r6, r5
 80015aa:	4588      	cmp	r8, r1
 80015ac:	d903      	bls.n	80015b6 <__aeabi_dmul+0x3b6>
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	0252      	lsls	r2, r2, #9
 80015b2:	4690      	mov	r8, r2
 80015b4:	4446      	add	r6, r8
 80015b6:	0c0d      	lsrs	r5, r1, #16
 80015b8:	46a8      	mov	r8, r5
 80015ba:	0035      	movs	r5, r6
 80015bc:	4445      	add	r5, r8
 80015be:	9505      	str	r5, [sp, #20]
 80015c0:	9d03      	ldr	r5, [sp, #12]
 80015c2:	043f      	lsls	r7, r7, #16
 80015c4:	46a8      	mov	r8, r5
 80015c6:	0c3f      	lsrs	r7, r7, #16
 80015c8:	0409      	lsls	r1, r1, #16
 80015ca:	19c9      	adds	r1, r1, r7
 80015cc:	4488      	add	r8, r1
 80015ce:	4645      	mov	r5, r8
 80015d0:	9503      	str	r5, [sp, #12]
 80015d2:	4655      	mov	r5, sl
 80015d4:	042e      	lsls	r6, r5, #16
 80015d6:	0c36      	lsrs	r6, r6, #16
 80015d8:	0c2f      	lsrs	r7, r5, #16
 80015da:	0035      	movs	r5, r6
 80015dc:	4345      	muls	r5, r0
 80015de:	4378      	muls	r0, r7
 80015e0:	4681      	mov	r9, r0
 80015e2:	0038      	movs	r0, r7
 80015e4:	46a8      	mov	r8, r5
 80015e6:	0c2d      	lsrs	r5, r5, #16
 80015e8:	46aa      	mov	sl, r5
 80015ea:	9a00      	ldr	r2, [sp, #0]
 80015ec:	4350      	muls	r0, r2
 80015ee:	4372      	muls	r2, r6
 80015f0:	444a      	add	r2, r9
 80015f2:	4452      	add	r2, sl
 80015f4:	4591      	cmp	r9, r2
 80015f6:	d903      	bls.n	8001600 <__aeabi_dmul+0x400>
 80015f8:	2580      	movs	r5, #128	@ 0x80
 80015fa:	026d      	lsls	r5, r5, #9
 80015fc:	46a9      	mov	r9, r5
 80015fe:	4448      	add	r0, r9
 8001600:	0c15      	lsrs	r5, r2, #16
 8001602:	46a9      	mov	r9, r5
 8001604:	4645      	mov	r5, r8
 8001606:	042d      	lsls	r5, r5, #16
 8001608:	0c2d      	lsrs	r5, r5, #16
 800160a:	46a8      	mov	r8, r5
 800160c:	4665      	mov	r5, ip
 800160e:	437d      	muls	r5, r7
 8001610:	0412      	lsls	r2, r2, #16
 8001612:	4448      	add	r0, r9
 8001614:	4490      	add	r8, r2
 8001616:	46a9      	mov	r9, r5
 8001618:	0032      	movs	r2, r6
 800161a:	4665      	mov	r5, ip
 800161c:	4362      	muls	r2, r4
 800161e:	436e      	muls	r6, r5
 8001620:	437c      	muls	r4, r7
 8001622:	0c17      	lsrs	r7, r2, #16
 8001624:	1936      	adds	r6, r6, r4
 8001626:	19bf      	adds	r7, r7, r6
 8001628:	42bc      	cmp	r4, r7
 800162a:	d903      	bls.n	8001634 <__aeabi_dmul+0x434>
 800162c:	2480      	movs	r4, #128	@ 0x80
 800162e:	0264      	lsls	r4, r4, #9
 8001630:	46a4      	mov	ip, r4
 8001632:	44e1      	add	r9, ip
 8001634:	9c02      	ldr	r4, [sp, #8]
 8001636:	9e03      	ldr	r6, [sp, #12]
 8001638:	46a4      	mov	ip, r4
 800163a:	9d05      	ldr	r5, [sp, #20]
 800163c:	4466      	add	r6, ip
 800163e:	428e      	cmp	r6, r1
 8001640:	4189      	sbcs	r1, r1
 8001642:	46ac      	mov	ip, r5
 8001644:	0412      	lsls	r2, r2, #16
 8001646:	043c      	lsls	r4, r7, #16
 8001648:	0c12      	lsrs	r2, r2, #16
 800164a:	18a2      	adds	r2, r4, r2
 800164c:	4462      	add	r2, ip
 800164e:	4249      	negs	r1, r1
 8001650:	1854      	adds	r4, r2, r1
 8001652:	4446      	add	r6, r8
 8001654:	46a4      	mov	ip, r4
 8001656:	4546      	cmp	r6, r8
 8001658:	41a4      	sbcs	r4, r4
 800165a:	4682      	mov	sl, r0
 800165c:	4264      	negs	r4, r4
 800165e:	46a0      	mov	r8, r4
 8001660:	42aa      	cmp	r2, r5
 8001662:	4192      	sbcs	r2, r2
 8001664:	458c      	cmp	ip, r1
 8001666:	4189      	sbcs	r1, r1
 8001668:	44e2      	add	sl, ip
 800166a:	44d0      	add	r8, sl
 800166c:	4249      	negs	r1, r1
 800166e:	4252      	negs	r2, r2
 8001670:	430a      	orrs	r2, r1
 8001672:	45a0      	cmp	r8, r4
 8001674:	41a4      	sbcs	r4, r4
 8001676:	4582      	cmp	sl, r0
 8001678:	4189      	sbcs	r1, r1
 800167a:	4264      	negs	r4, r4
 800167c:	4249      	negs	r1, r1
 800167e:	430c      	orrs	r4, r1
 8001680:	4641      	mov	r1, r8
 8001682:	0c3f      	lsrs	r7, r7, #16
 8001684:	19d2      	adds	r2, r2, r7
 8001686:	1912      	adds	r2, r2, r4
 8001688:	0dcc      	lsrs	r4, r1, #23
 800168a:	9904      	ldr	r1, [sp, #16]
 800168c:	0270      	lsls	r0, r6, #9
 800168e:	4308      	orrs	r0, r1
 8001690:	1e41      	subs	r1, r0, #1
 8001692:	4188      	sbcs	r0, r1
 8001694:	4641      	mov	r1, r8
 8001696:	444a      	add	r2, r9
 8001698:	0df6      	lsrs	r6, r6, #23
 800169a:	0252      	lsls	r2, r2, #9
 800169c:	4330      	orrs	r0, r6
 800169e:	0249      	lsls	r1, r1, #9
 80016a0:	4314      	orrs	r4, r2
 80016a2:	4308      	orrs	r0, r1
 80016a4:	01d2      	lsls	r2, r2, #7
 80016a6:	d535      	bpl.n	8001714 <__aeabi_dmul+0x514>
 80016a8:	2201      	movs	r2, #1
 80016aa:	0843      	lsrs	r3, r0, #1
 80016ac:	4002      	ands	r2, r0
 80016ae:	4313      	orrs	r3, r2
 80016b0:	07e0      	lsls	r0, r4, #31
 80016b2:	4318      	orrs	r0, r3
 80016b4:	0864      	lsrs	r4, r4, #1
 80016b6:	e634      	b.n	8001322 <__aeabi_dmul+0x122>
 80016b8:	9b00      	ldr	r3, [sp, #0]
 80016ba:	46a2      	mov	sl, r4
 80016bc:	469b      	mov	fp, r3
 80016be:	4681      	mov	r9, r0
 80016c0:	2480      	movs	r4, #128	@ 0x80
 80016c2:	4653      	mov	r3, sl
 80016c4:	0324      	lsls	r4, r4, #12
 80016c6:	431c      	orrs	r4, r3
 80016c8:	0324      	lsls	r4, r4, #12
 80016ca:	464a      	mov	r2, r9
 80016cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <__aeabi_dmul+0x588>)
 80016ce:	0b24      	lsrs	r4, r4, #12
 80016d0:	e5ec      	b.n	80012ac <__aeabi_dmul+0xac>
 80016d2:	f000 fcc5 	bl	8002060 <__clzsi2>
 80016d6:	2315      	movs	r3, #21
 80016d8:	469c      	mov	ip, r3
 80016da:	4484      	add	ip, r0
 80016dc:	0002      	movs	r2, r0
 80016de:	4663      	mov	r3, ip
 80016e0:	3220      	adds	r2, #32
 80016e2:	2b1c      	cmp	r3, #28
 80016e4:	dc00      	bgt.n	80016e8 <__aeabi_dmul+0x4e8>
 80016e6:	e684      	b.n	80013f2 <__aeabi_dmul+0x1f2>
 80016e8:	2300      	movs	r3, #0
 80016ea:	4699      	mov	r9, r3
 80016ec:	0023      	movs	r3, r4
 80016ee:	3808      	subs	r0, #8
 80016f0:	4083      	lsls	r3, r0
 80016f2:	469a      	mov	sl, r3
 80016f4:	e68e      	b.n	8001414 <__aeabi_dmul+0x214>
 80016f6:	f000 fcb3 	bl	8002060 <__clzsi2>
 80016fa:	0002      	movs	r2, r0
 80016fc:	0003      	movs	r3, r0
 80016fe:	3215      	adds	r2, #21
 8001700:	3320      	adds	r3, #32
 8001702:	2a1c      	cmp	r2, #28
 8001704:	dc00      	bgt.n	8001708 <__aeabi_dmul+0x508>
 8001706:	e64e      	b.n	80013a6 <__aeabi_dmul+0x1a6>
 8001708:	0002      	movs	r2, r0
 800170a:	0034      	movs	r4, r6
 800170c:	3a08      	subs	r2, #8
 800170e:	2000      	movs	r0, #0
 8001710:	4094      	lsls	r4, r2
 8001712:	e652      	b.n	80013ba <__aeabi_dmul+0x1ba>
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	e604      	b.n	8001322 <__aeabi_dmul+0x122>
 8001718:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <__aeabi_dmul+0x58c>)
 800171a:	0021      	movs	r1, r4
 800171c:	469c      	mov	ip, r3
 800171e:	0003      	movs	r3, r0
 8001720:	9d01      	ldr	r5, [sp, #4]
 8001722:	40d3      	lsrs	r3, r2
 8001724:	4465      	add	r5, ip
 8001726:	40a9      	lsls	r1, r5
 8001728:	4319      	orrs	r1, r3
 800172a:	0003      	movs	r3, r0
 800172c:	40ab      	lsls	r3, r5
 800172e:	1e58      	subs	r0, r3, #1
 8001730:	4183      	sbcs	r3, r0
 8001732:	4319      	orrs	r1, r3
 8001734:	0008      	movs	r0, r1
 8001736:	40d4      	lsrs	r4, r2
 8001738:	074b      	lsls	r3, r1, #29
 800173a:	d009      	beq.n	8001750 <__aeabi_dmul+0x550>
 800173c:	230f      	movs	r3, #15
 800173e:	400b      	ands	r3, r1
 8001740:	2b04      	cmp	r3, #4
 8001742:	d005      	beq.n	8001750 <__aeabi_dmul+0x550>
 8001744:	1d0b      	adds	r3, r1, #4
 8001746:	428b      	cmp	r3, r1
 8001748:	4180      	sbcs	r0, r0
 800174a:	4240      	negs	r0, r0
 800174c:	1824      	adds	r4, r4, r0
 800174e:	0018      	movs	r0, r3
 8001750:	0223      	lsls	r3, r4, #8
 8001752:	d400      	bmi.n	8001756 <__aeabi_dmul+0x556>
 8001754:	e6d6      	b.n	8001504 <__aeabi_dmul+0x304>
 8001756:	2301      	movs	r3, #1
 8001758:	2400      	movs	r4, #0
 800175a:	2200      	movs	r2, #0
 800175c:	e5a6      	b.n	80012ac <__aeabi_dmul+0xac>
 800175e:	290f      	cmp	r1, #15
 8001760:	d1aa      	bne.n	80016b8 <__aeabi_dmul+0x4b8>
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	4652      	mov	r2, sl
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	421a      	tst	r2, r3
 800176a:	d0a9      	beq.n	80016c0 <__aeabi_dmul+0x4c0>
 800176c:	421c      	tst	r4, r3
 800176e:	d1a7      	bne.n	80016c0 <__aeabi_dmul+0x4c0>
 8001770:	431c      	orrs	r4, r3
 8001772:	9b00      	ldr	r3, [sp, #0]
 8001774:	0002      	movs	r2, r0
 8001776:	469b      	mov	fp, r3
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <__aeabi_dmul+0x588>)
 800177a:	e597      	b.n	80012ac <__aeabi_dmul+0xac>
 800177c:	2400      	movs	r4, #0
 800177e:	e6c1      	b.n	8001504 <__aeabi_dmul+0x304>
 8001780:	2400      	movs	r4, #0
 8001782:	4b01      	ldr	r3, [pc, #4]	@ (8001788 <__aeabi_dmul+0x588>)
 8001784:	0022      	movs	r2, r4
 8001786:	e591      	b.n	80012ac <__aeabi_dmul+0xac>
 8001788:	000007ff 	.word	0x000007ff
 800178c:	0000041e 	.word	0x0000041e

08001790 <__aeabi_dsub>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	464e      	mov	r6, r9
 8001794:	4645      	mov	r5, r8
 8001796:	46de      	mov	lr, fp
 8001798:	4657      	mov	r7, sl
 800179a:	b5e0      	push	{r5, r6, r7, lr}
 800179c:	b085      	sub	sp, #20
 800179e:	9000      	str	r0, [sp, #0]
 80017a0:	9101      	str	r1, [sp, #4]
 80017a2:	030c      	lsls	r4, r1, #12
 80017a4:	004f      	lsls	r7, r1, #1
 80017a6:	0fce      	lsrs	r6, r1, #31
 80017a8:	0a61      	lsrs	r1, r4, #9
 80017aa:	9c00      	ldr	r4, [sp, #0]
 80017ac:	46b0      	mov	r8, r6
 80017ae:	0f64      	lsrs	r4, r4, #29
 80017b0:	430c      	orrs	r4, r1
 80017b2:	9900      	ldr	r1, [sp, #0]
 80017b4:	0d7f      	lsrs	r7, r7, #21
 80017b6:	00c8      	lsls	r0, r1, #3
 80017b8:	0011      	movs	r1, r2
 80017ba:	001a      	movs	r2, r3
 80017bc:	031b      	lsls	r3, r3, #12
 80017be:	469c      	mov	ip, r3
 80017c0:	9100      	str	r1, [sp, #0]
 80017c2:	9201      	str	r2, [sp, #4]
 80017c4:	0051      	lsls	r1, r2, #1
 80017c6:	0d4b      	lsrs	r3, r1, #21
 80017c8:	4699      	mov	r9, r3
 80017ca:	9b01      	ldr	r3, [sp, #4]
 80017cc:	9d00      	ldr	r5, [sp, #0]
 80017ce:	0fd9      	lsrs	r1, r3, #31
 80017d0:	4663      	mov	r3, ip
 80017d2:	0f6a      	lsrs	r2, r5, #29
 80017d4:	0a5b      	lsrs	r3, r3, #9
 80017d6:	4313      	orrs	r3, r2
 80017d8:	00ea      	lsls	r2, r5, #3
 80017da:	4694      	mov	ip, r2
 80017dc:	4693      	mov	fp, r2
 80017de:	4ac1      	ldr	r2, [pc, #772]	@ (8001ae4 <__aeabi_dsub+0x354>)
 80017e0:	9003      	str	r0, [sp, #12]
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	4591      	cmp	r9, r2
 80017e6:	d100      	bne.n	80017ea <__aeabi_dsub+0x5a>
 80017e8:	e0cd      	b.n	8001986 <__aeabi_dsub+0x1f6>
 80017ea:	2501      	movs	r5, #1
 80017ec:	4069      	eors	r1, r5
 80017ee:	464d      	mov	r5, r9
 80017f0:	1b7d      	subs	r5, r7, r5
 80017f2:	46aa      	mov	sl, r5
 80017f4:	428e      	cmp	r6, r1
 80017f6:	d100      	bne.n	80017fa <__aeabi_dsub+0x6a>
 80017f8:	e080      	b.n	80018fc <__aeabi_dsub+0x16c>
 80017fa:	2d00      	cmp	r5, #0
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dsub+0x70>
 80017fe:	e335      	b.n	8001e6c <__aeabi_dsub+0x6dc>
 8001800:	4649      	mov	r1, r9
 8001802:	2900      	cmp	r1, #0
 8001804:	d100      	bne.n	8001808 <__aeabi_dsub+0x78>
 8001806:	e0df      	b.n	80019c8 <__aeabi_dsub+0x238>
 8001808:	4297      	cmp	r7, r2
 800180a:	d100      	bne.n	800180e <__aeabi_dsub+0x7e>
 800180c:	e194      	b.n	8001b38 <__aeabi_dsub+0x3a8>
 800180e:	4652      	mov	r2, sl
 8001810:	2501      	movs	r5, #1
 8001812:	2a38      	cmp	r2, #56	@ 0x38
 8001814:	dc19      	bgt.n	800184a <__aeabi_dsub+0xba>
 8001816:	2280      	movs	r2, #128	@ 0x80
 8001818:	9b02      	ldr	r3, [sp, #8]
 800181a:	0412      	lsls	r2, r2, #16
 800181c:	4313      	orrs	r3, r2
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	4652      	mov	r2, sl
 8001822:	2a1f      	cmp	r2, #31
 8001824:	dd00      	ble.n	8001828 <__aeabi_dsub+0x98>
 8001826:	e1e3      	b.n	8001bf0 <__aeabi_dsub+0x460>
 8001828:	4653      	mov	r3, sl
 800182a:	2220      	movs	r2, #32
 800182c:	4661      	mov	r1, ip
 800182e:	9d02      	ldr	r5, [sp, #8]
 8001830:	1ad2      	subs	r2, r2, r3
 8001832:	4095      	lsls	r5, r2
 8001834:	40d9      	lsrs	r1, r3
 8001836:	430d      	orrs	r5, r1
 8001838:	4661      	mov	r1, ip
 800183a:	4091      	lsls	r1, r2
 800183c:	000a      	movs	r2, r1
 800183e:	1e51      	subs	r1, r2, #1
 8001840:	418a      	sbcs	r2, r1
 8001842:	4315      	orrs	r5, r2
 8001844:	9a02      	ldr	r2, [sp, #8]
 8001846:	40da      	lsrs	r2, r3
 8001848:	1aa4      	subs	r4, r4, r2
 800184a:	1b45      	subs	r5, r0, r5
 800184c:	42a8      	cmp	r0, r5
 800184e:	4180      	sbcs	r0, r0
 8001850:	4240      	negs	r0, r0
 8001852:	1a24      	subs	r4, r4, r0
 8001854:	0223      	lsls	r3, r4, #8
 8001856:	d400      	bmi.n	800185a <__aeabi_dsub+0xca>
 8001858:	e13d      	b.n	8001ad6 <__aeabi_dsub+0x346>
 800185a:	0264      	lsls	r4, r4, #9
 800185c:	0a64      	lsrs	r4, r4, #9
 800185e:	2c00      	cmp	r4, #0
 8001860:	d100      	bne.n	8001864 <__aeabi_dsub+0xd4>
 8001862:	e147      	b.n	8001af4 <__aeabi_dsub+0x364>
 8001864:	0020      	movs	r0, r4
 8001866:	f000 fbfb 	bl	8002060 <__clzsi2>
 800186a:	0003      	movs	r3, r0
 800186c:	3b08      	subs	r3, #8
 800186e:	2120      	movs	r1, #32
 8001870:	0028      	movs	r0, r5
 8001872:	1aca      	subs	r2, r1, r3
 8001874:	40d0      	lsrs	r0, r2
 8001876:	409c      	lsls	r4, r3
 8001878:	0002      	movs	r2, r0
 800187a:	409d      	lsls	r5, r3
 800187c:	4322      	orrs	r2, r4
 800187e:	429f      	cmp	r7, r3
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xf4>
 8001882:	e177      	b.n	8001b74 <__aeabi_dsub+0x3e4>
 8001884:	1bd8      	subs	r0, r3, r7
 8001886:	3001      	adds	r0, #1
 8001888:	1a09      	subs	r1, r1, r0
 800188a:	002c      	movs	r4, r5
 800188c:	408d      	lsls	r5, r1
 800188e:	40c4      	lsrs	r4, r0
 8001890:	1e6b      	subs	r3, r5, #1
 8001892:	419d      	sbcs	r5, r3
 8001894:	0013      	movs	r3, r2
 8001896:	40c2      	lsrs	r2, r0
 8001898:	408b      	lsls	r3, r1
 800189a:	4325      	orrs	r5, r4
 800189c:	2700      	movs	r7, #0
 800189e:	0014      	movs	r4, r2
 80018a0:	431d      	orrs	r5, r3
 80018a2:	076b      	lsls	r3, r5, #29
 80018a4:	d009      	beq.n	80018ba <__aeabi_dsub+0x12a>
 80018a6:	230f      	movs	r3, #15
 80018a8:	402b      	ands	r3, r5
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d005      	beq.n	80018ba <__aeabi_dsub+0x12a>
 80018ae:	1d2b      	adds	r3, r5, #4
 80018b0:	42ab      	cmp	r3, r5
 80018b2:	41ad      	sbcs	r5, r5
 80018b4:	426d      	negs	r5, r5
 80018b6:	1964      	adds	r4, r4, r5
 80018b8:	001d      	movs	r5, r3
 80018ba:	0223      	lsls	r3, r4, #8
 80018bc:	d400      	bmi.n	80018c0 <__aeabi_dsub+0x130>
 80018be:	e140      	b.n	8001b42 <__aeabi_dsub+0x3b2>
 80018c0:	4a88      	ldr	r2, [pc, #544]	@ (8001ae4 <__aeabi_dsub+0x354>)
 80018c2:	3701      	adds	r7, #1
 80018c4:	4297      	cmp	r7, r2
 80018c6:	d100      	bne.n	80018ca <__aeabi_dsub+0x13a>
 80018c8:	e101      	b.n	8001ace <__aeabi_dsub+0x33e>
 80018ca:	2601      	movs	r6, #1
 80018cc:	4643      	mov	r3, r8
 80018ce:	4986      	ldr	r1, [pc, #536]	@ (8001ae8 <__aeabi_dsub+0x358>)
 80018d0:	08ed      	lsrs	r5, r5, #3
 80018d2:	4021      	ands	r1, r4
 80018d4:	074a      	lsls	r2, r1, #29
 80018d6:	432a      	orrs	r2, r5
 80018d8:	057c      	lsls	r4, r7, #21
 80018da:	024d      	lsls	r5, r1, #9
 80018dc:	0b2d      	lsrs	r5, r5, #12
 80018de:	0d64      	lsrs	r4, r4, #21
 80018e0:	401e      	ands	r6, r3
 80018e2:	0524      	lsls	r4, r4, #20
 80018e4:	432c      	orrs	r4, r5
 80018e6:	07f6      	lsls	r6, r6, #31
 80018e8:	4334      	orrs	r4, r6
 80018ea:	0010      	movs	r0, r2
 80018ec:	0021      	movs	r1, r4
 80018ee:	b005      	add	sp, #20
 80018f0:	bcf0      	pop	{r4, r5, r6, r7}
 80018f2:	46bb      	mov	fp, r7
 80018f4:	46b2      	mov	sl, r6
 80018f6:	46a9      	mov	r9, r5
 80018f8:	46a0      	mov	r8, r4
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	dc00      	bgt.n	8001902 <__aeabi_dsub+0x172>
 8001900:	e2d0      	b.n	8001ea4 <__aeabi_dsub+0x714>
 8001902:	4649      	mov	r1, r9
 8001904:	2900      	cmp	r1, #0
 8001906:	d000      	beq.n	800190a <__aeabi_dsub+0x17a>
 8001908:	e0d4      	b.n	8001ab4 <__aeabi_dsub+0x324>
 800190a:	4661      	mov	r1, ip
 800190c:	9b02      	ldr	r3, [sp, #8]
 800190e:	4319      	orrs	r1, r3
 8001910:	d100      	bne.n	8001914 <__aeabi_dsub+0x184>
 8001912:	e12b      	b.n	8001b6c <__aeabi_dsub+0x3dc>
 8001914:	1e69      	subs	r1, r5, #1
 8001916:	2d01      	cmp	r5, #1
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x18c>
 800191a:	e1d9      	b.n	8001cd0 <__aeabi_dsub+0x540>
 800191c:	4295      	cmp	r5, r2
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0x192>
 8001920:	e10a      	b.n	8001b38 <__aeabi_dsub+0x3a8>
 8001922:	2501      	movs	r5, #1
 8001924:	2938      	cmp	r1, #56	@ 0x38
 8001926:	dc17      	bgt.n	8001958 <__aeabi_dsub+0x1c8>
 8001928:	468a      	mov	sl, r1
 800192a:	4653      	mov	r3, sl
 800192c:	2b1f      	cmp	r3, #31
 800192e:	dd00      	ble.n	8001932 <__aeabi_dsub+0x1a2>
 8001930:	e1e7      	b.n	8001d02 <__aeabi_dsub+0x572>
 8001932:	2220      	movs	r2, #32
 8001934:	1ad2      	subs	r2, r2, r3
 8001936:	9b02      	ldr	r3, [sp, #8]
 8001938:	4661      	mov	r1, ip
 800193a:	4093      	lsls	r3, r2
 800193c:	001d      	movs	r5, r3
 800193e:	4653      	mov	r3, sl
 8001940:	40d9      	lsrs	r1, r3
 8001942:	4663      	mov	r3, ip
 8001944:	4093      	lsls	r3, r2
 8001946:	001a      	movs	r2, r3
 8001948:	430d      	orrs	r5, r1
 800194a:	1e51      	subs	r1, r2, #1
 800194c:	418a      	sbcs	r2, r1
 800194e:	4653      	mov	r3, sl
 8001950:	4315      	orrs	r5, r2
 8001952:	9a02      	ldr	r2, [sp, #8]
 8001954:	40da      	lsrs	r2, r3
 8001956:	18a4      	adds	r4, r4, r2
 8001958:	182d      	adds	r5, r5, r0
 800195a:	4285      	cmp	r5, r0
 800195c:	4180      	sbcs	r0, r0
 800195e:	4240      	negs	r0, r0
 8001960:	1824      	adds	r4, r4, r0
 8001962:	0223      	lsls	r3, r4, #8
 8001964:	d400      	bmi.n	8001968 <__aeabi_dsub+0x1d8>
 8001966:	e0b6      	b.n	8001ad6 <__aeabi_dsub+0x346>
 8001968:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae4 <__aeabi_dsub+0x354>)
 800196a:	3701      	adds	r7, #1
 800196c:	429f      	cmp	r7, r3
 800196e:	d100      	bne.n	8001972 <__aeabi_dsub+0x1e2>
 8001970:	e0ad      	b.n	8001ace <__aeabi_dsub+0x33e>
 8001972:	2101      	movs	r1, #1
 8001974:	4b5c      	ldr	r3, [pc, #368]	@ (8001ae8 <__aeabi_dsub+0x358>)
 8001976:	086a      	lsrs	r2, r5, #1
 8001978:	401c      	ands	r4, r3
 800197a:	4029      	ands	r1, r5
 800197c:	430a      	orrs	r2, r1
 800197e:	07e5      	lsls	r5, r4, #31
 8001980:	4315      	orrs	r5, r2
 8001982:	0864      	lsrs	r4, r4, #1
 8001984:	e78d      	b.n	80018a2 <__aeabi_dsub+0x112>
 8001986:	4a59      	ldr	r2, [pc, #356]	@ (8001aec <__aeabi_dsub+0x35c>)
 8001988:	9b02      	ldr	r3, [sp, #8]
 800198a:	4692      	mov	sl, r2
 800198c:	4662      	mov	r2, ip
 800198e:	44ba      	add	sl, r7
 8001990:	431a      	orrs	r2, r3
 8001992:	d02c      	beq.n	80019ee <__aeabi_dsub+0x25e>
 8001994:	428e      	cmp	r6, r1
 8001996:	d02e      	beq.n	80019f6 <__aeabi_dsub+0x266>
 8001998:	4652      	mov	r2, sl
 800199a:	2a00      	cmp	r2, #0
 800199c:	d060      	beq.n	8001a60 <__aeabi_dsub+0x2d0>
 800199e:	2f00      	cmp	r7, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x214>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_dsub+0x3cc>
 80019a4:	4663      	mov	r3, ip
 80019a6:	000e      	movs	r6, r1
 80019a8:	9c02      	ldr	r4, [sp, #8]
 80019aa:	08d8      	lsrs	r0, r3, #3
 80019ac:	0762      	lsls	r2, r4, #29
 80019ae:	4302      	orrs	r2, r0
 80019b0:	08e4      	lsrs	r4, r4, #3
 80019b2:	0013      	movs	r3, r2
 80019b4:	4323      	orrs	r3, r4
 80019b6:	d100      	bne.n	80019ba <__aeabi_dsub+0x22a>
 80019b8:	e254      	b.n	8001e64 <__aeabi_dsub+0x6d4>
 80019ba:	2580      	movs	r5, #128	@ 0x80
 80019bc:	032d      	lsls	r5, r5, #12
 80019be:	4325      	orrs	r5, r4
 80019c0:	032d      	lsls	r5, r5, #12
 80019c2:	4c48      	ldr	r4, [pc, #288]	@ (8001ae4 <__aeabi_dsub+0x354>)
 80019c4:	0b2d      	lsrs	r5, r5, #12
 80019c6:	e78c      	b.n	80018e2 <__aeabi_dsub+0x152>
 80019c8:	4661      	mov	r1, ip
 80019ca:	9b02      	ldr	r3, [sp, #8]
 80019cc:	4319      	orrs	r1, r3
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dsub+0x242>
 80019d0:	e0cc      	b.n	8001b6c <__aeabi_dsub+0x3dc>
 80019d2:	0029      	movs	r1, r5
 80019d4:	3901      	subs	r1, #1
 80019d6:	2d01      	cmp	r5, #1
 80019d8:	d100      	bne.n	80019dc <__aeabi_dsub+0x24c>
 80019da:	e188      	b.n	8001cee <__aeabi_dsub+0x55e>
 80019dc:	4295      	cmp	r5, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x252>
 80019e0:	e0aa      	b.n	8001b38 <__aeabi_dsub+0x3a8>
 80019e2:	2501      	movs	r5, #1
 80019e4:	2938      	cmp	r1, #56	@ 0x38
 80019e6:	dd00      	ble.n	80019ea <__aeabi_dsub+0x25a>
 80019e8:	e72f      	b.n	800184a <__aeabi_dsub+0xba>
 80019ea:	468a      	mov	sl, r1
 80019ec:	e718      	b.n	8001820 <__aeabi_dsub+0x90>
 80019ee:	2201      	movs	r2, #1
 80019f0:	4051      	eors	r1, r2
 80019f2:	428e      	cmp	r6, r1
 80019f4:	d1d0      	bne.n	8001998 <__aeabi_dsub+0x208>
 80019f6:	4653      	mov	r3, sl
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d100      	bne.n	80019fe <__aeabi_dsub+0x26e>
 80019fc:	e0be      	b.n	8001b7c <__aeabi_dsub+0x3ec>
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dsub+0x274>
 8001a02:	e138      	b.n	8001c76 <__aeabi_dsub+0x4e6>
 8001a04:	46ca      	mov	sl, r9
 8001a06:	0022      	movs	r2, r4
 8001a08:	4302      	orrs	r2, r0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x27e>
 8001a0c:	e1e2      	b.n	8001dd4 <__aeabi_dsub+0x644>
 8001a0e:	4653      	mov	r3, sl
 8001a10:	1e59      	subs	r1, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x288>
 8001a16:	e20d      	b.n	8001e34 <__aeabi_dsub+0x6a4>
 8001a18:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <__aeabi_dsub+0x354>)
 8001a1a:	4592      	cmp	sl, r2
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x290>
 8001a1e:	e1d2      	b.n	8001dc6 <__aeabi_dsub+0x636>
 8001a20:	2701      	movs	r7, #1
 8001a22:	2938      	cmp	r1, #56	@ 0x38
 8001a24:	dc13      	bgt.n	8001a4e <__aeabi_dsub+0x2be>
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0x29c>
 8001a2a:	e1ee      	b.n	8001e0a <__aeabi_dsub+0x67a>
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	9b02      	ldr	r3, [sp, #8]
 8001a30:	1a52      	subs	r2, r2, r1
 8001a32:	0025      	movs	r5, r4
 8001a34:	0007      	movs	r7, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	40cc      	lsrs	r4, r1
 8001a3a:	4090      	lsls	r0, r2
 8001a3c:	4095      	lsls	r5, r2
 8001a3e:	40cf      	lsrs	r7, r1
 8001a40:	44a2      	add	sl, r4
 8001a42:	1e42      	subs	r2, r0, #1
 8001a44:	4190      	sbcs	r0, r2
 8001a46:	4653      	mov	r3, sl
 8001a48:	432f      	orrs	r7, r5
 8001a4a:	4307      	orrs	r7, r0
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	003d      	movs	r5, r7
 8001a50:	4465      	add	r5, ip
 8001a52:	4565      	cmp	r5, ip
 8001a54:	4192      	sbcs	r2, r2
 8001a56:	9b02      	ldr	r3, [sp, #8]
 8001a58:	4252      	negs	r2, r2
 8001a5a:	464f      	mov	r7, r9
 8001a5c:	18d4      	adds	r4, r2, r3
 8001a5e:	e780      	b.n	8001962 <__aeabi_dsub+0x1d2>
 8001a60:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <__aeabi_dsub+0x360>)
 8001a62:	1c7d      	adds	r5, r7, #1
 8001a64:	4215      	tst	r5, r2
 8001a66:	d000      	beq.n	8001a6a <__aeabi_dsub+0x2da>
 8001a68:	e0aa      	b.n	8001bc0 <__aeabi_dsub+0x430>
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	0025      	movs	r5, r4
 8001a6e:	9b02      	ldr	r3, [sp, #8]
 8001a70:	4305      	orrs	r5, r0
 8001a72:	431a      	orrs	r2, r3
 8001a74:	2f00      	cmp	r7, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2ea>
 8001a78:	e0f5      	b.n	8001c66 <__aeabi_dsub+0x4d6>
 8001a7a:	2d00      	cmp	r5, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x2f0>
 8001a7e:	e16b      	b.n	8001d58 <__aeabi_dsub+0x5c8>
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2f6>
 8001a84:	e152      	b.n	8001d2c <__aeabi_dsub+0x59c>
 8001a86:	4663      	mov	r3, ip
 8001a88:	1ac5      	subs	r5, r0, r3
 8001a8a:	9b02      	ldr	r3, [sp, #8]
 8001a8c:	1ae2      	subs	r2, r4, r3
 8001a8e:	42a8      	cmp	r0, r5
 8001a90:	419b      	sbcs	r3, r3
 8001a92:	425b      	negs	r3, r3
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	021a      	lsls	r2, r3, #8
 8001a98:	d400      	bmi.n	8001a9c <__aeabi_dsub+0x30c>
 8001a9a:	e1d5      	b.n	8001e48 <__aeabi_dsub+0x6b8>
 8001a9c:	4663      	mov	r3, ip
 8001a9e:	1a1d      	subs	r5, r3, r0
 8001aa0:	45ac      	cmp	ip, r5
 8001aa2:	4192      	sbcs	r2, r2
 8001aa4:	2601      	movs	r6, #1
 8001aa6:	9b02      	ldr	r3, [sp, #8]
 8001aa8:	4252      	negs	r2, r2
 8001aaa:	1b1c      	subs	r4, r3, r4
 8001aac:	4688      	mov	r8, r1
 8001aae:	1aa4      	subs	r4, r4, r2
 8001ab0:	400e      	ands	r6, r1
 8001ab2:	e6f6      	b.n	80018a2 <__aeabi_dsub+0x112>
 8001ab4:	4297      	cmp	r7, r2
 8001ab6:	d03f      	beq.n	8001b38 <__aeabi_dsub+0x3a8>
 8001ab8:	4652      	mov	r2, sl
 8001aba:	2501      	movs	r5, #1
 8001abc:	2a38      	cmp	r2, #56	@ 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dsub+0x332>
 8001ac0:	e74a      	b.n	8001958 <__aeabi_dsub+0x1c8>
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	9b02      	ldr	r3, [sp, #8]
 8001ac6:	0412      	lsls	r2, r2, #16
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	9302      	str	r3, [sp, #8]
 8001acc:	e72d      	b.n	800192a <__aeabi_dsub+0x19a>
 8001ace:	003c      	movs	r4, r7
 8001ad0:	2500      	movs	r5, #0
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	e705      	b.n	80018e2 <__aeabi_dsub+0x152>
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	402b      	ands	r3, r5
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_dsub+0x350>
 8001ade:	e6e2      	b.n	80018a6 <__aeabi_dsub+0x116>
 8001ae0:	e06b      	b.n	8001bba <__aeabi_dsub+0x42a>
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	000007ff 	.word	0x000007ff
 8001ae8:	ff7fffff 	.word	0xff7fffff
 8001aec:	fffff801 	.word	0xfffff801
 8001af0:	000007fe 	.word	0x000007fe
 8001af4:	0028      	movs	r0, r5
 8001af6:	f000 fab3 	bl	8002060 <__clzsi2>
 8001afa:	0003      	movs	r3, r0
 8001afc:	3318      	adds	r3, #24
 8001afe:	2b1f      	cmp	r3, #31
 8001b00:	dc00      	bgt.n	8001b04 <__aeabi_dsub+0x374>
 8001b02:	e6b4      	b.n	800186e <__aeabi_dsub+0xde>
 8001b04:	002a      	movs	r2, r5
 8001b06:	3808      	subs	r0, #8
 8001b08:	4082      	lsls	r2, r0
 8001b0a:	429f      	cmp	r7, r3
 8001b0c:	dd00      	ble.n	8001b10 <__aeabi_dsub+0x380>
 8001b0e:	e0b9      	b.n	8001c84 <__aeabi_dsub+0x4f4>
 8001b10:	1bdb      	subs	r3, r3, r7
 8001b12:	1c58      	adds	r0, r3, #1
 8001b14:	281f      	cmp	r0, #31
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_dsub+0x38a>
 8001b18:	e1a0      	b.n	8001e5c <__aeabi_dsub+0x6cc>
 8001b1a:	0015      	movs	r5, r2
 8001b1c:	3b1f      	subs	r3, #31
 8001b1e:	40dd      	lsrs	r5, r3
 8001b20:	2820      	cmp	r0, #32
 8001b22:	d005      	beq.n	8001b30 <__aeabi_dsub+0x3a0>
 8001b24:	2340      	movs	r3, #64	@ 0x40
 8001b26:	1a1b      	subs	r3, r3, r0
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	1e53      	subs	r3, r2, #1
 8001b2c:	419a      	sbcs	r2, r3
 8001b2e:	4315      	orrs	r5, r2
 8001b30:	2307      	movs	r3, #7
 8001b32:	2700      	movs	r7, #0
 8001b34:	402b      	ands	r3, r5
 8001b36:	e7d0      	b.n	8001ada <__aeabi_dsub+0x34a>
 8001b38:	08c0      	lsrs	r0, r0, #3
 8001b3a:	0762      	lsls	r2, r4, #29
 8001b3c:	4302      	orrs	r2, r0
 8001b3e:	08e4      	lsrs	r4, r4, #3
 8001b40:	e737      	b.n	80019b2 <__aeabi_dsub+0x222>
 8001b42:	08ea      	lsrs	r2, r5, #3
 8001b44:	0763      	lsls	r3, r4, #29
 8001b46:	431a      	orrs	r2, r3
 8001b48:	4bd3      	ldr	r3, [pc, #844]	@ (8001e98 <__aeabi_dsub+0x708>)
 8001b4a:	08e4      	lsrs	r4, r4, #3
 8001b4c:	429f      	cmp	r7, r3
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_dsub+0x3c2>
 8001b50:	e72f      	b.n	80019b2 <__aeabi_dsub+0x222>
 8001b52:	0324      	lsls	r4, r4, #12
 8001b54:	0b25      	lsrs	r5, r4, #12
 8001b56:	057c      	lsls	r4, r7, #21
 8001b58:	0d64      	lsrs	r4, r4, #21
 8001b5a:	e6c2      	b.n	80018e2 <__aeabi_dsub+0x152>
 8001b5c:	46ca      	mov	sl, r9
 8001b5e:	0022      	movs	r2, r4
 8001b60:	4302      	orrs	r2, r0
 8001b62:	d158      	bne.n	8001c16 <__aeabi_dsub+0x486>
 8001b64:	4663      	mov	r3, ip
 8001b66:	000e      	movs	r6, r1
 8001b68:	9c02      	ldr	r4, [sp, #8]
 8001b6a:	9303      	str	r3, [sp, #12]
 8001b6c:	9b03      	ldr	r3, [sp, #12]
 8001b6e:	4657      	mov	r7, sl
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	e7e7      	b.n	8001b44 <__aeabi_dsub+0x3b4>
 8001b74:	4cc9      	ldr	r4, [pc, #804]	@ (8001e9c <__aeabi_dsub+0x70c>)
 8001b76:	1aff      	subs	r7, r7, r3
 8001b78:	4014      	ands	r4, r2
 8001b7a:	e692      	b.n	80018a2 <__aeabi_dsub+0x112>
 8001b7c:	4dc8      	ldr	r5, [pc, #800]	@ (8001ea0 <__aeabi_dsub+0x710>)
 8001b7e:	1c7a      	adds	r2, r7, #1
 8001b80:	422a      	tst	r2, r5
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x3f6>
 8001b84:	e084      	b.n	8001c90 <__aeabi_dsub+0x500>
 8001b86:	0022      	movs	r2, r4
 8001b88:	4302      	orrs	r2, r0
 8001b8a:	2f00      	cmp	r7, #0
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dsub+0x400>
 8001b8e:	e0ef      	b.n	8001d70 <__aeabi_dsub+0x5e0>
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x406>
 8001b94:	e0e5      	b.n	8001d62 <__aeabi_dsub+0x5d2>
 8001b96:	4662      	mov	r2, ip
 8001b98:	9902      	ldr	r1, [sp, #8]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x410>
 8001b9e:	e0c5      	b.n	8001d2c <__aeabi_dsub+0x59c>
 8001ba0:	4663      	mov	r3, ip
 8001ba2:	18c5      	adds	r5, r0, r3
 8001ba4:	468c      	mov	ip, r1
 8001ba6:	4285      	cmp	r5, r0
 8001ba8:	4180      	sbcs	r0, r0
 8001baa:	4464      	add	r4, ip
 8001bac:	4240      	negs	r0, r0
 8001bae:	1824      	adds	r4, r4, r0
 8001bb0:	0223      	lsls	r3, r4, #8
 8001bb2:	d502      	bpl.n	8001bba <__aeabi_dsub+0x42a>
 8001bb4:	4bb9      	ldr	r3, [pc, #740]	@ (8001e9c <__aeabi_dsub+0x70c>)
 8001bb6:	3701      	adds	r7, #1
 8001bb8:	401c      	ands	r4, r3
 8001bba:	46ba      	mov	sl, r7
 8001bbc:	9503      	str	r5, [sp, #12]
 8001bbe:	e7d5      	b.n	8001b6c <__aeabi_dsub+0x3dc>
 8001bc0:	4662      	mov	r2, ip
 8001bc2:	1a85      	subs	r5, r0, r2
 8001bc4:	42a8      	cmp	r0, r5
 8001bc6:	4192      	sbcs	r2, r2
 8001bc8:	4252      	negs	r2, r2
 8001bca:	4691      	mov	r9, r2
 8001bcc:	9b02      	ldr	r3, [sp, #8]
 8001bce:	1ae3      	subs	r3, r4, r3
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	4691      	mov	r9, r2
 8001bda:	021a      	lsls	r2, r3, #8
 8001bdc:	d46c      	bmi.n	8001cb8 <__aeabi_dsub+0x528>
 8001bde:	464a      	mov	r2, r9
 8001be0:	464c      	mov	r4, r9
 8001be2:	432a      	orrs	r2, r5
 8001be4:	d000      	beq.n	8001be8 <__aeabi_dsub+0x458>
 8001be6:	e63a      	b.n	800185e <__aeabi_dsub+0xce>
 8001be8:	2600      	movs	r6, #0
 8001bea:	2400      	movs	r4, #0
 8001bec:	2500      	movs	r5, #0
 8001bee:	e678      	b.n	80018e2 <__aeabi_dsub+0x152>
 8001bf0:	9902      	ldr	r1, [sp, #8]
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	000d      	movs	r5, r1
 8001bf6:	3a20      	subs	r2, #32
 8001bf8:	40d5      	lsrs	r5, r2
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d006      	beq.n	8001c0c <__aeabi_dsub+0x47c>
 8001bfe:	2240      	movs	r2, #64	@ 0x40
 8001c00:	1ad2      	subs	r2, r2, r3
 8001c02:	000b      	movs	r3, r1
 8001c04:	4093      	lsls	r3, r2
 8001c06:	4662      	mov	r2, ip
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	4693      	mov	fp, r2
 8001c0c:	465b      	mov	r3, fp
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	4193      	sbcs	r3, r2
 8001c12:	431d      	orrs	r5, r3
 8001c14:	e619      	b.n	800184a <__aeabi_dsub+0xba>
 8001c16:	4653      	mov	r3, sl
 8001c18:	1e5a      	subs	r2, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x490>
 8001c1e:	e0c6      	b.n	8001dae <__aeabi_dsub+0x61e>
 8001c20:	4e9d      	ldr	r6, [pc, #628]	@ (8001e98 <__aeabi_dsub+0x708>)
 8001c22:	45b2      	cmp	sl, r6
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x498>
 8001c26:	e6bd      	b.n	80019a4 <__aeabi_dsub+0x214>
 8001c28:	4688      	mov	r8, r1
 8001c2a:	000e      	movs	r6, r1
 8001c2c:	2501      	movs	r5, #1
 8001c2e:	2a38      	cmp	r2, #56	@ 0x38
 8001c30:	dc10      	bgt.n	8001c54 <__aeabi_dsub+0x4c4>
 8001c32:	2a1f      	cmp	r2, #31
 8001c34:	dc7f      	bgt.n	8001d36 <__aeabi_dsub+0x5a6>
 8001c36:	2120      	movs	r1, #32
 8001c38:	0025      	movs	r5, r4
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	0007      	movs	r7, r0
 8001c3e:	4088      	lsls	r0, r1
 8001c40:	408d      	lsls	r5, r1
 8001c42:	40d7      	lsrs	r7, r2
 8001c44:	40d4      	lsrs	r4, r2
 8001c46:	1e41      	subs	r1, r0, #1
 8001c48:	4188      	sbcs	r0, r1
 8001c4a:	9b02      	ldr	r3, [sp, #8]
 8001c4c:	433d      	orrs	r5, r7
 8001c4e:	1b1b      	subs	r3, r3, r4
 8001c50:	4305      	orrs	r5, r0
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	4662      	mov	r2, ip
 8001c56:	1b55      	subs	r5, r2, r5
 8001c58:	45ac      	cmp	ip, r5
 8001c5a:	4192      	sbcs	r2, r2
 8001c5c:	9b02      	ldr	r3, [sp, #8]
 8001c5e:	4252      	negs	r2, r2
 8001c60:	464f      	mov	r7, r9
 8001c62:	1a9c      	subs	r4, r3, r2
 8001c64:	e5f6      	b.n	8001854 <__aeabi_dsub+0xc4>
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	d000      	beq.n	8001c6c <__aeabi_dsub+0x4dc>
 8001c6a:	e0b7      	b.n	8001ddc <__aeabi_dsub+0x64c>
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_dsub+0x4e2>
 8001c70:	e0f0      	b.n	8001e54 <__aeabi_dsub+0x6c4>
 8001c72:	2601      	movs	r6, #1
 8001c74:	400e      	ands	r6, r1
 8001c76:	4663      	mov	r3, ip
 8001c78:	9802      	ldr	r0, [sp, #8]
 8001c7a:	08d9      	lsrs	r1, r3, #3
 8001c7c:	0742      	lsls	r2, r0, #29
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	08c4      	lsrs	r4, r0, #3
 8001c82:	e696      	b.n	80019b2 <__aeabi_dsub+0x222>
 8001c84:	4c85      	ldr	r4, [pc, #532]	@ (8001e9c <__aeabi_dsub+0x70c>)
 8001c86:	1aff      	subs	r7, r7, r3
 8001c88:	4014      	ands	r4, r2
 8001c8a:	0762      	lsls	r2, r4, #29
 8001c8c:	08e4      	lsrs	r4, r4, #3
 8001c8e:	e760      	b.n	8001b52 <__aeabi_dsub+0x3c2>
 8001c90:	4981      	ldr	r1, [pc, #516]	@ (8001e98 <__aeabi_dsub+0x708>)
 8001c92:	428a      	cmp	r2, r1
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x508>
 8001c96:	e0c9      	b.n	8001e2c <__aeabi_dsub+0x69c>
 8001c98:	4663      	mov	r3, ip
 8001c9a:	18c1      	adds	r1, r0, r3
 8001c9c:	4281      	cmp	r1, r0
 8001c9e:	4180      	sbcs	r0, r0
 8001ca0:	9b02      	ldr	r3, [sp, #8]
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	18e3      	adds	r3, r4, r3
 8001ca6:	181b      	adds	r3, r3, r0
 8001ca8:	07dd      	lsls	r5, r3, #31
 8001caa:	085c      	lsrs	r4, r3, #1
 8001cac:	2307      	movs	r3, #7
 8001cae:	0849      	lsrs	r1, r1, #1
 8001cb0:	430d      	orrs	r5, r1
 8001cb2:	0017      	movs	r7, r2
 8001cb4:	402b      	ands	r3, r5
 8001cb6:	e710      	b.n	8001ada <__aeabi_dsub+0x34a>
 8001cb8:	4663      	mov	r3, ip
 8001cba:	1a1d      	subs	r5, r3, r0
 8001cbc:	45ac      	cmp	ip, r5
 8001cbe:	4192      	sbcs	r2, r2
 8001cc0:	2601      	movs	r6, #1
 8001cc2:	9b02      	ldr	r3, [sp, #8]
 8001cc4:	4252      	negs	r2, r2
 8001cc6:	1b1c      	subs	r4, r3, r4
 8001cc8:	4688      	mov	r8, r1
 8001cca:	1aa4      	subs	r4, r4, r2
 8001ccc:	400e      	ands	r6, r1
 8001cce:	e5c6      	b.n	800185e <__aeabi_dsub+0xce>
 8001cd0:	4663      	mov	r3, ip
 8001cd2:	18c5      	adds	r5, r0, r3
 8001cd4:	9b02      	ldr	r3, [sp, #8]
 8001cd6:	4285      	cmp	r5, r0
 8001cd8:	4180      	sbcs	r0, r0
 8001cda:	469c      	mov	ip, r3
 8001cdc:	4240      	negs	r0, r0
 8001cde:	4464      	add	r4, ip
 8001ce0:	1824      	adds	r4, r4, r0
 8001ce2:	2701      	movs	r7, #1
 8001ce4:	0223      	lsls	r3, r4, #8
 8001ce6:	d400      	bmi.n	8001cea <__aeabi_dsub+0x55a>
 8001ce8:	e6f5      	b.n	8001ad6 <__aeabi_dsub+0x346>
 8001cea:	2702      	movs	r7, #2
 8001cec:	e641      	b.n	8001972 <__aeabi_dsub+0x1e2>
 8001cee:	4663      	mov	r3, ip
 8001cf0:	1ac5      	subs	r5, r0, r3
 8001cf2:	42a8      	cmp	r0, r5
 8001cf4:	4180      	sbcs	r0, r0
 8001cf6:	9b02      	ldr	r3, [sp, #8]
 8001cf8:	4240      	negs	r0, r0
 8001cfa:	1ae4      	subs	r4, r4, r3
 8001cfc:	2701      	movs	r7, #1
 8001cfe:	1a24      	subs	r4, r4, r0
 8001d00:	e5a8      	b.n	8001854 <__aeabi_dsub+0xc4>
 8001d02:	9d02      	ldr	r5, [sp, #8]
 8001d04:	4652      	mov	r2, sl
 8001d06:	002b      	movs	r3, r5
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d3      	lsrs	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	4653      	mov	r3, sl
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d006      	beq.n	8001d22 <__aeabi_dsub+0x592>
 8001d14:	2240      	movs	r2, #64	@ 0x40
 8001d16:	1ad2      	subs	r2, r2, r3
 8001d18:	002b      	movs	r3, r5
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	4693      	mov	fp, r2
 8001d22:	465d      	mov	r5, fp
 8001d24:	1e6b      	subs	r3, r5, #1
 8001d26:	419d      	sbcs	r5, r3
 8001d28:	430d      	orrs	r5, r1
 8001d2a:	e615      	b.n	8001958 <__aeabi_dsub+0x1c8>
 8001d2c:	0762      	lsls	r2, r4, #29
 8001d2e:	08c0      	lsrs	r0, r0, #3
 8001d30:	4302      	orrs	r2, r0
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	e70d      	b.n	8001b52 <__aeabi_dsub+0x3c2>
 8001d36:	0011      	movs	r1, r2
 8001d38:	0027      	movs	r7, r4
 8001d3a:	3920      	subs	r1, #32
 8001d3c:	40cf      	lsrs	r7, r1
 8001d3e:	2a20      	cmp	r2, #32
 8001d40:	d005      	beq.n	8001d4e <__aeabi_dsub+0x5be>
 8001d42:	2140      	movs	r1, #64	@ 0x40
 8001d44:	1a8a      	subs	r2, r1, r2
 8001d46:	4094      	lsls	r4, r2
 8001d48:	0025      	movs	r5, r4
 8001d4a:	4305      	orrs	r5, r0
 8001d4c:	9503      	str	r5, [sp, #12]
 8001d4e:	9d03      	ldr	r5, [sp, #12]
 8001d50:	1e6a      	subs	r2, r5, #1
 8001d52:	4195      	sbcs	r5, r2
 8001d54:	433d      	orrs	r5, r7
 8001d56:	e77d      	b.n	8001c54 <__aeabi_dsub+0x4c4>
 8001d58:	2a00      	cmp	r2, #0
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x5ce>
 8001d5c:	e744      	b.n	8001be8 <__aeabi_dsub+0x458>
 8001d5e:	2601      	movs	r6, #1
 8001d60:	400e      	ands	r6, r1
 8001d62:	4663      	mov	r3, ip
 8001d64:	08d9      	lsrs	r1, r3, #3
 8001d66:	9b02      	ldr	r3, [sp, #8]
 8001d68:	075a      	lsls	r2, r3, #29
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	08dc      	lsrs	r4, r3, #3
 8001d6e:	e6f0      	b.n	8001b52 <__aeabi_dsub+0x3c2>
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d028      	beq.n	8001dc6 <__aeabi_dsub+0x636>
 8001d74:	4662      	mov	r2, ip
 8001d76:	9f02      	ldr	r7, [sp, #8]
 8001d78:	08c0      	lsrs	r0, r0, #3
 8001d7a:	433a      	orrs	r2, r7
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x5f0>
 8001d7e:	e6dc      	b.n	8001b3a <__aeabi_dsub+0x3aa>
 8001d80:	0762      	lsls	r2, r4, #29
 8001d82:	4310      	orrs	r0, r2
 8001d84:	2280      	movs	r2, #128	@ 0x80
 8001d86:	08e4      	lsrs	r4, r4, #3
 8001d88:	0312      	lsls	r2, r2, #12
 8001d8a:	4214      	tst	r4, r2
 8001d8c:	d009      	beq.n	8001da2 <__aeabi_dsub+0x612>
 8001d8e:	08fd      	lsrs	r5, r7, #3
 8001d90:	4215      	tst	r5, r2
 8001d92:	d106      	bne.n	8001da2 <__aeabi_dsub+0x612>
 8001d94:	4663      	mov	r3, ip
 8001d96:	2601      	movs	r6, #1
 8001d98:	002c      	movs	r4, r5
 8001d9a:	08d8      	lsrs	r0, r3, #3
 8001d9c:	077b      	lsls	r3, r7, #29
 8001d9e:	4318      	orrs	r0, r3
 8001da0:	400e      	ands	r6, r1
 8001da2:	0f42      	lsrs	r2, r0, #29
 8001da4:	00c0      	lsls	r0, r0, #3
 8001da6:	08c0      	lsrs	r0, r0, #3
 8001da8:	0752      	lsls	r2, r2, #29
 8001daa:	4302      	orrs	r2, r0
 8001dac:	e601      	b.n	80019b2 <__aeabi_dsub+0x222>
 8001dae:	4663      	mov	r3, ip
 8001db0:	1a1d      	subs	r5, r3, r0
 8001db2:	45ac      	cmp	ip, r5
 8001db4:	4192      	sbcs	r2, r2
 8001db6:	9b02      	ldr	r3, [sp, #8]
 8001db8:	4252      	negs	r2, r2
 8001dba:	1b1c      	subs	r4, r3, r4
 8001dbc:	000e      	movs	r6, r1
 8001dbe:	4688      	mov	r8, r1
 8001dc0:	2701      	movs	r7, #1
 8001dc2:	1aa4      	subs	r4, r4, r2
 8001dc4:	e546      	b.n	8001854 <__aeabi_dsub+0xc4>
 8001dc6:	4663      	mov	r3, ip
 8001dc8:	08d9      	lsrs	r1, r3, #3
 8001dca:	9b02      	ldr	r3, [sp, #8]
 8001dcc:	075a      	lsls	r2, r3, #29
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	08dc      	lsrs	r4, r3, #3
 8001dd2:	e5ee      	b.n	80019b2 <__aeabi_dsub+0x222>
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	9c02      	ldr	r4, [sp, #8]
 8001dd8:	9303      	str	r3, [sp, #12]
 8001dda:	e6c7      	b.n	8001b6c <__aeabi_dsub+0x3dc>
 8001ddc:	08c0      	lsrs	r0, r0, #3
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d100      	bne.n	8001de4 <__aeabi_dsub+0x654>
 8001de2:	e6aa      	b.n	8001b3a <__aeabi_dsub+0x3aa>
 8001de4:	0762      	lsls	r2, r4, #29
 8001de6:	4310      	orrs	r0, r2
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	08e4      	lsrs	r4, r4, #3
 8001dec:	0312      	lsls	r2, r2, #12
 8001dee:	4214      	tst	r4, r2
 8001df0:	d0d7      	beq.n	8001da2 <__aeabi_dsub+0x612>
 8001df2:	9f02      	ldr	r7, [sp, #8]
 8001df4:	08fd      	lsrs	r5, r7, #3
 8001df6:	4215      	tst	r5, r2
 8001df8:	d1d3      	bne.n	8001da2 <__aeabi_dsub+0x612>
 8001dfa:	4663      	mov	r3, ip
 8001dfc:	2601      	movs	r6, #1
 8001dfe:	08d8      	lsrs	r0, r3, #3
 8001e00:	077b      	lsls	r3, r7, #29
 8001e02:	002c      	movs	r4, r5
 8001e04:	4318      	orrs	r0, r3
 8001e06:	400e      	ands	r6, r1
 8001e08:	e7cb      	b.n	8001da2 <__aeabi_dsub+0x612>
 8001e0a:	000a      	movs	r2, r1
 8001e0c:	0027      	movs	r7, r4
 8001e0e:	3a20      	subs	r2, #32
 8001e10:	40d7      	lsrs	r7, r2
 8001e12:	2920      	cmp	r1, #32
 8001e14:	d005      	beq.n	8001e22 <__aeabi_dsub+0x692>
 8001e16:	2240      	movs	r2, #64	@ 0x40
 8001e18:	1a52      	subs	r2, r2, r1
 8001e1a:	4094      	lsls	r4, r2
 8001e1c:	0025      	movs	r5, r4
 8001e1e:	4305      	orrs	r5, r0
 8001e20:	9503      	str	r5, [sp, #12]
 8001e22:	9d03      	ldr	r5, [sp, #12]
 8001e24:	1e6a      	subs	r2, r5, #1
 8001e26:	4195      	sbcs	r5, r2
 8001e28:	432f      	orrs	r7, r5
 8001e2a:	e610      	b.n	8001a4e <__aeabi_dsub+0x2be>
 8001e2c:	0014      	movs	r4, r2
 8001e2e:	2500      	movs	r5, #0
 8001e30:	2200      	movs	r2, #0
 8001e32:	e556      	b.n	80018e2 <__aeabi_dsub+0x152>
 8001e34:	9b02      	ldr	r3, [sp, #8]
 8001e36:	4460      	add	r0, ip
 8001e38:	4699      	mov	r9, r3
 8001e3a:	4560      	cmp	r0, ip
 8001e3c:	4192      	sbcs	r2, r2
 8001e3e:	444c      	add	r4, r9
 8001e40:	4252      	negs	r2, r2
 8001e42:	0005      	movs	r5, r0
 8001e44:	18a4      	adds	r4, r4, r2
 8001e46:	e74c      	b.n	8001ce2 <__aeabi_dsub+0x552>
 8001e48:	001a      	movs	r2, r3
 8001e4a:	001c      	movs	r4, r3
 8001e4c:	432a      	orrs	r2, r5
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x6c2>
 8001e50:	e6b3      	b.n	8001bba <__aeabi_dsub+0x42a>
 8001e52:	e6c9      	b.n	8001be8 <__aeabi_dsub+0x458>
 8001e54:	2480      	movs	r4, #128	@ 0x80
 8001e56:	2600      	movs	r6, #0
 8001e58:	0324      	lsls	r4, r4, #12
 8001e5a:	e5ae      	b.n	80019ba <__aeabi_dsub+0x22a>
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	2500      	movs	r5, #0
 8001e60:	1a09      	subs	r1, r1, r0
 8001e62:	e517      	b.n	8001894 <__aeabi_dsub+0x104>
 8001e64:	2200      	movs	r2, #0
 8001e66:	2500      	movs	r5, #0
 8001e68:	4c0b      	ldr	r4, [pc, #44]	@ (8001e98 <__aeabi_dsub+0x708>)
 8001e6a:	e53a      	b.n	80018e2 <__aeabi_dsub+0x152>
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	d100      	bne.n	8001e72 <__aeabi_dsub+0x6e2>
 8001e70:	e5f6      	b.n	8001a60 <__aeabi_dsub+0x2d0>
 8001e72:	464b      	mov	r3, r9
 8001e74:	1bda      	subs	r2, r3, r7
 8001e76:	4692      	mov	sl, r2
 8001e78:	2f00      	cmp	r7, #0
 8001e7a:	d100      	bne.n	8001e7e <__aeabi_dsub+0x6ee>
 8001e7c:	e66f      	b.n	8001b5e <__aeabi_dsub+0x3ce>
 8001e7e:	2a38      	cmp	r2, #56	@ 0x38
 8001e80:	dc05      	bgt.n	8001e8e <__aeabi_dsub+0x6fe>
 8001e82:	2680      	movs	r6, #128	@ 0x80
 8001e84:	0436      	lsls	r6, r6, #16
 8001e86:	4334      	orrs	r4, r6
 8001e88:	4688      	mov	r8, r1
 8001e8a:	000e      	movs	r6, r1
 8001e8c:	e6d1      	b.n	8001c32 <__aeabi_dsub+0x4a2>
 8001e8e:	4688      	mov	r8, r1
 8001e90:	000e      	movs	r6, r1
 8001e92:	2501      	movs	r5, #1
 8001e94:	e6de      	b.n	8001c54 <__aeabi_dsub+0x4c4>
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	000007ff 	.word	0x000007ff
 8001e9c:	ff7fffff 	.word	0xff7fffff
 8001ea0:	000007fe 	.word	0x000007fe
 8001ea4:	2d00      	cmp	r5, #0
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x71a>
 8001ea8:	e668      	b.n	8001b7c <__aeabi_dsub+0x3ec>
 8001eaa:	464b      	mov	r3, r9
 8001eac:	1bd9      	subs	r1, r3, r7
 8001eae:	2f00      	cmp	r7, #0
 8001eb0:	d101      	bne.n	8001eb6 <__aeabi_dsub+0x726>
 8001eb2:	468a      	mov	sl, r1
 8001eb4:	e5a7      	b.n	8001a06 <__aeabi_dsub+0x276>
 8001eb6:	2701      	movs	r7, #1
 8001eb8:	2938      	cmp	r1, #56	@ 0x38
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x72e>
 8001ebc:	e5c7      	b.n	8001a4e <__aeabi_dsub+0x2be>
 8001ebe:	2280      	movs	r2, #128	@ 0x80
 8001ec0:	0412      	lsls	r2, r2, #16
 8001ec2:	4314      	orrs	r4, r2
 8001ec4:	e5af      	b.n	8001a26 <__aeabi_dsub+0x296>
 8001ec6:	46c0      	nop			@ (mov r8, r8)

08001ec8 <__aeabi_d2iz>:
 8001ec8:	000b      	movs	r3, r1
 8001eca:	0002      	movs	r2, r0
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	4d16      	ldr	r5, [pc, #88]	@ (8001f28 <__aeabi_d2iz+0x60>)
 8001ed0:	030c      	lsls	r4, r1, #12
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	0049      	lsls	r1, r1, #1
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	9200      	str	r2, [sp, #0]
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	0b24      	lsrs	r4, r4, #12
 8001ede:	0d49      	lsrs	r1, r1, #21
 8001ee0:	0fde      	lsrs	r6, r3, #31
 8001ee2:	42a9      	cmp	r1, r5
 8001ee4:	dd04      	ble.n	8001ef0 <__aeabi_d2iz+0x28>
 8001ee6:	4811      	ldr	r0, [pc, #68]	@ (8001f2c <__aeabi_d2iz+0x64>)
 8001ee8:	4281      	cmp	r1, r0
 8001eea:	dd03      	ble.n	8001ef4 <__aeabi_d2iz+0x2c>
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <__aeabi_d2iz+0x68>)
 8001eee:	18f0      	adds	r0, r6, r3
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	2080      	movs	r0, #128	@ 0x80
 8001ef6:	0340      	lsls	r0, r0, #13
 8001ef8:	4320      	orrs	r0, r4
 8001efa:	4c0e      	ldr	r4, [pc, #56]	@ (8001f34 <__aeabi_d2iz+0x6c>)
 8001efc:	1a64      	subs	r4, r4, r1
 8001efe:	2c1f      	cmp	r4, #31
 8001f00:	dd08      	ble.n	8001f14 <__aeabi_d2iz+0x4c>
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <__aeabi_d2iz+0x70>)
 8001f04:	1a5b      	subs	r3, r3, r1
 8001f06:	40d8      	lsrs	r0, r3
 8001f08:	0003      	movs	r3, r0
 8001f0a:	4258      	negs	r0, r3
 8001f0c:	2e00      	cmp	r6, #0
 8001f0e:	d1ef      	bne.n	8001ef0 <__aeabi_d2iz+0x28>
 8001f10:	0018      	movs	r0, r3
 8001f12:	e7ed      	b.n	8001ef0 <__aeabi_d2iz+0x28>
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <__aeabi_d2iz+0x74>)
 8001f16:	9a00      	ldr	r2, [sp, #0]
 8001f18:	469c      	mov	ip, r3
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	4461      	add	r1, ip
 8001f1e:	408b      	lsls	r3, r1
 8001f20:	40e2      	lsrs	r2, r4
 8001f22:	4313      	orrs	r3, r2
 8001f24:	e7f1      	b.n	8001f0a <__aeabi_d2iz+0x42>
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	000003fe 	.word	0x000003fe
 8001f2c:	0000041d 	.word	0x0000041d
 8001f30:	7fffffff 	.word	0x7fffffff
 8001f34:	00000433 	.word	0x00000433
 8001f38:	00000413 	.word	0x00000413
 8001f3c:	fffffbed 	.word	0xfffffbed

08001f40 <__aeabi_i2d>:
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	2800      	cmp	r0, #0
 8001f44:	d016      	beq.n	8001f74 <__aeabi_i2d+0x34>
 8001f46:	17c3      	asrs	r3, r0, #31
 8001f48:	18c5      	adds	r5, r0, r3
 8001f4a:	405d      	eors	r5, r3
 8001f4c:	0fc4      	lsrs	r4, r0, #31
 8001f4e:	0028      	movs	r0, r5
 8001f50:	f000 f886 	bl	8002060 <__clzsi2>
 8001f54:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <__aeabi_i2d+0x58>)
 8001f56:	1a1b      	subs	r3, r3, r0
 8001f58:	055b      	lsls	r3, r3, #21
 8001f5a:	0d5b      	lsrs	r3, r3, #21
 8001f5c:	280a      	cmp	r0, #10
 8001f5e:	dc14      	bgt.n	8001f8a <__aeabi_i2d+0x4a>
 8001f60:	0002      	movs	r2, r0
 8001f62:	002e      	movs	r6, r5
 8001f64:	3215      	adds	r2, #21
 8001f66:	4096      	lsls	r6, r2
 8001f68:	220b      	movs	r2, #11
 8001f6a:	1a12      	subs	r2, r2, r0
 8001f6c:	40d5      	lsrs	r5, r2
 8001f6e:	032d      	lsls	r5, r5, #12
 8001f70:	0b2d      	lsrs	r5, r5, #12
 8001f72:	e003      	b.n	8001f7c <__aeabi_i2d+0x3c>
 8001f74:	2400      	movs	r4, #0
 8001f76:	2300      	movs	r3, #0
 8001f78:	2500      	movs	r5, #0
 8001f7a:	2600      	movs	r6, #0
 8001f7c:	051b      	lsls	r3, r3, #20
 8001f7e:	432b      	orrs	r3, r5
 8001f80:	07e4      	lsls	r4, r4, #31
 8001f82:	4323      	orrs	r3, r4
 8001f84:	0030      	movs	r0, r6
 8001f86:	0019      	movs	r1, r3
 8001f88:	bd70      	pop	{r4, r5, r6, pc}
 8001f8a:	380b      	subs	r0, #11
 8001f8c:	4085      	lsls	r5, r0
 8001f8e:	032d      	lsls	r5, r5, #12
 8001f90:	2600      	movs	r6, #0
 8001f92:	0b2d      	lsrs	r5, r5, #12
 8001f94:	e7f2      	b.n	8001f7c <__aeabi_i2d+0x3c>
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	0000041e 	.word	0x0000041e

08001f9c <__aeabi_ui2d>:
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	1e04      	subs	r4, r0, #0
 8001fa0:	d010      	beq.n	8001fc4 <__aeabi_ui2d+0x28>
 8001fa2:	f000 f85d 	bl	8002060 <__clzsi2>
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <__aeabi_ui2d+0x44>)
 8001fa8:	1a1b      	subs	r3, r3, r0
 8001faa:	055b      	lsls	r3, r3, #21
 8001fac:	0d5b      	lsrs	r3, r3, #21
 8001fae:	280a      	cmp	r0, #10
 8001fb0:	dc0f      	bgt.n	8001fd2 <__aeabi_ui2d+0x36>
 8001fb2:	220b      	movs	r2, #11
 8001fb4:	0021      	movs	r1, r4
 8001fb6:	1a12      	subs	r2, r2, r0
 8001fb8:	40d1      	lsrs	r1, r2
 8001fba:	3015      	adds	r0, #21
 8001fbc:	030a      	lsls	r2, r1, #12
 8001fbe:	4084      	lsls	r4, r0
 8001fc0:	0b12      	lsrs	r2, r2, #12
 8001fc2:	e001      	b.n	8001fc8 <__aeabi_ui2d+0x2c>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	0020      	movs	r0, r4
 8001fce:	0019      	movs	r1, r3
 8001fd0:	bd10      	pop	{r4, pc}
 8001fd2:	0022      	movs	r2, r4
 8001fd4:	380b      	subs	r0, #11
 8001fd6:	4082      	lsls	r2, r0
 8001fd8:	0312      	lsls	r2, r2, #12
 8001fda:	2400      	movs	r4, #0
 8001fdc:	0b12      	lsrs	r2, r2, #12
 8001fde:	e7f3      	b.n	8001fc8 <__aeabi_ui2d+0x2c>
 8001fe0:	0000041e 	.word	0x0000041e

08001fe4 <__aeabi_cdrcmple>:
 8001fe4:	4684      	mov	ip, r0
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	4662      	mov	r2, ip
 8001fea:	468c      	mov	ip, r1
 8001fec:	0019      	movs	r1, r3
 8001fee:	4663      	mov	r3, ip
 8001ff0:	e000      	b.n	8001ff4 <__aeabi_cdcmpeq>
 8001ff2:	46c0      	nop			@ (mov r8, r8)

08001ff4 <__aeabi_cdcmpeq>:
 8001ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001ff6:	f000 f927 	bl	8002248 <__ledf2>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d401      	bmi.n	8002002 <__aeabi_cdcmpeq+0xe>
 8001ffe:	2100      	movs	r1, #0
 8002000:	42c8      	cmn	r0, r1
 8002002:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002004 <__aeabi_dcmpeq>:
 8002004:	b510      	push	{r4, lr}
 8002006:	f000 f867 	bl	80020d8 <__eqdf2>
 800200a:	4240      	negs	r0, r0
 800200c:	3001      	adds	r0, #1
 800200e:	bd10      	pop	{r4, pc}

08002010 <__aeabi_dcmplt>:
 8002010:	b510      	push	{r4, lr}
 8002012:	f000 f919 	bl	8002248 <__ledf2>
 8002016:	2800      	cmp	r0, #0
 8002018:	db01      	blt.n	800201e <__aeabi_dcmplt+0xe>
 800201a:	2000      	movs	r0, #0
 800201c:	bd10      	pop	{r4, pc}
 800201e:	2001      	movs	r0, #1
 8002020:	bd10      	pop	{r4, pc}
 8002022:	46c0      	nop			@ (mov r8, r8)

08002024 <__aeabi_dcmple>:
 8002024:	b510      	push	{r4, lr}
 8002026:	f000 f90f 	bl	8002248 <__ledf2>
 800202a:	2800      	cmp	r0, #0
 800202c:	dd01      	ble.n	8002032 <__aeabi_dcmple+0xe>
 800202e:	2000      	movs	r0, #0
 8002030:	bd10      	pop	{r4, pc}
 8002032:	2001      	movs	r0, #1
 8002034:	bd10      	pop	{r4, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)

08002038 <__aeabi_dcmpgt>:
 8002038:	b510      	push	{r4, lr}
 800203a:	f000 f891 	bl	8002160 <__gedf2>
 800203e:	2800      	cmp	r0, #0
 8002040:	dc01      	bgt.n	8002046 <__aeabi_dcmpgt+0xe>
 8002042:	2000      	movs	r0, #0
 8002044:	bd10      	pop	{r4, pc}
 8002046:	2001      	movs	r0, #1
 8002048:	bd10      	pop	{r4, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)

0800204c <__aeabi_dcmpge>:
 800204c:	b510      	push	{r4, lr}
 800204e:	f000 f887 	bl	8002160 <__gedf2>
 8002052:	2800      	cmp	r0, #0
 8002054:	da01      	bge.n	800205a <__aeabi_dcmpge+0xe>
 8002056:	2000      	movs	r0, #0
 8002058:	bd10      	pop	{r4, pc}
 800205a:	2001      	movs	r0, #1
 800205c:	bd10      	pop	{r4, pc}
 800205e:	46c0      	nop			@ (mov r8, r8)

08002060 <__clzsi2>:
 8002060:	211c      	movs	r1, #28
 8002062:	2301      	movs	r3, #1
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	4298      	cmp	r0, r3
 8002068:	d301      	bcc.n	800206e <__clzsi2+0xe>
 800206a:	0c00      	lsrs	r0, r0, #16
 800206c:	3910      	subs	r1, #16
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	4298      	cmp	r0, r3
 8002072:	d301      	bcc.n	8002078 <__clzsi2+0x18>
 8002074:	0a00      	lsrs	r0, r0, #8
 8002076:	3908      	subs	r1, #8
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	4298      	cmp	r0, r3
 800207c:	d301      	bcc.n	8002082 <__clzsi2+0x22>
 800207e:	0900      	lsrs	r0, r0, #4
 8002080:	3904      	subs	r1, #4
 8002082:	a202      	add	r2, pc, #8	@ (adr r2, 800208c <__clzsi2+0x2c>)
 8002084:	5c10      	ldrb	r0, [r2, r0]
 8002086:	1840      	adds	r0, r0, r1
 8002088:	4770      	bx	lr
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	02020304 	.word	0x02020304
 8002090:	01010101 	.word	0x01010101
	...

0800209c <__aeabi_d2uiz>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	2200      	movs	r2, #0
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <__aeabi_d2uiz+0x38>)
 80020a2:	0004      	movs	r4, r0
 80020a4:	000d      	movs	r5, r1
 80020a6:	f7ff ffd1 	bl	800204c <__aeabi_dcmpge>
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d104      	bne.n	80020b8 <__aeabi_d2uiz+0x1c>
 80020ae:	0020      	movs	r0, r4
 80020b0:	0029      	movs	r1, r5
 80020b2:	f7ff ff09 	bl	8001ec8 <__aeabi_d2iz>
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <__aeabi_d2uiz+0x38>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	0020      	movs	r0, r4
 80020be:	0029      	movs	r1, r5
 80020c0:	f7ff fb66 	bl	8001790 <__aeabi_dsub>
 80020c4:	f7ff ff00 	bl	8001ec8 <__aeabi_d2iz>
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	469c      	mov	ip, r3
 80020ce:	4460      	add	r0, ip
 80020d0:	e7f1      	b.n	80020b6 <__aeabi_d2uiz+0x1a>
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	41e00000 	.word	0x41e00000

080020d8 <__eqdf2>:
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	4657      	mov	r7, sl
 80020dc:	46de      	mov	lr, fp
 80020de:	464e      	mov	r6, r9
 80020e0:	4645      	mov	r5, r8
 80020e2:	b5e0      	push	{r5, r6, r7, lr}
 80020e4:	000d      	movs	r5, r1
 80020e6:	0004      	movs	r4, r0
 80020e8:	0fe8      	lsrs	r0, r5, #31
 80020ea:	4683      	mov	fp, r0
 80020ec:	0309      	lsls	r1, r1, #12
 80020ee:	0fd8      	lsrs	r0, r3, #31
 80020f0:	0b09      	lsrs	r1, r1, #12
 80020f2:	4682      	mov	sl, r0
 80020f4:	4819      	ldr	r0, [pc, #100]	@ (800215c <__eqdf2+0x84>)
 80020f6:	468c      	mov	ip, r1
 80020f8:	031f      	lsls	r7, r3, #12
 80020fa:	0069      	lsls	r1, r5, #1
 80020fc:	005e      	lsls	r6, r3, #1
 80020fe:	0d49      	lsrs	r1, r1, #21
 8002100:	0b3f      	lsrs	r7, r7, #12
 8002102:	0d76      	lsrs	r6, r6, #21
 8002104:	4281      	cmp	r1, r0
 8002106:	d018      	beq.n	800213a <__eqdf2+0x62>
 8002108:	4286      	cmp	r6, r0
 800210a:	d00f      	beq.n	800212c <__eqdf2+0x54>
 800210c:	2001      	movs	r0, #1
 800210e:	42b1      	cmp	r1, r6
 8002110:	d10d      	bne.n	800212e <__eqdf2+0x56>
 8002112:	45bc      	cmp	ip, r7
 8002114:	d10b      	bne.n	800212e <__eqdf2+0x56>
 8002116:	4294      	cmp	r4, r2
 8002118:	d109      	bne.n	800212e <__eqdf2+0x56>
 800211a:	45d3      	cmp	fp, sl
 800211c:	d01c      	beq.n	8002158 <__eqdf2+0x80>
 800211e:	2900      	cmp	r1, #0
 8002120:	d105      	bne.n	800212e <__eqdf2+0x56>
 8002122:	4660      	mov	r0, ip
 8002124:	4320      	orrs	r0, r4
 8002126:	1e43      	subs	r3, r0, #1
 8002128:	4198      	sbcs	r0, r3
 800212a:	e000      	b.n	800212e <__eqdf2+0x56>
 800212c:	2001      	movs	r0, #1
 800212e:	bcf0      	pop	{r4, r5, r6, r7}
 8002130:	46bb      	mov	fp, r7
 8002132:	46b2      	mov	sl, r6
 8002134:	46a9      	mov	r9, r5
 8002136:	46a0      	mov	r8, r4
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213a:	2001      	movs	r0, #1
 800213c:	428e      	cmp	r6, r1
 800213e:	d1f6      	bne.n	800212e <__eqdf2+0x56>
 8002140:	4661      	mov	r1, ip
 8002142:	4339      	orrs	r1, r7
 8002144:	000f      	movs	r7, r1
 8002146:	4317      	orrs	r7, r2
 8002148:	4327      	orrs	r7, r4
 800214a:	d1f0      	bne.n	800212e <__eqdf2+0x56>
 800214c:	465b      	mov	r3, fp
 800214e:	4652      	mov	r2, sl
 8002150:	1a98      	subs	r0, r3, r2
 8002152:	1e43      	subs	r3, r0, #1
 8002154:	4198      	sbcs	r0, r3
 8002156:	e7ea      	b.n	800212e <__eqdf2+0x56>
 8002158:	2000      	movs	r0, #0
 800215a:	e7e8      	b.n	800212e <__eqdf2+0x56>
 800215c:	000007ff 	.word	0x000007ff

08002160 <__gedf2>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	4657      	mov	r7, sl
 8002164:	464e      	mov	r6, r9
 8002166:	4645      	mov	r5, r8
 8002168:	46de      	mov	lr, fp
 800216a:	b5e0      	push	{r5, r6, r7, lr}
 800216c:	000d      	movs	r5, r1
 800216e:	030f      	lsls	r7, r1, #12
 8002170:	0b39      	lsrs	r1, r7, #12
 8002172:	b083      	sub	sp, #12
 8002174:	0004      	movs	r4, r0
 8002176:	4680      	mov	r8, r0
 8002178:	9101      	str	r1, [sp, #4]
 800217a:	0058      	lsls	r0, r3, #1
 800217c:	0fe9      	lsrs	r1, r5, #31
 800217e:	4f31      	ldr	r7, [pc, #196]	@ (8002244 <__gedf2+0xe4>)
 8002180:	0d40      	lsrs	r0, r0, #21
 8002182:	468c      	mov	ip, r1
 8002184:	006e      	lsls	r6, r5, #1
 8002186:	0319      	lsls	r1, r3, #12
 8002188:	4682      	mov	sl, r0
 800218a:	4691      	mov	r9, r2
 800218c:	0d76      	lsrs	r6, r6, #21
 800218e:	0b09      	lsrs	r1, r1, #12
 8002190:	0fd8      	lsrs	r0, r3, #31
 8002192:	42be      	cmp	r6, r7
 8002194:	d01f      	beq.n	80021d6 <__gedf2+0x76>
 8002196:	45ba      	cmp	sl, r7
 8002198:	d00f      	beq.n	80021ba <__gedf2+0x5a>
 800219a:	2e00      	cmp	r6, #0
 800219c:	d12f      	bne.n	80021fe <__gedf2+0x9e>
 800219e:	4655      	mov	r5, sl
 80021a0:	9e01      	ldr	r6, [sp, #4]
 80021a2:	4334      	orrs	r4, r6
 80021a4:	2d00      	cmp	r5, #0
 80021a6:	d127      	bne.n	80021f8 <__gedf2+0x98>
 80021a8:	430a      	orrs	r2, r1
 80021aa:	d03a      	beq.n	8002222 <__gedf2+0xc2>
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d145      	bne.n	800223c <__gedf2+0xdc>
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d11a      	bne.n	80021ea <__gedf2+0x8a>
 80021b4:	2001      	movs	r0, #1
 80021b6:	4240      	negs	r0, r0
 80021b8:	e017      	b.n	80021ea <__gedf2+0x8a>
 80021ba:	4311      	orrs	r1, r2
 80021bc:	d13b      	bne.n	8002236 <__gedf2+0xd6>
 80021be:	2e00      	cmp	r6, #0
 80021c0:	d102      	bne.n	80021c8 <__gedf2+0x68>
 80021c2:	9f01      	ldr	r7, [sp, #4]
 80021c4:	4327      	orrs	r7, r4
 80021c6:	d0f3      	beq.n	80021b0 <__gedf2+0x50>
 80021c8:	4584      	cmp	ip, r0
 80021ca:	d109      	bne.n	80021e0 <__gedf2+0x80>
 80021cc:	4663      	mov	r3, ip
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <__gedf2+0x54>
 80021d2:	4660      	mov	r0, ip
 80021d4:	e009      	b.n	80021ea <__gedf2+0x8a>
 80021d6:	9f01      	ldr	r7, [sp, #4]
 80021d8:	4327      	orrs	r7, r4
 80021da:	d12c      	bne.n	8002236 <__gedf2+0xd6>
 80021dc:	45b2      	cmp	sl, r6
 80021de:	d024      	beq.n	800222a <__gedf2+0xca>
 80021e0:	4663      	mov	r3, ip
 80021e2:	2002      	movs	r0, #2
 80021e4:	3b01      	subs	r3, #1
 80021e6:	4018      	ands	r0, r3
 80021e8:	3801      	subs	r0, #1
 80021ea:	b003      	add	sp, #12
 80021ec:	bcf0      	pop	{r4, r5, r6, r7}
 80021ee:	46bb      	mov	fp, r7
 80021f0:	46b2      	mov	sl, r6
 80021f2:	46a9      	mov	r9, r5
 80021f4:	46a0      	mov	r8, r4
 80021f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f8:	2c00      	cmp	r4, #0
 80021fa:	d0d9      	beq.n	80021b0 <__gedf2+0x50>
 80021fc:	e7e4      	b.n	80021c8 <__gedf2+0x68>
 80021fe:	4654      	mov	r4, sl
 8002200:	2c00      	cmp	r4, #0
 8002202:	d0ed      	beq.n	80021e0 <__gedf2+0x80>
 8002204:	4584      	cmp	ip, r0
 8002206:	d1eb      	bne.n	80021e0 <__gedf2+0x80>
 8002208:	4556      	cmp	r6, sl
 800220a:	dce9      	bgt.n	80021e0 <__gedf2+0x80>
 800220c:	dbde      	blt.n	80021cc <__gedf2+0x6c>
 800220e:	9b01      	ldr	r3, [sp, #4]
 8002210:	428b      	cmp	r3, r1
 8002212:	d8e5      	bhi.n	80021e0 <__gedf2+0x80>
 8002214:	d1da      	bne.n	80021cc <__gedf2+0x6c>
 8002216:	45c8      	cmp	r8, r9
 8002218:	d8e2      	bhi.n	80021e0 <__gedf2+0x80>
 800221a:	2000      	movs	r0, #0
 800221c:	45c8      	cmp	r8, r9
 800221e:	d2e4      	bcs.n	80021ea <__gedf2+0x8a>
 8002220:	e7d4      	b.n	80021cc <__gedf2+0x6c>
 8002222:	2000      	movs	r0, #0
 8002224:	2c00      	cmp	r4, #0
 8002226:	d0e0      	beq.n	80021ea <__gedf2+0x8a>
 8002228:	e7da      	b.n	80021e0 <__gedf2+0x80>
 800222a:	4311      	orrs	r1, r2
 800222c:	d103      	bne.n	8002236 <__gedf2+0xd6>
 800222e:	4584      	cmp	ip, r0
 8002230:	d1d6      	bne.n	80021e0 <__gedf2+0x80>
 8002232:	2000      	movs	r0, #0
 8002234:	e7d9      	b.n	80021ea <__gedf2+0x8a>
 8002236:	2002      	movs	r0, #2
 8002238:	4240      	negs	r0, r0
 800223a:	e7d6      	b.n	80021ea <__gedf2+0x8a>
 800223c:	4584      	cmp	ip, r0
 800223e:	d0e6      	beq.n	800220e <__gedf2+0xae>
 8002240:	e7ce      	b.n	80021e0 <__gedf2+0x80>
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	000007ff 	.word	0x000007ff

08002248 <__ledf2>:
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224a:	4657      	mov	r7, sl
 800224c:	464e      	mov	r6, r9
 800224e:	4645      	mov	r5, r8
 8002250:	46de      	mov	lr, fp
 8002252:	b5e0      	push	{r5, r6, r7, lr}
 8002254:	000d      	movs	r5, r1
 8002256:	030f      	lsls	r7, r1, #12
 8002258:	0004      	movs	r4, r0
 800225a:	4680      	mov	r8, r0
 800225c:	0fe8      	lsrs	r0, r5, #31
 800225e:	0b39      	lsrs	r1, r7, #12
 8002260:	4684      	mov	ip, r0
 8002262:	b083      	sub	sp, #12
 8002264:	0058      	lsls	r0, r3, #1
 8002266:	4f30      	ldr	r7, [pc, #192]	@ (8002328 <__ledf2+0xe0>)
 8002268:	0d40      	lsrs	r0, r0, #21
 800226a:	9101      	str	r1, [sp, #4]
 800226c:	031e      	lsls	r6, r3, #12
 800226e:	0069      	lsls	r1, r5, #1
 8002270:	4682      	mov	sl, r0
 8002272:	4691      	mov	r9, r2
 8002274:	0d49      	lsrs	r1, r1, #21
 8002276:	0b36      	lsrs	r6, r6, #12
 8002278:	0fd8      	lsrs	r0, r3, #31
 800227a:	42b9      	cmp	r1, r7
 800227c:	d020      	beq.n	80022c0 <__ledf2+0x78>
 800227e:	45ba      	cmp	sl, r7
 8002280:	d00f      	beq.n	80022a2 <__ledf2+0x5a>
 8002282:	2900      	cmp	r1, #0
 8002284:	d12b      	bne.n	80022de <__ledf2+0x96>
 8002286:	9901      	ldr	r1, [sp, #4]
 8002288:	430c      	orrs	r4, r1
 800228a:	4651      	mov	r1, sl
 800228c:	2900      	cmp	r1, #0
 800228e:	d137      	bne.n	8002300 <__ledf2+0xb8>
 8002290:	4332      	orrs	r2, r6
 8002292:	d038      	beq.n	8002306 <__ledf2+0xbe>
 8002294:	2c00      	cmp	r4, #0
 8002296:	d144      	bne.n	8002322 <__ledf2+0xda>
 8002298:	2800      	cmp	r0, #0
 800229a:	d119      	bne.n	80022d0 <__ledf2+0x88>
 800229c:	2001      	movs	r0, #1
 800229e:	4240      	negs	r0, r0
 80022a0:	e016      	b.n	80022d0 <__ledf2+0x88>
 80022a2:	4316      	orrs	r6, r2
 80022a4:	d113      	bne.n	80022ce <__ledf2+0x86>
 80022a6:	2900      	cmp	r1, #0
 80022a8:	d102      	bne.n	80022b0 <__ledf2+0x68>
 80022aa:	9f01      	ldr	r7, [sp, #4]
 80022ac:	4327      	orrs	r7, r4
 80022ae:	d0f3      	beq.n	8002298 <__ledf2+0x50>
 80022b0:	4584      	cmp	ip, r0
 80022b2:	d020      	beq.n	80022f6 <__ledf2+0xae>
 80022b4:	4663      	mov	r3, ip
 80022b6:	2002      	movs	r0, #2
 80022b8:	3b01      	subs	r3, #1
 80022ba:	4018      	ands	r0, r3
 80022bc:	3801      	subs	r0, #1
 80022be:	e007      	b.n	80022d0 <__ledf2+0x88>
 80022c0:	9f01      	ldr	r7, [sp, #4]
 80022c2:	4327      	orrs	r7, r4
 80022c4:	d103      	bne.n	80022ce <__ledf2+0x86>
 80022c6:	458a      	cmp	sl, r1
 80022c8:	d1f4      	bne.n	80022b4 <__ledf2+0x6c>
 80022ca:	4316      	orrs	r6, r2
 80022cc:	d01f      	beq.n	800230e <__ledf2+0xc6>
 80022ce:	2002      	movs	r0, #2
 80022d0:	b003      	add	sp, #12
 80022d2:	bcf0      	pop	{r4, r5, r6, r7}
 80022d4:	46bb      	mov	fp, r7
 80022d6:	46b2      	mov	sl, r6
 80022d8:	46a9      	mov	r9, r5
 80022da:	46a0      	mov	r8, r4
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022de:	4654      	mov	r4, sl
 80022e0:	2c00      	cmp	r4, #0
 80022e2:	d0e7      	beq.n	80022b4 <__ledf2+0x6c>
 80022e4:	4584      	cmp	ip, r0
 80022e6:	d1e5      	bne.n	80022b4 <__ledf2+0x6c>
 80022e8:	4551      	cmp	r1, sl
 80022ea:	dce3      	bgt.n	80022b4 <__ledf2+0x6c>
 80022ec:	db03      	blt.n	80022f6 <__ledf2+0xae>
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	42b3      	cmp	r3, r6
 80022f2:	d8df      	bhi.n	80022b4 <__ledf2+0x6c>
 80022f4:	d00f      	beq.n	8002316 <__ledf2+0xce>
 80022f6:	4663      	mov	r3, ip
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0cf      	beq.n	800229c <__ledf2+0x54>
 80022fc:	4660      	mov	r0, ip
 80022fe:	e7e7      	b.n	80022d0 <__ledf2+0x88>
 8002300:	2c00      	cmp	r4, #0
 8002302:	d0c9      	beq.n	8002298 <__ledf2+0x50>
 8002304:	e7d4      	b.n	80022b0 <__ledf2+0x68>
 8002306:	2000      	movs	r0, #0
 8002308:	2c00      	cmp	r4, #0
 800230a:	d0e1      	beq.n	80022d0 <__ledf2+0x88>
 800230c:	e7d2      	b.n	80022b4 <__ledf2+0x6c>
 800230e:	4584      	cmp	ip, r0
 8002310:	d1d0      	bne.n	80022b4 <__ledf2+0x6c>
 8002312:	2000      	movs	r0, #0
 8002314:	e7dc      	b.n	80022d0 <__ledf2+0x88>
 8002316:	45c8      	cmp	r8, r9
 8002318:	d8cc      	bhi.n	80022b4 <__ledf2+0x6c>
 800231a:	2000      	movs	r0, #0
 800231c:	45c8      	cmp	r8, r9
 800231e:	d2d7      	bcs.n	80022d0 <__ledf2+0x88>
 8002320:	e7e9      	b.n	80022f6 <__ledf2+0xae>
 8002322:	4584      	cmp	ip, r0
 8002324:	d0e3      	beq.n	80022ee <__ledf2+0xa6>
 8002326:	e7c5      	b.n	80022b4 <__ledf2+0x6c>
 8002328:	000007ff 	.word	0x000007ff

0800232c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002330:	f000 fce8 	bl	8002d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002334:	f000 f812 	bl	800235c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002338:	f000 f922 	bl	8002580 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800233c:	f000 f8f0 	bl	8002520 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8002340:	f000 f86a 	bl	8002418 <MX_ADC_Init>
  MX_TIM16_Init();
 8002344:	f000 f8c4 	bl	80024d0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim16); // Start the timer for time measurement
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <main+0x2c>)
 800234a:	0018      	movs	r0, r3
 800234c:	f002 f9bc 	bl	80046c8 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  
    Print_Averaged_ADC_Value();
 8002350:	f000 f978 	bl	8002644 <Print_Averaged_ADC_Value>
 8002354:	e7fc      	b.n	8002350 <main+0x24>
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	200000bc 	.word	0x200000bc

0800235c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b095      	sub	sp, #84	@ 0x54
 8002360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002362:	2420      	movs	r4, #32
 8002364:	193b      	adds	r3, r7, r4
 8002366:	0018      	movs	r0, r3
 8002368:	2330      	movs	r3, #48	@ 0x30
 800236a:	001a      	movs	r2, r3
 800236c:	2100      	movs	r1, #0
 800236e:	f002 fef3 	bl	8005158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002372:	2310      	movs	r3, #16
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	0018      	movs	r0, r3
 8002378:	2310      	movs	r3, #16
 800237a:	001a      	movs	r2, r3
 800237c:	2100      	movs	r1, #0
 800237e:	f002 feeb 	bl	8005158 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002382:	003b      	movs	r3, r7
 8002384:	0018      	movs	r0, r3
 8002386:	2310      	movs	r3, #16
 8002388:	001a      	movs	r2, r3
 800238a:	2100      	movs	r1, #0
 800238c:	f002 fee4 	bl	8005158 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002390:	0021      	movs	r1, r4
 8002392:	187b      	adds	r3, r7, r1
 8002394:	2212      	movs	r2, #18
 8002396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002398:	187b      	adds	r3, r7, r1
 800239a:	2201      	movs	r2, #1
 800239c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	2201      	movs	r2, #1
 80023a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	2210      	movs	r2, #16
 80023a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	2210      	movs	r2, #16
 80023ae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2200      	movs	r2, #0
 80023b4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	0018      	movs	r0, r3
 80023ba:	f001 fc09 	bl	8003bd0 <HAL_RCC_OscConfig>
 80023be:	1e03      	subs	r3, r0, #0
 80023c0:	d001      	beq.n	80023c6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80023c2:	f000 fb43 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c6:	2110      	movs	r1, #16
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	2207      	movs	r2, #7
 80023cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	2100      	movs	r1, #0
 80023e4:	0018      	movs	r0, r3
 80023e6:	f001 ff0d 	bl	8004204 <HAL_RCC_ClockConfig>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023ee:	f000 fb2d 	bl	8002a4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023f2:	003b      	movs	r3, r7
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80023f8:	003b      	movs	r3, r7
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fe:	003b      	movs	r3, r7
 8002400:	0018      	movs	r0, r3
 8002402:	f002 f843 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800240a:	f000 fb1f 	bl	8002a4c <Error_Handler>
  }
}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	b015      	add	sp, #84	@ 0x54
 8002414:	bd90      	pop	{r4, r7, pc}
	...

08002418 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	0018      	movs	r0, r3
 8002422:	230c      	movs	r3, #12
 8002424:	001a      	movs	r2, r3
 8002426:	2100      	movs	r1, #0
 8002428:	f002 fe96 	bl	8005158 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800242c:	4b26      	ldr	r3, [pc, #152]	@ (80024c8 <MX_ADC_Init+0xb0>)
 800242e:	4a27      	ldr	r2, [pc, #156]	@ (80024cc <MX_ADC_Init+0xb4>)
 8002430:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002432:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002438:	4b23      	ldr	r3, [pc, #140]	@ (80024c8 <MX_ADC_Init+0xb0>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800243e:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002444:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002446:	2201      	movs	r2, #1
 8002448:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800244a:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <MX_ADC_Init+0xb0>)
 800244c:	2204      	movs	r2, #4
 800244e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002452:	2200      	movs	r2, #0
 8002454:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002456:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002458:	2200      	movs	r2, #0
 800245a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800245c:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <MX_ADC_Init+0xb0>)
 800245e:	2200      	movs	r2, #0
 8002460:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002464:	2200      	movs	r2, #0
 8002466:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002468:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <MX_ADC_Init+0xb0>)
 800246a:	22c2      	movs	r2, #194	@ 0xc2
 800246c:	32ff      	adds	r2, #255	@ 0xff
 800246e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002472:	2200      	movs	r2, #0
 8002474:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002476:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002478:	2224      	movs	r2, #36	@ 0x24
 800247a:	2100      	movs	r1, #0
 800247c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002480:	2201      	movs	r2, #1
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002484:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <MX_ADC_Init+0xb0>)
 8002486:	0018      	movs	r0, r3
 8002488:	f000 fca0 	bl	8002dcc <HAL_ADC_Init>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d001      	beq.n	8002494 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002490:	f000 fadc 	bl	8002a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2280      	movs	r2, #128	@ 0x80
 800249e:	0152      	lsls	r2, r2, #5
 80024a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2280      	movs	r2, #128	@ 0x80
 80024a6:	0552      	lsls	r2, r2, #21
 80024a8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024aa:	1d3a      	adds	r2, r7, #4
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <MX_ADC_Init+0xb0>)
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 ff03 	bl	80032bc <HAL_ADC_ConfigChannel>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80024ba:	f000 fac7 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b004      	add	sp, #16
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	2000007c 	.word	0x2000007c
 80024cc:	40012400 	.word	0x40012400

080024d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <MX_TIM16_Init+0x44>)
 80024d6:	4a10      	ldr	r2, [pc, #64]	@ (8002518 <MX_TIM16_Init+0x48>)
 80024d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8-1;
 80024da:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <MX_TIM16_Init+0x44>)
 80024dc:	2207      	movs	r2, #7
 80024de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <MX_TIM16_Init+0x44>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <MX_TIM16_Init+0x44>)
 80024e8:	4a0c      	ldr	r2, [pc, #48]	@ (800251c <MX_TIM16_Init+0x4c>)
 80024ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <MX_TIM16_Init+0x44>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80024f2:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <MX_TIM16_Init+0x44>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <MX_TIM16_Init+0x44>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80024fe:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <MX_TIM16_Init+0x44>)
 8002500:	0018      	movs	r0, r3
 8002502:	f002 f891 	bl	8004628 <HAL_TIM_Base_Init>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800250a:	f000 fa9f 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200000bc 	.word	0x200000bc
 8002518:	40014400 	.word	0x40014400
 800251c:	0000ffff 	.word	0x0000ffff

08002520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 8002526:	4a15      	ldr	r2, [pc, #84]	@ (800257c <MX_USART1_UART_Init+0x5c>)
 8002528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800252a:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 800252c:	22e1      	movs	r2, #225	@ 0xe1
 800252e:	0252      	lsls	r2, r2, #9
 8002530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002532:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002538:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 8002546:	220c      	movs	r2, #12
 8002548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 800255e:	2200      	movs	r2, #0
 8002560:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002562:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <MX_USART1_UART_Init+0x58>)
 8002564:	0018      	movs	r0, r3
 8002566:	f002 f977 	bl	8004858 <HAL_UART_Init>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d001      	beq.n	8002572 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800256e:	f000 fa6d 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000104 	.word	0x20000104
 800257c:	40013800 	.word	0x40013800

08002580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002586:	240c      	movs	r4, #12
 8002588:	193b      	adds	r3, r7, r4
 800258a:	0018      	movs	r0, r3
 800258c:	2314      	movs	r3, #20
 800258e:	001a      	movs	r2, r3
 8002590:	2100      	movs	r1, #0
 8002592:	f002 fde1 	bl	8005158 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b29      	ldr	r3, [pc, #164]	@ (800263c <MX_GPIO_Init+0xbc>)
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	4b28      	ldr	r3, [pc, #160]	@ (800263c <MX_GPIO_Init+0xbc>)
 800259c:	2180      	movs	r1, #128	@ 0x80
 800259e:	0289      	lsls	r1, r1, #10
 80025a0:	430a      	orrs	r2, r1
 80025a2:	615a      	str	r2, [r3, #20]
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <MX_GPIO_Init+0xbc>)
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	029b      	lsls	r3, r3, #10
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	4b22      	ldr	r3, [pc, #136]	@ (800263c <MX_GPIO_Init+0xbc>)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	4b21      	ldr	r3, [pc, #132]	@ (800263c <MX_GPIO_Init+0xbc>)
 80025b8:	2180      	movs	r1, #128	@ 0x80
 80025ba:	02c9      	lsls	r1, r1, #11
 80025bc:	430a      	orrs	r2, r1
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	4b1e      	ldr	r3, [pc, #120]	@ (800263c <MX_GPIO_Init+0xbc>)
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	02db      	lsls	r3, r3, #11
 80025c8:	4013      	ands	r3, r2
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TogglePower_GPIO_Port, TogglePower_Pin, GPIO_PIN_RESET);
 80025ce:	2390      	movs	r3, #144	@ 0x90
 80025d0:	05db      	lsls	r3, r3, #23
 80025d2:	2200      	movs	r2, #0
 80025d4:	2101      	movs	r1, #1
 80025d6:	0018      	movs	r0, r3
 80025d8:	f001 fadc 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80025dc:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <MX_GPIO_Init+0xc0>)
 80025de:	2200      	movs	r2, #0
 80025e0:	2108      	movs	r1, #8
 80025e2:	0018      	movs	r0, r3
 80025e4:	f001 fad6 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TogglePower_Pin */
  GPIO_InitStruct.Pin = TogglePower_Pin;
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ee:	193b      	adds	r3, r7, r4
 80025f0:	2201      	movs	r2, #1
 80025f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	193b      	adds	r3, r7, r4
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TogglePower_GPIO_Port, &GPIO_InitStruct);
 8002600:	193a      	adds	r2, r7, r4
 8002602:	2390      	movs	r3, #144	@ 0x90
 8002604:	05db      	lsls	r3, r3, #23
 8002606:	0011      	movs	r1, r2
 8002608:	0018      	movs	r0, r3
 800260a:	f001 f95b 	bl	80038c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800260e:	0021      	movs	r1, r4
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2208      	movs	r2, #8
 8002614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2201      	movs	r2, #1
 800261a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	187b      	adds	r3, r7, r1
 8002624:	2200      	movs	r2, #0
 8002626:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002628:	187b      	adds	r3, r7, r1
 800262a:	4a05      	ldr	r2, [pc, #20]	@ (8002640 <MX_GPIO_Init+0xc0>)
 800262c:	0019      	movs	r1, r3
 800262e:	0010      	movs	r0, r2
 8002630:	f001 f948 	bl	80038c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b009      	add	sp, #36	@ 0x24
 800263a:	bd90      	pop	{r4, r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	48000400 	.word	0x48000400

08002644 <Print_Averaged_ADC_Value>:

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, total_length_written, HAL_MAX_DELAY);
  }
}

void Print_Averaged_ADC_Value(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b092      	sub	sp, #72	@ 0x48
 8002648:	af00      	add	r7, sp, #0
  // First, collect 100 samples in array
  // when full, calculate average and print to UART

  iters++;
 800264a:	4b25      	ldr	r3, [pc, #148]	@ (80026e0 <Print_Averaged_ADC_Value+0x9c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <Print_Averaged_ADC_Value+0x9c>)
 8002652:	601a      	str	r2, [r3, #0]
  adcValues[iters - 1] = Get_ADC_Value();
 8002654:	f000 f84e 	bl	80026f4 <Get_ADC_Value>
 8002658:	0001      	movs	r1, r0
 800265a:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <Print_Averaged_ADC_Value+0x9c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	1e5a      	subs	r2, r3, #1
 8002660:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <Print_Averaged_ADC_Value+0xa0>)
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	50d1      	str	r1, [r2, r3]

  if (iters % itersMax == 0){
 8002666:	4b1e      	ldr	r3, [pc, #120]	@ (80026e0 <Print_Averaged_ADC_Value+0x9c>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b1f      	ldr	r3, [pc, #124]	@ (80026e8 <Print_Averaged_ADC_Value+0xa4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0019      	movs	r1, r3
 8002670:	0010      	movs	r0, r2
 8002672:	f7fd fec3 	bl	80003fc <__aeabi_idivmod>
 8002676:	1e0b      	subs	r3, r1, #0
 8002678:	d12e      	bne.n	80026d8 <Print_Averaged_ADC_Value+0x94>
    // Calculate average
    uint32_t sum = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	647b      	str	r3, [r7, #68]	@ 0x44
    for (int i = 0; i < itersMax; i++){
 800267e:	2300      	movs	r3, #0
 8002680:	643b      	str	r3, [r7, #64]	@ 0x40
 8002682:	e009      	b.n	8002698 <Print_Averaged_ADC_Value+0x54>
      sum += adcValues[i];
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <Print_Averaged_ADC_Value+0xa0>)
 8002686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	58d3      	ldr	r3, [r2, r3]
 800268c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800268e:	18d3      	adds	r3, r2, r3
 8002690:	647b      	str	r3, [r7, #68]	@ 0x44
    for (int i = 0; i < itersMax; i++){
 8002692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002694:	3301      	adds	r3, #1
 8002696:	643b      	str	r3, [r7, #64]	@ 0x40
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <Print_Averaged_ADC_Value+0xa4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800269e:	429a      	cmp	r2, r3
 80026a0:	dbf0      	blt.n	8002684 <Print_Averaged_ADC_Value+0x40>
    }
    int average = sum / itersMax;
 80026a2:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <Print_Averaged_ADC_Value+0xa4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0019      	movs	r1, r3
 80026a8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80026aa:	f7fd fd37 	bl	800011c <__udivsi3>
 80026ae:	0003      	movs	r3, r0
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Print to UART
    char buffer[50];
    int length_written = snprintf(buffer, sizeof(buffer), "Average ADC Value: %d\r\n", average);
 80026b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b4:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <Print_Averaged_ADC_Value+0xa8>)
 80026b6:	1d38      	adds	r0, r7, #4
 80026b8:	2132      	movs	r1, #50	@ 0x32
 80026ba:	f002 fd19 	bl	80050f0 <sniprintf>
 80026be:	0003      	movs	r3, r0
 80026c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length_written, HAL_MAX_DELAY);
 80026c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	2301      	movs	r3, #1
 80026c8:	425b      	negs	r3, r3
 80026ca:	1d39      	adds	r1, r7, #4
 80026cc:	4808      	ldr	r0, [pc, #32]	@ (80026f0 <Print_Averaged_ADC_Value+0xac>)
 80026ce:	f002 f917 	bl	8004900 <HAL_UART_Transmit>

    iters = 0; // Reset the counter
 80026d2:	4b03      	ldr	r3, [pc, #12]	@ (80026e0 <Print_Averaged_ADC_Value+0x9c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
  }
}
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b012      	add	sp, #72	@ 0x48
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000018c 	.word	0x2000018c
 80026e4:	20000190 	.word	0x20000190
 80026e8:	20000000 	.word	0x20000000
 80026ec:	08005a78 	.word	0x08005a78
 80026f0:	20000104 	.word	0x20000104

080026f4 <Get_ADC_Value>:

int Get_ADC_Value(void){
 80026f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f6:	b0e1      	sub	sp, #388	@ 0x184
 80026f8:	af10      	add	r7, sp, #64	@ 0x40
  HAL_ADC_Start(&hadc);
 80026fa:	4bc9      	ldr	r3, [pc, #804]	@ (8002a20 <Get_ADC_Value+0x32c>)
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 fca5 	bl	800304c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002702:	2301      	movs	r3, #1
 8002704:	425a      	negs	r2, r3
 8002706:	4bc6      	ldr	r3, [pc, #792]	@ (8002a20 <Get_ADC_Value+0x32c>)
 8002708:	0011      	movs	r1, r2
 800270a:	0018      	movs	r0, r3
 800270c:	f000 fd32 	bl	8003174 <HAL_ADC_PollForConversion>
  uint16_t adcValue = (uint16_t)HAL_ADC_GetValue(&hadc);
 8002710:	4bc3      	ldr	r3, [pc, #780]	@ (8002a20 <Get_ADC_Value+0x32c>)
 8002712:	0018      	movs	r0, r3
 8002714:	f000 fdc6 	bl	80032a4 <HAL_ADC_GetValue>
 8002718:	0002      	movs	r2, r0
 800271a:	2693      	movs	r6, #147	@ 0x93
 800271c:	0076      	lsls	r6, r6, #1
 800271e:	2318      	movs	r3, #24
 8002720:	18f1      	adds	r1, r6, r3
 8002722:	19cb      	adds	r3, r1, r7
 8002724:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Stop(&hadc);
 8002726:	4bbe      	ldr	r3, [pc, #760]	@ (8002a20 <Get_ADC_Value+0x32c>)
 8002728:	0018      	movs	r0, r3
 800272a:	f000 fce3 	bl	80030f4 <HAL_ADC_Stop>

  if (adcValue == 0) {
 800272e:	2318      	movs	r3, #24
 8002730:	18f3      	adds	r3, r6, r3
 8002732:	19db      	adds	r3, r3, r7
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <Get_ADC_Value+0x4a>
    return 0;
 800273a:	2300      	movs	r3, #0
 800273c:	e16c      	b.n	8002a18 <Get_ADC_Value+0x324>
  }

  //int adcErrorTerm = (int)(2.994 + (1.730E-01 * adcValue) - (1.295E-04 * pow(adcValue, 2)) + (1.613E-08 * pow(adcValue, 3)));

  // All constant multiplied by 1E11 to avoid floating point arithmetic
  int64_t preadcErrorTerm = (int64_t)(299400000000 + (17300000000 * adcValue) - (12950000 * adcValue * adcValue) + (1613 * adcValue * adcValue * adcValue));
 800273e:	2693      	movs	r6, #147	@ 0x93
 8002740:	0076      	lsls	r6, r6, #1
 8002742:	2018      	movs	r0, #24
 8002744:	1833      	adds	r3, r6, r0
 8002746:	19db      	adds	r3, r3, r7
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	4ab4      	ldr	r2, [pc, #720]	@ (8002a24 <Get_ADC_Value+0x330>)
 8002754:	2304      	movs	r3, #4
 8002756:	6938      	ldr	r0, [r7, #16]
 8002758:	6979      	ldr	r1, [r7, #20]
 800275a:	f7fd fe55 	bl	8000408 <__aeabi_lmul>
 800275e:	0002      	movs	r2, r0
 8002760:	000b      	movs	r3, r1
 8002762:	0010      	movs	r0, r2
 8002764:	0019      	movs	r1, r3
 8002766:	4ab0      	ldr	r2, [pc, #704]	@ (8002a28 <Get_ADC_Value+0x334>)
 8002768:	2345      	movs	r3, #69	@ 0x45
 800276a:	1812      	adds	r2, r2, r0
 800276c:	414b      	adcs	r3, r1
 800276e:	2018      	movs	r0, #24
 8002770:	1831      	adds	r1, r6, r0
 8002772:	19c9      	adds	r1, r1, r7
 8002774:	8809      	ldrh	r1, [r1, #0]
 8002776:	1830      	adds	r0, r6, r0
 8002778:	19c0      	adds	r0, r0, r7
 800277a:	8800      	ldrh	r0, [r0, #0]
 800277c:	4341      	muls	r1, r0
 800277e:	48ab      	ldr	r0, [pc, #684]	@ (8002a2c <Get_ADC_Value+0x338>)
 8002780:	4341      	muls	r1, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	17c9      	asrs	r1, r1, #31
 8002786:	60f9      	str	r1, [r7, #12]
 8002788:	68b8      	ldr	r0, [r7, #8]
 800278a:	68f9      	ldr	r1, [r7, #12]
 800278c:	1a12      	subs	r2, r2, r0
 800278e:	418b      	sbcs	r3, r1
 8002790:	2018      	movs	r0, #24
 8002792:	1831      	adds	r1, r6, r0
 8002794:	19c9      	adds	r1, r1, r7
 8002796:	8809      	ldrh	r1, [r1, #0]
 8002798:	1830      	adds	r0, r6, r0
 800279a:	19c0      	adds	r0, r0, r7
 800279c:	8800      	ldrh	r0, [r0, #0]
 800279e:	4341      	muls	r1, r0
 80027a0:	2018      	movs	r0, #24
 80027a2:	1830      	adds	r0, r6, r0
 80027a4:	19c0      	adds	r0, r0, r7
 80027a6:	8800      	ldrh	r0, [r0, #0]
 80027a8:	4341      	muls	r1, r0
 80027aa:	48a1      	ldr	r0, [pc, #644]	@ (8002a30 <Get_ADC_Value+0x33c>)
 80027ac:	4341      	muls	r1, r0
 80027ae:	000c      	movs	r4, r1
 80027b0:	17c9      	asrs	r1, r1, #31
 80027b2:	000d      	movs	r5, r1
 80027b4:	1912      	adds	r2, r2, r4
 80027b6:	416b      	adcs	r3, r5
 80027b8:	218c      	movs	r1, #140	@ 0x8c
 80027ba:	0049      	lsls	r1, r1, #1
 80027bc:	2518      	movs	r5, #24
 80027be:	1948      	adds	r0, r1, r5
 80027c0:	19c0      	adds	r0, r0, r7
 80027c2:	6002      	str	r2, [r0, #0]
 80027c4:	6043      	str	r3, [r0, #4]
  //adcErrorTerm = adcErrorTerm / 1E11;
  //int64_t adcErrorTerm = 0;

  int32_t adcErrorTerm = (int32_t)(preadcErrorTerm / 1E11);
 80027c6:	194b      	adds	r3, r1, r5
 80027c8:	19db      	adds	r3, r3, r7
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	f7fd fe83 	bl	80004d8 <__aeabi_l2d>
 80027d2:	22e8      	movs	r2, #232	@ 0xe8
 80027d4:	0612      	lsls	r2, r2, #24
 80027d6:	4b97      	ldr	r3, [pc, #604]	@ (8002a34 <Get_ADC_Value+0x340>)
 80027d8:	f7fe f9f8 	bl	8000bcc <__aeabi_ddiv>
 80027dc:	0002      	movs	r2, r0
 80027de:	000b      	movs	r3, r1
 80027e0:	0010      	movs	r0, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	f7ff fb70 	bl	8001ec8 <__aeabi_d2iz>
 80027e8:	0003      	movs	r3, r0
 80027ea:	248a      	movs	r4, #138	@ 0x8a
 80027ec:	0064      	lsls	r4, r4, #1
 80027ee:	1962      	adds	r2, r4, r5
 80027f0:	19d2      	adds	r2, r2, r7
 80027f2:	6013      	str	r3, [r2, #0]

  int64_t term1 = 2994000000000;
 80027f4:	4a90      	ldr	r2, [pc, #576]	@ (8002a38 <Get_ADC_Value+0x344>)
 80027f6:	4b91      	ldr	r3, [pc, #580]	@ (8002a3c <Get_ADC_Value+0x348>)
 80027f8:	2184      	movs	r1, #132	@ 0x84
 80027fa:	0049      	lsls	r1, r1, #1
 80027fc:	1949      	adds	r1, r1, r5
 80027fe:	19c8      	adds	r0, r1, r7
 8002800:	6002      	str	r2, [r0, #0]
 8002802:	6043      	str	r3, [r0, #4]
  int64_t term2 = 17300000000 * adcValue;
 8002804:	1973      	adds	r3, r6, r5
 8002806:	19db      	adds	r3, r3, r7
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	4a84      	ldr	r2, [pc, #528]	@ (8002a24 <Get_ADC_Value+0x330>)
 8002814:	2304      	movs	r3, #4
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	f7fd fdf5 	bl	8000408 <__aeabi_lmul>
 800281e:	0002      	movs	r2, r0
 8002820:	000b      	movs	r3, r1
 8002822:	218c      	movs	r1, #140	@ 0x8c
 8002824:	0049      	lsls	r1, r1, #1
 8002826:	1878      	adds	r0, r7, r1
 8002828:	6002      	str	r2, [r0, #0]
 800282a:	6043      	str	r3, [r0, #4]
  int64_t term3 = 12950000 * adcValue * adcValue;
 800282c:	0029      	movs	r1, r5
 800282e:	1872      	adds	r2, r6, r1
 8002830:	19d3      	adds	r3, r2, r7
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	0035      	movs	r5, r6
 8002836:	1872      	adds	r2, r6, r1
 8002838:	19d2      	adds	r2, r2, r7
 800283a:	8812      	ldrh	r2, [r2, #0]
 800283c:	4353      	muls	r3, r2
 800283e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a2c <Get_ADC_Value+0x338>)
 8002840:	4353      	muls	r3, r2
 8002842:	26f8      	movs	r6, #248	@ 0xf8
 8002844:	0008      	movs	r0, r1
 8002846:	1832      	adds	r2, r6, r0
 8002848:	19d2      	adds	r2, r2, r7
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	17db      	asrs	r3, r3, #31
 800284e:	22fc      	movs	r2, #252	@ 0xfc
 8002850:	1812      	adds	r2, r2, r0
 8002852:	19d2      	adds	r2, r2, r7
 8002854:	6013      	str	r3, [r2, #0]
  int64_t term4 = 1613 * adcValue * adcValue * adcValue;
 8002856:	182a      	adds	r2, r5, r0
 8002858:	19d3      	adds	r3, r2, r7
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	182a      	adds	r2, r5, r0
 800285e:	19d2      	adds	r2, r2, r7
 8002860:	8812      	ldrh	r2, [r2, #0]
 8002862:	4353      	muls	r3, r2
 8002864:	182a      	adds	r2, r5, r0
 8002866:	19d2      	adds	r2, r2, r7
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	4353      	muls	r3, r2
 800286c:	4a70      	ldr	r2, [pc, #448]	@ (8002a30 <Get_ADC_Value+0x33c>)
 800286e:	4353      	muls	r3, r2
 8002870:	22f0      	movs	r2, #240	@ 0xf0
 8002872:	1812      	adds	r2, r2, r0
 8002874:	19d2      	adds	r2, r2, r7
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	17db      	asrs	r3, r3, #31
 800287a:	22f4      	movs	r2, #244	@ 0xf4
 800287c:	1812      	adds	r2, r2, r0
 800287e:	19d2      	adds	r2, r2, r7
 8002880:	6013      	str	r3, [r2, #0]
  int64_t print1 = term1 * term2;
 8002882:	238c      	movs	r3, #140	@ 0x8c
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2184      	movs	r1, #132	@ 0x84
 800288e:	0049      	lsls	r1, r1, #1
 8002890:	1809      	adds	r1, r1, r0
 8002892:	19c8      	adds	r0, r1, r7
 8002894:	6841      	ldr	r1, [r0, #4]
 8002896:	6800      	ldr	r0, [r0, #0]
 8002898:	f7fd fdb6 	bl	8000408 <__aeabi_lmul>
 800289c:	0002      	movs	r2, r0
 800289e:	000b      	movs	r3, r1
 80028a0:	20e8      	movs	r0, #232	@ 0xe8
 80028a2:	2118      	movs	r1, #24
 80028a4:	1841      	adds	r1, r0, r1
 80028a6:	19c9      	adds	r1, r1, r7
 80028a8:	600a      	str	r2, [r1, #0]
 80028aa:	604b      	str	r3, [r1, #4]
  int64_t print2 = print1 * term3;
 80028ac:	2118      	movs	r1, #24
 80028ae:	1872      	adds	r2, r6, r1
 80028b0:	19d3      	adds	r3, r2, r7
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	000e      	movs	r6, r1
 80028b8:	1841      	adds	r1, r0, r1
 80028ba:	19c9      	adds	r1, r1, r7
 80028bc:	6808      	ldr	r0, [r1, #0]
 80028be:	6849      	ldr	r1, [r1, #4]
 80028c0:	f7fd fda2 	bl	8000408 <__aeabi_lmul>
 80028c4:	0002      	movs	r2, r0
 80028c6:	000b      	movs	r3, r1
 80028c8:	21e0      	movs	r1, #224	@ 0xe0
 80028ca:	1988      	adds	r0, r1, r6
 80028cc:	19c6      	adds	r6, r0, r7
 80028ce:	6032      	str	r2, [r6, #0]
 80028d0:	6073      	str	r3, [r6, #4]
  int64_t print3 = print2 * term4;
 80028d2:	20f0      	movs	r0, #240	@ 0xf0
 80028d4:	2618      	movs	r6, #24
 80028d6:	1982      	adds	r2, r0, r6
 80028d8:	19d6      	adds	r6, r2, r7
 80028da:	6832      	ldr	r2, [r6, #0]
 80028dc:	6873      	ldr	r3, [r6, #4]
 80028de:	2618      	movs	r6, #24
 80028e0:	1988      	adds	r0, r1, r6
 80028e2:	19c6      	adds	r6, r0, r7
 80028e4:	6830      	ldr	r0, [r6, #0]
 80028e6:	6871      	ldr	r1, [r6, #4]
 80028e8:	f7fd fd8e 	bl	8000408 <__aeabi_lmul>
 80028ec:	0002      	movs	r2, r0
 80028ee:	000b      	movs	r3, r1
 80028f0:	26d8      	movs	r6, #216	@ 0xd8
 80028f2:	2118      	movs	r1, #24
 80028f4:	1870      	adds	r0, r6, r1
 80028f6:	19c0      	adds	r0, r0, r7
 80028f8:	6002      	str	r2, [r0, #0]
 80028fa:	6043      	str	r3, [r0, #4]
  int64_t print4 = print3 / 1E11;
 80028fc:	1870      	adds	r0, r6, r1
 80028fe:	19c0      	adds	r0, r0, r7
 8002900:	6841      	ldr	r1, [r0, #4]
 8002902:	6800      	ldr	r0, [r0, #0]
 8002904:	f7fd fde8 	bl	80004d8 <__aeabi_l2d>
 8002908:	22e8      	movs	r2, #232	@ 0xe8
 800290a:	0612      	lsls	r2, r2, #24
 800290c:	4b49      	ldr	r3, [pc, #292]	@ (8002a34 <Get_ADC_Value+0x340>)
 800290e:	f7fe f95d 	bl	8000bcc <__aeabi_ddiv>
 8002912:	0002      	movs	r2, r0
 8002914:	000b      	movs	r3, r1
 8002916:	0010      	movs	r0, r2
 8002918:	0019      	movs	r1, r3
 800291a:	f7fd fda3 	bl	8000464 <__aeabi_d2lz>
 800291e:	0002      	movs	r2, r0
 8002920:	000b      	movs	r3, r1
 8002922:	20d0      	movs	r0, #208	@ 0xd0
 8002924:	2118      	movs	r1, #24
 8002926:	1840      	adds	r0, r0, r1
 8002928:	19c1      	adds	r1, r0, r7
 800292a:	600a      	str	r2, [r1, #0]
 800292c:	604b      	str	r3, [r1, #4]

  // print error term
  char buffer[200];
  int length_written = snprintf(buffer, sizeof(buffer), "%ld, %lld, %lld, %lld, %lld, %lld, %lld, %lld, %lld\r\n", adcErrorTerm, term1, term2, term3, term4, print1, print2, print3, print4);
 800292e:	0026      	movs	r6, r4
 8002930:	2218      	movs	r2, #24
 8002932:	18a1      	adds	r1, r4, r2
 8002934:	19cc      	adds	r4, r1, r7
 8002936:	6824      	ldr	r4, [r4, #0]
 8002938:	4941      	ldr	r1, [pc, #260]	@ (8002a40 <Get_ADC_Value+0x34c>)
 800293a:	201c      	movs	r0, #28
 800293c:	1838      	adds	r0, r7, r0
 800293e:	23d0      	movs	r3, #208	@ 0xd0
 8002940:	189a      	adds	r2, r3, r2
 8002942:	19d3      	adds	r3, r2, r7
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	920e      	str	r2, [sp, #56]	@ 0x38
 800294a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800294c:	22d8      	movs	r2, #216	@ 0xd8
 800294e:	2318      	movs	r3, #24
 8002950:	18d2      	adds	r2, r2, r3
 8002952:	19d2      	adds	r2, r2, r7
 8002954:	6853      	ldr	r3, [r2, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	920c      	str	r2, [sp, #48]	@ 0x30
 800295a:	930d      	str	r3, [sp, #52]	@ 0x34
 800295c:	23e0      	movs	r3, #224	@ 0xe0
 800295e:	2218      	movs	r2, #24
 8002960:	189a      	adds	r2, r3, r2
 8002962:	19d3      	adds	r3, r2, r7
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	920a      	str	r2, [sp, #40]	@ 0x28
 800296a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800296c:	23e8      	movs	r3, #232	@ 0xe8
 800296e:	2218      	movs	r2, #24
 8002970:	189a      	adds	r2, r3, r2
 8002972:	19d3      	adds	r3, r2, r7
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	9208      	str	r2, [sp, #32]
 800297a:	9309      	str	r3, [sp, #36]	@ 0x24
 800297c:	22f0      	movs	r2, #240	@ 0xf0
 800297e:	2318      	movs	r3, #24
 8002980:	18d2      	adds	r2, r2, r3
 8002982:	19d3      	adds	r3, r2, r7
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	9206      	str	r2, [sp, #24]
 800298a:	9307      	str	r3, [sp, #28]
 800298c:	22f8      	movs	r2, #248	@ 0xf8
 800298e:	2318      	movs	r3, #24
 8002990:	18d2      	adds	r2, r2, r3
 8002992:	19d2      	adds	r2, r2, r7
 8002994:	6853      	ldr	r3, [r2, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	9204      	str	r2, [sp, #16]
 800299a:	9305      	str	r3, [sp, #20]
 800299c:	238c      	movs	r3, #140	@ 0x8c
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	18fa      	adds	r2, r7, r3
 80029a2:	6853      	ldr	r3, [r2, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	9202      	str	r2, [sp, #8]
 80029a8:	9303      	str	r3, [sp, #12]
 80029aa:	2384      	movs	r3, #132	@ 0x84
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2218      	movs	r2, #24
 80029b0:	189b      	adds	r3, r3, r2
 80029b2:	19db      	adds	r3, r3, r7
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	9200      	str	r2, [sp, #0]
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	0023      	movs	r3, r4
 80029be:	000a      	movs	r2, r1
 80029c0:	21c8      	movs	r1, #200	@ 0xc8
 80029c2:	f002 fb95 	bl	80050f0 <sniprintf>
 80029c6:	0003      	movs	r3, r0
 80029c8:	22cc      	movs	r2, #204	@ 0xcc
 80029ca:	2418      	movs	r4, #24
 80029cc:	1911      	adds	r1, r2, r4
 80029ce:	19c9      	adds	r1, r1, r7
 80029d0:	600b      	str	r3, [r1, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length_written, HAL_MAX_DELAY);
 80029d2:	1913      	adds	r3, r2, r4
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	2301      	movs	r3, #1
 80029dc:	425b      	negs	r3, r3
 80029de:	211c      	movs	r1, #28
 80029e0:	1879      	adds	r1, r7, r1
 80029e2:	4818      	ldr	r0, [pc, #96]	@ (8002a44 <Get_ADC_Value+0x350>)
 80029e4:	f001 ff8c 	bl	8004900 <HAL_UART_Transmit>


  if (adcValue - adcErrorTerm > 5000){
 80029e8:	192b      	adds	r3, r5, r4
 80029ea:	19db      	adds	r3, r3, r7
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	1933      	adds	r3, r6, r4
 80029f0:	19db      	adds	r3, r3, r7
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <Get_ADC_Value+0x354>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	dd01      	ble.n	8002a00 <Get_ADC_Value+0x30c>
    return 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e00b      	b.n	8002a18 <Get_ADC_Value+0x324>
  }

  return adcValue - adcErrorTerm;
 8002a00:	2393      	movs	r3, #147	@ 0x93
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2118      	movs	r1, #24
 8002a06:	185b      	adds	r3, r3, r1
 8002a08:	19db      	adds	r3, r3, r7
 8002a0a:	881a      	ldrh	r2, [r3, #0]
 8002a0c:	238a      	movs	r3, #138	@ 0x8a
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	185b      	adds	r3, r3, r1
 8002a12:	19db      	adds	r3, r3, r7
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1ad3      	subs	r3, r2, r3
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b051      	add	sp, #324	@ 0x144
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a20:	2000007c 	.word	0x2000007c
 8002a24:	07290d00 	.word	0x07290d00
 8002a28:	b5a17200 	.word	0xb5a17200
 8002a2c:	00c599f0 	.word	0x00c599f0
 8002a30:	0000064d 	.word	0x0000064d
 8002a34:	42374876 	.word	0x42374876
 8002a38:	184e7400 	.word	0x184e7400
 8002a3c:	000002b9 	.word	0x000002b9
 8002a40:	08005a90 	.word	0x08005a90
 8002a44:	20000104 	.word	0x20000104
 8002a48:	00001388 	.word	0x00001388

08002a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	e7fd      	b.n	8002a54 <Error_Handler+0x8>

08002a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	430a      	orrs	r2, r1
 8002a68:	619a      	str	r2, [r3, #24]
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a7c:	2180      	movs	r1, #128	@ 0x80
 8002a7e:	0549      	lsls	r1, r1, #21
 8002a80:	430a      	orrs	r2, r1
 8002a82:	61da      	str	r2, [r3, #28]
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	055b      	lsls	r3, r3, #21
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b002      	add	sp, #8
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b08b      	sub	sp, #44	@ 0x2c
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	2414      	movs	r4, #20
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	0018      	movs	r0, r3
 8002aae:	2314      	movs	r3, #20
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	f002 fb50 	bl	8005158 <memset>
  if(hadc->Instance==ADC1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	@ (8002b24 <HAL_ADC_MspInit+0x84>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d12b      	bne.n	8002b1a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ac2:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_ADC_MspInit+0x88>)
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <HAL_ADC_MspInit+0x88>)
 8002ac8:	2180      	movs	r1, #128	@ 0x80
 8002aca:	0089      	lsls	r1, r1, #2
 8002acc:	430a      	orrs	r2, r1
 8002ace:	619a      	str	r2, [r3, #24]
 8002ad0:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_ADC_MspInit+0x88>)
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <HAL_ADC_MspInit+0x88>)
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_ADC_MspInit+0x88>)
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	0289      	lsls	r1, r1, #10
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	615a      	str	r2, [r3, #20]
 8002aec:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <HAL_ADC_MspInit+0x88>)
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	029b      	lsls	r3, r3, #10
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2282      	movs	r2, #130	@ 0x82
 8002afe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	2203      	movs	r2, #3
 8002b04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	193a      	adds	r2, r7, r4
 8002b0e:	2390      	movs	r3, #144	@ 0x90
 8002b10:	05db      	lsls	r3, r3, #23
 8002b12:	0011      	movs	r1, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f000 fed5 	bl	80038c4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b00b      	add	sp, #44	@ 0x2c
 8002b20:	bd90      	pop	{r4, r7, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	40012400 	.word	0x40012400
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <HAL_TIM_Base_MspInit+0x38>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10d      	bne.n	8002b5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <HAL_TIM_Base_MspInit+0x3c>)
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_TIM_Base_MspInit+0x3c>)
 8002b44:	2180      	movs	r1, #128	@ 0x80
 8002b46:	0289      	lsls	r1, r1, #10
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	619a      	str	r2, [r3, #24]
 8002b4c:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_TIM_Base_MspInit+0x3c>)
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	2380      	movs	r3, #128	@ 0x80
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	40014400 	.word	0x40014400
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b08b      	sub	sp, #44	@ 0x2c
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	2414      	movs	r4, #20
 8002b76:	193b      	adds	r3, r7, r4
 8002b78:	0018      	movs	r0, r3
 8002b7a:	2314      	movs	r3, #20
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f002 faea 	bl	8005158 <memset>
  if(huart->Instance==USART1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1c      	ldr	r2, [pc, #112]	@ (8002bfc <HAL_UART_MspInit+0x90>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d132      	bne.n	8002bf4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c00 <HAL_UART_MspInit+0x94>)
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_UART_MspInit+0x94>)
 8002b94:	2180      	movs	r1, #128	@ 0x80
 8002b96:	01c9      	lsls	r1, r1, #7
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	619a      	str	r2, [r3, #24]
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <HAL_UART_MspInit+0x94>)
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	01db      	lsls	r3, r3, #7
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_UART_MspInit+0x94>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <HAL_UART_MspInit+0x94>)
 8002bb0:	2180      	movs	r1, #128	@ 0x80
 8002bb2:	0289      	lsls	r1, r1, #10
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	615a      	str	r2, [r3, #20]
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <HAL_UART_MspInit+0x94>)
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bc6:	0021      	movs	r1, r4
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	220c      	movs	r2, #12
 8002bcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bda:	187b      	adds	r3, r7, r1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	2201      	movs	r2, #1
 8002be4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	187a      	adds	r2, r7, r1
 8002be8:	2390      	movs	r3, #144	@ 0x90
 8002bea:	05db      	lsls	r3, r3, #23
 8002bec:	0011      	movs	r1, r2
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fe68 	bl	80038c4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b00b      	add	sp, #44	@ 0x2c
 8002bfa:	bd90      	pop	{r4, r7, pc}
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40021000 	.word	0x40021000

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	e7fd      	b.n	8002c08 <NMI_Handler+0x4>

08002c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	e7fd      	b.n	8002c10 <HardFault_Handler+0x4>

08002c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2c:	f000 f8b2 	bl	8002d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c30:	46c0      	nop			@ (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <_sbrk+0x5c>)
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <_sbrk+0x60>)
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <_sbrk+0x64>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <_sbrk+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	18d3      	adds	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c68:	f002 fa7e 	bl	8005168 <__errno>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	220c      	movs	r2, #12
 8002c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	425b      	negs	r3, r3
 8002c76:	e009      	b.n	8002c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c78:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	18d2      	adds	r2, r2, r3
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <_sbrk+0x64>)
 8002c88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b006      	add	sp, #24
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20001000 	.word	0x20001000
 8002c98:	00000400 	.word	0x00000400
 8002c9c:	20000320 	.word	0x20000320
 8002ca0:	20000470 	.word	0x20000470

08002ca4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cb0:	480d      	ldr	r0, [pc, #52]	@ (8002ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cb2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cb4:	f7ff fff6 	bl	8002ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb8:	480c      	ldr	r0, [pc, #48]	@ (8002cec <LoopForever+0x6>)
  ldr r1, =_edata
 8002cba:	490d      	ldr	r1, [pc, #52]	@ (8002cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <LoopForever+0xe>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc0:	e002      	b.n	8002cc8 <LoopCopyDataInit>

08002cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc6:	3304      	adds	r3, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ccc:	d3f9      	bcc.n	8002cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cce:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8002cfc <LoopForever+0x16>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd4:	e001      	b.n	8002cda <LoopFillZerobss>

08002cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd8:	3204      	adds	r2, #4

08002cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cdc:	d3fb      	bcc.n	8002cd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cde:	f002 fa49 	bl	8005174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ce2:	f7ff fb23 	bl	800232c <main>

08002ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ce6:	e7fe      	b.n	8002ce6 <LoopForever>
  ldr   r0, =_estack
 8002ce8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002cf4:	08005b7c 	.word	0x08005b7c
  ldr r2, =_sbss
 8002cf8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002cfc:	20000470 	.word	0x20000470

08002d00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d00:	e7fe      	b.n	8002d00 <ADC1_IRQHandler>
	...

08002d04 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d08:	4b07      	ldr	r3, [pc, #28]	@ (8002d28 <HAL_Init+0x24>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_Init+0x24>)
 8002d0e:	2110      	movs	r1, #16
 8002d10:	430a      	orrs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002d14:	2003      	movs	r0, #3
 8002d16:	f000 f809 	bl	8002d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d1a:	f7ff fe9d 	bl	8002a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	40022000 	.word	0x40022000

08002d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d34:	4b14      	ldr	r3, [pc, #80]	@ (8002d88 <HAL_InitTick+0x5c>)
 8002d36:	681c      	ldr	r4, [r3, #0]
 8002d38:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <HAL_InitTick+0x60>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	23fa      	movs	r3, #250	@ 0xfa
 8002d40:	0098      	lsls	r0, r3, #2
 8002d42:	f7fd f9eb 	bl	800011c <__udivsi3>
 8002d46:	0003      	movs	r3, r0
 8002d48:	0019      	movs	r1, r3
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	f7fd f9e6 	bl	800011c <__udivsi3>
 8002d50:	0003      	movs	r3, r0
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 fda9 	bl	80038aa <HAL_SYSTICK_Config>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e00f      	b.n	8002d80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d80b      	bhi.n	8002d7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	425b      	negs	r3, r3
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 fd86 	bl	8003880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_InitTick+0x64>)
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b003      	add	sp, #12
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	2000000c 	.word	0x2000000c
 8002d90:	20000008 	.word	0x20000008

08002d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_IncTick+0x1c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_IncTick+0x20>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	18d2      	adds	r2, r2, r3
 8002da4:	4b03      	ldr	r3, [pc, #12]	@ (8002db4 <HAL_IncTick+0x20>)
 8002da6:	601a      	str	r2, [r3, #0]
}
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	2000000c 	.word	0x2000000c
 8002db4:	20000324 	.word	0x20000324

08002db8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b02      	ldr	r3, [pc, #8]	@ (8002dc8 <HAL_GetTick+0x10>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	20000324 	.word	0x20000324

08002dcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e125      	b.n	8003036 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2234      	movs	r2, #52	@ 0x34
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fe4c 	bl	8002aa0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d000      	beq.n	8002e14 <HAL_ADC_Init+0x48>
 8002e12:	e103      	b.n	800301c <HAL_ADC_Init+0x250>
 8002e14:	230f      	movs	r3, #15
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d000      	beq.n	8002e20 <HAL_ADC_Init+0x54>
 8002e1e:	e0fd      	b.n	800301c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2204      	movs	r2, #4
 8002e28:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002e2a:	d000      	beq.n	8002e2e <HAL_ADC_Init+0x62>
 8002e2c:	e0f6      	b.n	800301c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e32:	4a83      	ldr	r2, [pc, #524]	@ (8003040 <HAL_ADC_Init+0x274>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	2202      	movs	r2, #2
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2203      	movs	r2, #3
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d112      	bne.n	8002e72 <HAL_ADC_Init+0xa6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2201      	movs	r2, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d009      	beq.n	8002e6e <HAL_ADC_Init+0xa2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	401a      	ands	r2, r3
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_Init+0xa6>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_ADC_Init+0xa8>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d116      	bne.n	8002ea6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2218      	movs	r2, #24
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	0899      	lsrs	r1, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4964      	ldr	r1, [pc, #400]	@ (8003044 <HAL_ADC_Init+0x278>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7e1b      	ldrb	r3, [r3, #24]
 8002eba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7e5b      	ldrb	r3, [r3, #25]
 8002ec0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ec2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7e9b      	ldrb	r3, [r3, #26]
 8002ec8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002eca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d002      	beq.n	8002eda <HAL_ADC_Init+0x10e>
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_Init+0x110>
 8002eda:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002edc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ee2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_Init+0x124>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e000      	b.n	8002ef2 <HAL_ADC_Init+0x126>
 8002ef0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002ef2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2124      	movs	r1, #36	@ 0x24
 8002ef8:	5c5b      	ldrb	r3, [r3, r1]
 8002efa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002efc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7edb      	ldrb	r3, [r3, #27]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d115      	bne.n	8002f38 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7e9b      	ldrb	r3, [r3, #26]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	0252      	lsls	r2, r2, #9
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	e00b      	b.n	8002f38 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	2220      	movs	r2, #32
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f30:	2201      	movs	r2, #1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	23c2      	movs	r3, #194	@ 0xc2
 8002f3e:	33ff      	adds	r3, #255	@ 0xff
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d007      	beq.n	8002f54 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68d9      	ldr	r1, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f68:	2380      	movs	r3, #128	@ 0x80
 8002f6a:	055b      	lsls	r3, r3, #21
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_ADC_Init+0x1dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d017      	beq.n	8002fa8 <HAL_ADC_Init+0x1dc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d013      	beq.n	8002fa8 <HAL_ADC_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d00f      	beq.n	8002fa8 <HAL_ADC_Init+0x1dc>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_ADC_Init+0x1dc>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	d007      	beq.n	8002fa8 <HAL_ADC_Init+0x1dc>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d003      	beq.n	8002fa8 <HAL_ADC_Init+0x1dc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	2b07      	cmp	r3, #7
 8002fa6:	d112      	bne.n	8002fce <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2107      	movs	r1, #7
 8002fb4:	438a      	bics	r2, r1
 8002fb6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6959      	ldr	r1, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003048 <HAL_ADC_Init+0x27c>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4393      	bics	r3, r2
 8002fec:	2201      	movs	r2, #1
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ff4:	e01c      	b.n	8003030 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	2212      	movs	r2, #18
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	2210      	movs	r2, #16
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	2201      	movs	r2, #1
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003012:	230f      	movs	r3, #15
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800301a:	e009      	b.n	8003030 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	2210      	movs	r2, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003030:	230f      	movs	r3, #15
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b004      	add	sp, #16
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	fffffefd 	.word	0xfffffefd
 8003044:	fffe0219 	.word	0xfffe0219
 8003048:	833fffe7 	.word	0x833fffe7

0800304c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003054:	230f      	movs	r3, #15
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2204      	movs	r2, #4
 8003064:	4013      	ands	r3, r2
 8003066:	d138      	bne.n	80030da <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2234      	movs	r2, #52	@ 0x34
 800306c:	5c9b      	ldrb	r3, [r3, r2]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_ADC_Start+0x2a>
 8003072:	2302      	movs	r3, #2
 8003074:	e038      	b.n	80030e8 <HAL_ADC_Start+0x9c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2234      	movs	r2, #52	@ 0x34
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7e5b      	ldrb	r3, [r3, #25]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d007      	beq.n	8003096 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003086:	230f      	movs	r3, #15
 8003088:	18fc      	adds	r4, r7, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 fa23 	bl	80034d8 <ADC_Enable>
 8003092:	0003      	movs	r3, r0
 8003094:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003096:	230f      	movs	r3, #15
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d120      	bne.n	80030e2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	4a12      	ldr	r2, [pc, #72]	@ (80030f0 <HAL_ADC_Start+0xa4>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	2280      	movs	r2, #128	@ 0x80
 80030aa:	0052      	lsls	r2, r2, #1
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2234      	movs	r2, #52	@ 0x34
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	221c      	movs	r2, #28
 80030c6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2104      	movs	r1, #4
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e003      	b.n	80030e2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030da:	230f      	movs	r3, #15
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2202      	movs	r2, #2
 80030e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030e2:	230f      	movs	r3, #15
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	781b      	ldrb	r3, [r3, #0]
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b005      	add	sp, #20
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	fffff0fe 	.word	0xfffff0fe

080030f4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2234      	movs	r2, #52	@ 0x34
 8003108:	5c9b      	ldrb	r3, [r3, r2]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_ADC_Stop+0x1e>
 800310e:	2302      	movs	r3, #2
 8003110:	e029      	b.n	8003166 <HAL_ADC_Stop+0x72>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2234      	movs	r2, #52	@ 0x34
 8003116:	2101      	movs	r1, #1
 8003118:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800311a:	250f      	movs	r5, #15
 800311c:	197c      	adds	r4, r7, r5
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 face 	bl	80036c2 <ADC_ConversionStop>
 8003126:	0003      	movs	r3, r0
 8003128:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800312a:	197b      	adds	r3, r7, r5
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d112      	bne.n	8003158 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003132:	197c      	adds	r4, r7, r5
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	0018      	movs	r0, r3
 8003138:	f000 fa52 	bl	80035e0 <ADC_Disable>
 800313c:	0003      	movs	r3, r0
 800313e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003140:	197b      	adds	r3, r7, r5
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	4a08      	ldr	r2, [pc, #32]	@ (8003170 <HAL_ADC_Stop+0x7c>)
 800314e:	4013      	ands	r3, r2
 8003150:	2201      	movs	r2, #1
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2234      	movs	r2, #52	@ 0x34
 800315c:	2100      	movs	r1, #0
 800315e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003160:	230f      	movs	r3, #15
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	781b      	ldrb	r3, [r3, #0]
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b004      	add	sp, #16
 800316c:	bdb0      	pop	{r4, r5, r7, pc}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	fffffefe 	.word	0xfffffefe

08003174 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b08      	cmp	r3, #8
 8003184:	d102      	bne.n	800318c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003186:	2308      	movs	r3, #8
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e014      	b.n	80031b6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	4013      	ands	r3, r2
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10b      	bne.n	80031b2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	2220      	movs	r2, #32
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2234      	movs	r2, #52	@ 0x34
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e071      	b.n	8003296 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80031b2:	230c      	movs	r3, #12
 80031b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80031b6:	f7ff fdff 	bl	8002db8 <HAL_GetTick>
 80031ba:	0003      	movs	r3, r0
 80031bc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80031be:	e01f      	b.n	8003200 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	d01c      	beq.n	8003200 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_ADC_PollForConversion+0x68>
 80031cc:	f7ff fdf4 	bl	8002db8 <HAL_GetTick>
 80031d0:	0002      	movs	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d211      	bcs.n	8003200 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	d10b      	bne.n	8003200 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	2204      	movs	r2, #4
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2234      	movs	r2, #52	@ 0x34
 80031f8:	2100      	movs	r1, #0
 80031fa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e04a      	b.n	8003296 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	d0d9      	beq.n	80031c0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	23c0      	movs	r3, #192	@ 0xc0
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4013      	ands	r3, r2
 8003226:	d12d      	bne.n	8003284 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800322c:	2b00      	cmp	r3, #0
 800322e:	d129      	bne.n	8003284 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2208      	movs	r2, #8
 8003238:	4013      	ands	r3, r2
 800323a:	2b08      	cmp	r3, #8
 800323c:	d122      	bne.n	8003284 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2204      	movs	r2, #4
 8003246:	4013      	ands	r3, r2
 8003248:	d110      	bne.n	800326c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	210c      	movs	r1, #12
 8003256:	438a      	bics	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325e:	4a10      	ldr	r2, [pc, #64]	@ (80032a0 <HAL_ADC_PollForConversion+0x12c>)
 8003260:	4013      	ands	r3, r2
 8003262:	2201      	movs	r2, #1
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
 800326a:	e00b      	b.n	8003284 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	2220      	movs	r2, #32
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	2201      	movs	r2, #1
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7e1b      	ldrb	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	220c      	movs	r2, #12
 8003292:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b004      	add	sp, #16
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	fffffefe 	.word	0xfffffefe

080032a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b002      	add	sp, #8
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c6:	230f      	movs	r3, #15
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	055b      	lsls	r3, r3, #21
 80032da:	429a      	cmp	r2, r3
 80032dc:	d011      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x46>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d00d      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x46>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d009      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x46>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d005      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x46>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d001      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x46>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2234      	movs	r2, #52	@ 0x34
 8003306:	5c9b      	ldrb	r3, [r3, r2]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x54>
 800330c:	2302      	movs	r3, #2
 800330e:	e0d0      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x1f6>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2234      	movs	r2, #52	@ 0x34
 8003314:	2101      	movs	r1, #1
 8003316:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2204      	movs	r2, #4
 8003320:	4013      	ands	r3, r2
 8003322:	d000      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x6a>
 8003324:	e0b4      	b.n	8003490 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a64      	ldr	r2, [pc, #400]	@ (80034bc <HAL_ADC_ConfigChannel+0x200>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d100      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x76>
 8003330:	e082      	b.n	8003438 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	055b      	lsls	r3, r3, #21
 8003350:	429a      	cmp	r2, r3
 8003352:	d037      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d033      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	2b02      	cmp	r3, #2
 8003362:	d02f      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	2b03      	cmp	r3, #3
 800336a:	d02b      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	2b04      	cmp	r3, #4
 8003372:	d027      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	2b05      	cmp	r3, #5
 800337a:	d023      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	2b06      	cmp	r3, #6
 8003382:	d01f      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	2b07      	cmp	r3, #7
 800338a:	d01b      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2107      	movs	r1, #7
 8003398:	400b      	ands	r3, r1
 800339a:	429a      	cmp	r2, r3
 800339c:	d012      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2107      	movs	r1, #7
 80033aa:	438a      	bics	r2, r1
 80033ac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6959      	ldr	r1, [r3, #20]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2207      	movs	r2, #7
 80033ba:	401a      	ands	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d007      	beq.n	80033dc <HAL_ADC_ConfigChannel+0x120>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b11      	cmp	r3, #17
 80033d2:	d003      	beq.n	80033dc <HAL_ADC_ConfigChannel+0x120>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b12      	cmp	r3, #18
 80033da:	d163      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80033dc:	4b38      	ldr	r3, [pc, #224]	@ (80034c0 <HAL_ADC_ConfigChannel+0x204>)
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d009      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x140>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b11      	cmp	r3, #17
 80033ee:	d102      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x13a>
 80033f0:	2380      	movs	r3, #128	@ 0x80
 80033f2:	03db      	lsls	r3, r3, #15
 80033f4:	e004      	b.n	8003400 <HAL_ADC_ConfigChannel+0x144>
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	045b      	lsls	r3, r3, #17
 80033fa:	e001      	b.n	8003400 <HAL_ADC_ConfigChannel+0x144>
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	4a2f      	ldr	r2, [pc, #188]	@ (80034c0 <HAL_ADC_ConfigChannel+0x204>)
 8003402:	430b      	orrs	r3, r1
 8003404:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b10      	cmp	r3, #16
 800340c:	d14a      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800340e:	4b2d      	ldr	r3, [pc, #180]	@ (80034c4 <HAL_ADC_ConfigChannel+0x208>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	492d      	ldr	r1, [pc, #180]	@ (80034c8 <HAL_ADC_ConfigChannel+0x20c>)
 8003414:	0018      	movs	r0, r3
 8003416:	f7fc fe81 	bl	800011c <__udivsi3>
 800341a:	0003      	movs	r3, r0
 800341c:	001a      	movs	r2, r3
 800341e:	0013      	movs	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	189b      	adds	r3, r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003428:	e002      	b.n	8003430 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3b01      	subs	r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f9      	bne.n	800342a <HAL_ADC_ConfigChannel+0x16e>
 8003436:	e035      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2101      	movs	r1, #1
 8003444:	4099      	lsls	r1, r3
 8003446:	000b      	movs	r3, r1
 8003448:	43d9      	mvns	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	400a      	ands	r2, r1
 8003450:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b10      	cmp	r3, #16
 8003458:	d007      	beq.n	800346a <HAL_ADC_ConfigChannel+0x1ae>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b11      	cmp	r3, #17
 8003460:	d003      	beq.n	800346a <HAL_ADC_ConfigChannel+0x1ae>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b12      	cmp	r3, #18
 8003468:	d11c      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800346a:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <HAL_ADC_ConfigChannel+0x204>)
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b10      	cmp	r3, #16
 8003474:	d007      	beq.n	8003486 <HAL_ADC_ConfigChannel+0x1ca>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b11      	cmp	r3, #17
 800347c:	d101      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x1c6>
 800347e:	4b13      	ldr	r3, [pc, #76]	@ (80034cc <HAL_ADC_ConfigChannel+0x210>)
 8003480:	e002      	b.n	8003488 <HAL_ADC_ConfigChannel+0x1cc>
 8003482:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_ADC_ConfigChannel+0x214>)
 8003484:	e000      	b.n	8003488 <HAL_ADC_ConfigChannel+0x1cc>
 8003486:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <HAL_ADC_ConfigChannel+0x218>)
 8003488:	4a0d      	ldr	r2, [pc, #52]	@ (80034c0 <HAL_ADC_ConfigChannel+0x204>)
 800348a:	400b      	ands	r3, r1
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e009      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003494:	2220      	movs	r2, #32
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800349c:	230f      	movs	r3, #15
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2234      	movs	r2, #52	@ 0x34
 80034a8:	2100      	movs	r1, #0
 80034aa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80034ac:	230f      	movs	r3, #15
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	781b      	ldrb	r3, [r3, #0]
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b004      	add	sp, #16
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	00001001 	.word	0x00001001
 80034c0:	40012708 	.word	0x40012708
 80034c4:	20000004 	.word	0x20000004
 80034c8:	000f4240 	.word	0x000f4240
 80034cc:	ffbfffff 	.word	0xffbfffff
 80034d0:	feffffff 	.word	0xfeffffff
 80034d4:	ff7fffff 	.word	0xff7fffff

080034d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2203      	movs	r2, #3
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d112      	bne.n	800351c <ADC_Enable+0x44>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2201      	movs	r2, #1
 80034fe:	4013      	ands	r3, r2
 8003500:	2b01      	cmp	r3, #1
 8003502:	d009      	beq.n	8003518 <ADC_Enable+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	401a      	ands	r2, r3
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	429a      	cmp	r2, r3
 8003516:	d101      	bne.n	800351c <ADC_Enable+0x44>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <ADC_Enable+0x46>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d152      	bne.n	80035c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a2a      	ldr	r2, [pc, #168]	@ (80035d4 <ADC_Enable+0xfc>)
 800352a:	4013      	ands	r3, r2
 800352c:	d00d      	beq.n	800354a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	2210      	movs	r2, #16
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	2201      	movs	r2, #1
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e03f      	b.n	80035ca <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800355a:	4b1f      	ldr	r3, [pc, #124]	@ (80035d8 <ADC_Enable+0x100>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	491f      	ldr	r1, [pc, #124]	@ (80035dc <ADC_Enable+0x104>)
 8003560:	0018      	movs	r0, r3
 8003562:	f7fc fddb 	bl	800011c <__udivsi3>
 8003566:	0003      	movs	r3, r0
 8003568:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800356a:	e002      	b.n	8003572 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	3b01      	subs	r3, #1
 8003570:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f9      	bne.n	800356c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003578:	f7ff fc1e 	bl	8002db8 <HAL_GetTick>
 800357c:	0003      	movs	r3, r0
 800357e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003580:	e01b      	b.n	80035ba <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003582:	f7ff fc19 	bl	8002db8 <HAL_GetTick>
 8003586:	0002      	movs	r2, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d914      	bls.n	80035ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2201      	movs	r2, #1
 8003598:	4013      	ands	r3, r2
 800359a:	2b01      	cmp	r3, #1
 800359c:	d00d      	beq.n	80035ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a2:	2210      	movs	r2, #16
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ae:	2201      	movs	r2, #1
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e007      	b.n	80035ca <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2201      	movs	r2, #1
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d1dc      	bne.n	8003582 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	80000017 	.word	0x80000017
 80035d8:	20000004 	.word	0x20000004
 80035dc:	000f4240 	.word	0x000f4240

080035e0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2203      	movs	r2, #3
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d112      	bne.n	8003620 <ADC_Disable+0x40>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	4013      	ands	r3, r2
 8003604:	2b01      	cmp	r3, #1
 8003606:	d009      	beq.n	800361c <ADC_Disable+0x3c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	401a      	ands	r2, r3
 8003614:	2380      	movs	r3, #128	@ 0x80
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	429a      	cmp	r2, r3
 800361a:	d101      	bne.n	8003620 <ADC_Disable+0x40>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <ADC_Disable+0x42>
 8003620:	2300      	movs	r3, #0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d048      	beq.n	80036b8 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2205      	movs	r2, #5
 800362e:	4013      	ands	r3, r2
 8003630:	2b01      	cmp	r3, #1
 8003632:	d110      	bne.n	8003656 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2102      	movs	r1, #2
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2203      	movs	r2, #3
 800364a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800364c:	f7ff fbb4 	bl	8002db8 <HAL_GetTick>
 8003650:	0003      	movs	r3, r0
 8003652:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003654:	e029      	b.n	80036aa <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365a:	2210      	movs	r2, #16
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003666:	2201      	movs	r2, #1
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e023      	b.n	80036ba <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003672:	f7ff fba1 	bl	8002db8 <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d914      	bls.n	80036aa <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10d      	bne.n	80036aa <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003692:	2210      	movs	r2, #16
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369e:	2201      	movs	r2, #1
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e007      	b.n	80036ba <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2201      	movs	r2, #1
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d0dc      	beq.n	8003672 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	0018      	movs	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	b004      	add	sp, #16
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2204      	movs	r2, #4
 80036d6:	4013      	ands	r3, r2
 80036d8:	d03a      	beq.n	8003750 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2204      	movs	r2, #4
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d10d      	bne.n	8003704 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2202      	movs	r2, #2
 80036f0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80036f2:	d107      	bne.n	8003704 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2110      	movs	r1, #16
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003704:	f7ff fb58 	bl	8002db8 <HAL_GetTick>
 8003708:	0003      	movs	r3, r0
 800370a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800370c:	e01a      	b.n	8003744 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800370e:	f7ff fb53 	bl	8002db8 <HAL_GetTick>
 8003712:	0002      	movs	r2, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d913      	bls.n	8003744 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2204      	movs	r2, #4
 8003724:	4013      	ands	r3, r2
 8003726:	d00d      	beq.n	8003744 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	2210      	movs	r2, #16
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003738:	2201      	movs	r2, #1
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e006      	b.n	8003752 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2204      	movs	r2, #4
 800374c:	4013      	ands	r3, r2
 800374e:	d1de      	bne.n	800370e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b004      	add	sp, #16
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	0002      	movs	r2, r0
 8003764:	6039      	str	r1, [r7, #0]
 8003766:	1dfb      	adds	r3, r7, #7
 8003768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003770:	d828      	bhi.n	80037c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003772:	4a2f      	ldr	r2, [pc, #188]	@ (8003830 <__NVIC_SetPriority+0xd4>)
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	b25b      	sxtb	r3, r3
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	33c0      	adds	r3, #192	@ 0xc0
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	589b      	ldr	r3, [r3, r2]
 8003782:	1dfa      	adds	r2, r7, #7
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	0011      	movs	r1, r2
 8003788:	2203      	movs	r2, #3
 800378a:	400a      	ands	r2, r1
 800378c:	00d2      	lsls	r2, r2, #3
 800378e:	21ff      	movs	r1, #255	@ 0xff
 8003790:	4091      	lsls	r1, r2
 8003792:	000a      	movs	r2, r1
 8003794:	43d2      	mvns	r2, r2
 8003796:	401a      	ands	r2, r3
 8003798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	019b      	lsls	r3, r3, #6
 800379e:	22ff      	movs	r2, #255	@ 0xff
 80037a0:	401a      	ands	r2, r3
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	0018      	movs	r0, r3
 80037a8:	2303      	movs	r3, #3
 80037aa:	4003      	ands	r3, r0
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b0:	481f      	ldr	r0, [pc, #124]	@ (8003830 <__NVIC_SetPriority+0xd4>)
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b25b      	sxtb	r3, r3
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	430a      	orrs	r2, r1
 80037bc:	33c0      	adds	r3, #192	@ 0xc0
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037c2:	e031      	b.n	8003828 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003834 <__NVIC_SetPriority+0xd8>)
 80037c6:	1dfb      	adds	r3, r7, #7
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	0019      	movs	r1, r3
 80037cc:	230f      	movs	r3, #15
 80037ce:	400b      	ands	r3, r1
 80037d0:	3b08      	subs	r3, #8
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	3306      	adds	r3, #6
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	3304      	adds	r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	1dfa      	adds	r2, r7, #7
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	0011      	movs	r1, r2
 80037e4:	2203      	movs	r2, #3
 80037e6:	400a      	ands	r2, r1
 80037e8:	00d2      	lsls	r2, r2, #3
 80037ea:	21ff      	movs	r1, #255	@ 0xff
 80037ec:	4091      	lsls	r1, r2
 80037ee:	000a      	movs	r2, r1
 80037f0:	43d2      	mvns	r2, r2
 80037f2:	401a      	ands	r2, r3
 80037f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	22ff      	movs	r2, #255	@ 0xff
 80037fc:	401a      	ands	r2, r3
 80037fe:	1dfb      	adds	r3, r7, #7
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	0018      	movs	r0, r3
 8003804:	2303      	movs	r3, #3
 8003806:	4003      	ands	r3, r0
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800380c:	4809      	ldr	r0, [pc, #36]	@ (8003834 <__NVIC_SetPriority+0xd8>)
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	001c      	movs	r4, r3
 8003814:	230f      	movs	r3, #15
 8003816:	4023      	ands	r3, r4
 8003818:	3b08      	subs	r3, #8
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	430a      	orrs	r2, r1
 800381e:	3306      	adds	r3, #6
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	18c3      	adds	r3, r0, r3
 8003824:	3304      	adds	r3, #4
 8003826:	601a      	str	r2, [r3, #0]
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b003      	add	sp, #12
 800382e:	bd90      	pop	{r4, r7, pc}
 8003830:	e000e100 	.word	0xe000e100
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	045b      	lsls	r3, r3, #17
 8003848:	429a      	cmp	r2, r3
 800384a:	d301      	bcc.n	8003850 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384c:	2301      	movs	r3, #1
 800384e:	e010      	b.n	8003872 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003850:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <SysTick_Config+0x44>)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	3a01      	subs	r2, #1
 8003856:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003858:	2301      	movs	r3, #1
 800385a:	425b      	negs	r3, r3
 800385c:	2103      	movs	r1, #3
 800385e:	0018      	movs	r0, r3
 8003860:	f7ff ff7c 	bl	800375c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <SysTick_Config+0x44>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386a:	4b04      	ldr	r3, [pc, #16]	@ (800387c <SysTick_Config+0x44>)
 800386c:	2207      	movs	r2, #7
 800386e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	e000e010 	.word	0xe000e010

08003880 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	210f      	movs	r1, #15
 800388c:	187b      	adds	r3, r7, r1
 800388e:	1c02      	adds	r2, r0, #0
 8003890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	187b      	adds	r3, r7, r1
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b25b      	sxtb	r3, r3
 800389a:	0011      	movs	r1, r2
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff ff5d 	bl	800375c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b004      	add	sp, #16
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff ffbf 	bl	8003838 <SysTick_Config>
 80038ba:	0003      	movs	r3, r0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d2:	e149      	b.n	8003b68 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4091      	lsls	r1, r2
 80038de:	000a      	movs	r2, r1
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d100      	bne.n	80038ec <HAL_GPIO_Init+0x28>
 80038ea:	e13a      	b.n	8003b62 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2203      	movs	r2, #3
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d005      	beq.n	8003904 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003900:	2b02      	cmp	r3, #2
 8003902:	d130      	bne.n	8003966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	409a      	lsls	r2, r3
 8003912:	0013      	movs	r3, r2
 8003914:	43da      	mvns	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	409a      	lsls	r2, r3
 8003926:	0013      	movs	r3, r2
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800393a:	2201      	movs	r2, #1
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	43da      	mvns	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	2201      	movs	r2, #1
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
 8003958:	0013      	movs	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2203      	movs	r2, #3
 800396c:	4013      	ands	r3, r2
 800396e:	2b03      	cmp	r3, #3
 8003970:	d017      	beq.n	80039a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	409a      	lsls	r2, r3
 8003980:	0013      	movs	r3, r2
 8003982:	43da      	mvns	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	0013      	movs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d123      	bne.n	80039f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	0092      	lsls	r2, r2, #2
 80039b8:	58d3      	ldr	r3, [r2, r3]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2207      	movs	r2, #7
 80039c0:	4013      	ands	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	409a      	lsls	r2, r3
 80039c8:	0013      	movs	r3, r2
 80039ca:	43da      	mvns	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2107      	movs	r1, #7
 80039da:	400b      	ands	r3, r1
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	409a      	lsls	r2, r3
 80039e0:	0013      	movs	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3208      	adds	r2, #8
 80039f0:	0092      	lsls	r2, r2, #2
 80039f2:	6939      	ldr	r1, [r7, #16]
 80039f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2203      	movs	r2, #3
 8003a02:	409a      	lsls	r2, r3
 8003a04:	0013      	movs	r3, r2
 8003a06:	43da      	mvns	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2203      	movs	r2, #3
 8003a14:	401a      	ands	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	23c0      	movs	r3, #192	@ 0xc0
 8003a30:	029b      	lsls	r3, r3, #10
 8003a32:	4013      	ands	r3, r2
 8003a34:	d100      	bne.n	8003a38 <HAL_GPIO_Init+0x174>
 8003a36:	e094      	b.n	8003b62 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a38:	4b51      	ldr	r3, [pc, #324]	@ (8003b80 <HAL_GPIO_Init+0x2bc>)
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	4b50      	ldr	r3, [pc, #320]	@ (8003b80 <HAL_GPIO_Init+0x2bc>)
 8003a3e:	2101      	movs	r1, #1
 8003a40:	430a      	orrs	r2, r1
 8003a42:	619a      	str	r2, [r3, #24]
 8003a44:	4b4e      	ldr	r3, [pc, #312]	@ (8003b80 <HAL_GPIO_Init+0x2bc>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a50:	4a4c      	ldr	r2, [pc, #304]	@ (8003b84 <HAL_GPIO_Init+0x2c0>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	589b      	ldr	r3, [r3, r2]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2203      	movs	r2, #3
 8003a62:	4013      	ands	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	220f      	movs	r2, #15
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	0013      	movs	r3, r2
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	2390      	movs	r3, #144	@ 0x90
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d00d      	beq.n	8003a9a <HAL_GPIO_Init+0x1d6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a41      	ldr	r2, [pc, #260]	@ (8003b88 <HAL_GPIO_Init+0x2c4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <HAL_GPIO_Init+0x1d2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a40      	ldr	r2, [pc, #256]	@ (8003b8c <HAL_GPIO_Init+0x2c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_GPIO_Init+0x1ce>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e004      	b.n	8003a9c <HAL_GPIO_Init+0x1d8>
 8003a92:	2305      	movs	r3, #5
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_Init+0x1d8>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_Init+0x1d8>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	4093      	lsls	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aac:	4935      	ldr	r1, [pc, #212]	@ (8003b84 <HAL_GPIO_Init+0x2c0>)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aba:	4b35      	ldr	r3, [pc, #212]	@ (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	035b      	lsls	r3, r3, #13
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ade:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	2380      	movs	r3, #128	@ 0x80
 8003afa:	039b      	lsls	r3, r3, #14
 8003afc:	4013      	ands	r3, r2
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b08:	4b21      	ldr	r3, [pc, #132]	@ (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	2380      	movs	r3, #128	@ 0x80
 8003b24:	029b      	lsls	r3, r3, #10
 8003b26:	4013      	ands	r3, r2
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b32:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003b38:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	025b      	lsls	r3, r3, #9
 8003b50:	4013      	ands	r3, r2
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3301      	adds	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	40da      	lsrs	r2, r3
 8003b70:	1e13      	subs	r3, r2, #0
 8003b72:	d000      	beq.n	8003b76 <HAL_GPIO_Init+0x2b2>
 8003b74:	e6ae      	b.n	80038d4 <HAL_GPIO_Init+0x10>
  } 
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b006      	add	sp, #24
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40010000 	.word	0x40010000
 8003b88:	48000400 	.word	0x48000400
 8003b8c:	48000800 	.word	0x48000800
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	0008      	movs	r0, r1
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	1cbb      	adds	r3, r7, #2
 8003ba2:	1c02      	adds	r2, r0, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	1c7b      	adds	r3, r7, #1
 8003ba8:	1c0a      	adds	r2, r1, #0
 8003baa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	1c7b      	adds	r3, r7, #1
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb4:	1cbb      	adds	r3, r7, #2
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bbc:	e003      	b.n	8003bc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bbe:	1cbb      	adds	r3, r7, #2
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e301      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4013      	ands	r3, r2
 8003bea:	d100      	bne.n	8003bee <HAL_RCC_OscConfig+0x1e>
 8003bec:	e08d      	b.n	8003d0a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bee:	4bc3      	ldr	r3, [pc, #780]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	220c      	movs	r2, #12
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00e      	beq.n	8003c18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bfa:	4bc0      	ldr	r3, [pc, #768]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	220c      	movs	r2, #12
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x64>
 8003c06:	4bbd      	ldr	r3, [pc, #756]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	401a      	ands	r2, r3
 8003c10:	2380      	movs	r3, #128	@ 0x80
 8003c12:	025b      	lsls	r3, r3, #9
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d10d      	bne.n	8003c34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	4bb8      	ldr	r3, [pc, #736]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	4013      	ands	r3, r2
 8003c22:	d100      	bne.n	8003c26 <HAL_RCC_OscConfig+0x56>
 8003c24:	e070      	b.n	8003d08 <HAL_RCC_OscConfig+0x138>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d000      	beq.n	8003c30 <HAL_RCC_OscConfig+0x60>
 8003c2e:	e06b      	b.n	8003d08 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e2d8      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x7c>
 8003c3c:	4baf      	ldr	r3, [pc, #700]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4bae      	ldr	r3, [pc, #696]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c42:	2180      	movs	r1, #128	@ 0x80
 8003c44:	0249      	lsls	r1, r1, #9
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e02f      	b.n	8003cac <HAL_RCC_OscConfig+0xdc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10c      	bne.n	8003c6e <HAL_RCC_OscConfig+0x9e>
 8003c54:	4ba9      	ldr	r3, [pc, #676]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4ba8      	ldr	r3, [pc, #672]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	49a9      	ldr	r1, [pc, #676]	@ (8003f00 <HAL_RCC_OscConfig+0x330>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	4ba6      	ldr	r3, [pc, #664]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4ba5      	ldr	r3, [pc, #660]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c66:	49a7      	ldr	r1, [pc, #668]	@ (8003f04 <HAL_RCC_OscConfig+0x334>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e01e      	b.n	8003cac <HAL_RCC_OscConfig+0xdc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d10e      	bne.n	8003c94 <HAL_RCC_OscConfig+0xc4>
 8003c76:	4ba1      	ldr	r3, [pc, #644]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4ba0      	ldr	r3, [pc, #640]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c7c:	2180      	movs	r1, #128	@ 0x80
 8003c7e:	02c9      	lsls	r1, r1, #11
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	4b9d      	ldr	r3, [pc, #628]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b9c      	ldr	r3, [pc, #624]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	2180      	movs	r1, #128	@ 0x80
 8003c8c:	0249      	lsls	r1, r1, #9
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0xdc>
 8003c94:	4b99      	ldr	r3, [pc, #612]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b98      	ldr	r3, [pc, #608]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c9a:	4999      	ldr	r1, [pc, #612]	@ (8003f00 <HAL_RCC_OscConfig+0x330>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	4b96      	ldr	r3, [pc, #600]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b95      	ldr	r3, [pc, #596]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	4997      	ldr	r1, [pc, #604]	@ (8003f04 <HAL_RCC_OscConfig+0x334>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d014      	beq.n	8003cde <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7ff f880 	bl	8002db8 <HAL_GetTick>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cbe:	f7ff f87b 	bl	8002db8 <HAL_GetTick>
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	@ 0x64
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e28a      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	029b      	lsls	r3, r3, #10
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0xee>
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7ff f86b 	bl	8002db8 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7ff f866 	bl	8002db8 <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	@ 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e275      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	4b80      	ldr	r3, [pc, #512]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	4013      	ands	r3, r2
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x118>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	4013      	ands	r3, r2
 8003d12:	d100      	bne.n	8003d16 <HAL_RCC_OscConfig+0x146>
 8003d14:	e069      	b.n	8003dea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d16:	4b79      	ldr	r3, [pc, #484]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d00b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d20:	4b76      	ldr	r3, [pc, #472]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	220c      	movs	r2, #12
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d11c      	bne.n	8003d66 <HAL_RCC_OscConfig+0x196>
 8003d2c:	4b73      	ldr	r3, [pc, #460]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	025b      	lsls	r3, r3, #9
 8003d34:	4013      	ands	r3, r2
 8003d36:	d116      	bne.n	8003d66 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d38:	4b70      	ldr	r3, [pc, #448]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e24b      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	22f8      	movs	r2, #248	@ 0xf8
 8003d54:	4393      	bics	r3, r2
 8003d56:	0019      	movs	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	00da      	lsls	r2, r3, #3
 8003d5e:	4b67      	ldr	r3, [pc, #412]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d64:	e041      	b.n	8003dea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d024      	beq.n	8003db8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d6e:	4b63      	ldr	r3, [pc, #396]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b62      	ldr	r3, [pc, #392]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d74:	2101      	movs	r1, #1
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7ff f81d 	bl	8002db8 <HAL_GetTick>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d84:	f7ff f818 	bl	8002db8 <HAL_GetTick>
 8003d88:	0002      	movs	r2, r0
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e227      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b59      	ldr	r3, [pc, #356]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d0f1      	beq.n	8003d84 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b56      	ldr	r3, [pc, #344]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	22f8      	movs	r2, #248	@ 0xf8
 8003da6:	4393      	bics	r3, r2
 8003da8:	0019      	movs	r1, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00da      	lsls	r2, r3, #3
 8003db0:	4b52      	ldr	r3, [pc, #328]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e018      	b.n	8003dea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db8:	4b50      	ldr	r3, [pc, #320]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fff8 	bl	8002db8 <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fe fff3 	bl	8002db8 <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e202      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de0:	4b46      	ldr	r3, [pc, #280]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2202      	movs	r2, #2
 8003de6:	4013      	ands	r3, r2
 8003de8:	d1f1      	bne.n	8003dce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2208      	movs	r2, #8
 8003df0:	4013      	ands	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d019      	beq.n	8003e30 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e00:	4b3e      	ldr	r3, [pc, #248]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	430a      	orrs	r2, r1
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e08:	f7fe ffd6 	bl	8002db8 <HAL_GetTick>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e12:	f7fe ffd1 	bl	8002db8 <HAL_GetTick>
 8003e16:	0002      	movs	r2, r0
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e1e0      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e24:	4b35      	ldr	r3, [pc, #212]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d0f1      	beq.n	8003e12 <HAL_RCC_OscConfig+0x242>
 8003e2e:	e018      	b.n	8003e62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e30:	4b32      	ldr	r3, [pc, #200]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e34:	4b31      	ldr	r3, [pc, #196]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fe ffbc 	bl	8002db8 <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e46:	f7fe ffb7 	bl	8002db8 <HAL_GetTick>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e1c6      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	4b28      	ldr	r3, [pc, #160]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d1f1      	bne.n	8003e46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2204      	movs	r2, #4
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d100      	bne.n	8003e6e <HAL_RCC_OscConfig+0x29e>
 8003e6c:	e0b4      	b.n	8003fd8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6e:	201f      	movs	r0, #31
 8003e70:	183b      	adds	r3, r7, r0
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e76:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	055b      	lsls	r3, r3, #21
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d110      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e88:	2180      	movs	r1, #128	@ 0x80
 8003e8a:	0549      	lsls	r1, r1, #21
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	61da      	str	r2, [r3, #28]
 8003e90:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	2380      	movs	r3, #128	@ 0x80
 8003e96:	055b      	lsls	r3, r3, #21
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2380      	movs	r3, #128	@ 0x80
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4013      	ands	r3, r2
 8003eae:	d11a      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb0:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b14      	ldr	r3, [pc, #80]	@ (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003eb6:	2180      	movs	r1, #128	@ 0x80
 8003eb8:	0049      	lsls	r1, r1, #1
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebe:	f7fe ff7b 	bl	8002db8 <HAL_GetTick>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fe ff76 	bl	8002db8 <HAL_GetTick>
 8003ecc:	0002      	movs	r2, r0
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e185      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	2380      	movs	r3, #128	@ 0x80
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10e      	bne.n	8003f0c <HAL_RCC_OscConfig+0x33c>
 8003eee:	4b03      	ldr	r3, [pc, #12]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003ef0:	6a1a      	ldr	r2, [r3, #32]
 8003ef2:	4b02      	ldr	r3, [pc, #8]	@ (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	621a      	str	r2, [r3, #32]
 8003efa:	e035      	b.n	8003f68 <HAL_RCC_OscConfig+0x398>
 8003efc:	40021000 	.word	0x40021000
 8003f00:	fffeffff 	.word	0xfffeffff
 8003f04:	fffbffff 	.word	0xfffbffff
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0x35e>
 8003f14:	4bb6      	ldr	r3, [pc, #728]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	4bb5      	ldr	r3, [pc, #724]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	438a      	bics	r2, r1
 8003f1e:	621a      	str	r2, [r3, #32]
 8003f20:	4bb3      	ldr	r3, [pc, #716]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	4bb2      	ldr	r3, [pc, #712]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f26:	2104      	movs	r1, #4
 8003f28:	438a      	bics	r2, r1
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e01c      	b.n	8003f68 <HAL_RCC_OscConfig+0x398>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x380>
 8003f36:	4bae      	ldr	r3, [pc, #696]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	4bad      	ldr	r3, [pc, #692]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	621a      	str	r2, [r3, #32]
 8003f42:	4bab      	ldr	r3, [pc, #684]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f44:	6a1a      	ldr	r2, [r3, #32]
 8003f46:	4baa      	ldr	r3, [pc, #680]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	621a      	str	r2, [r3, #32]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0x398>
 8003f50:	4ba7      	ldr	r3, [pc, #668]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	4ba6      	ldr	r3, [pc, #664]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	438a      	bics	r2, r1
 8003f5a:	621a      	str	r2, [r3, #32]
 8003f5c:	4ba4      	ldr	r3, [pc, #656]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	4ba3      	ldr	r3, [pc, #652]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f62:	2104      	movs	r1, #4
 8003f64:	438a      	bics	r2, r1
 8003f66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d014      	beq.n	8003f9a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f70:	f7fe ff22 	bl	8002db8 <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f78:	e009      	b.n	8003f8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fe ff1d 	bl	8002db8 <HAL_GetTick>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	4a9b      	ldr	r2, [pc, #620]	@ (80041f4 <HAL_RCC_OscConfig+0x624>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e12b      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8e:	4b98      	ldr	r3, [pc, #608]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	2202      	movs	r2, #2
 8003f94:	4013      	ands	r3, r2
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x3aa>
 8003f98:	e013      	b.n	8003fc2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe ff0d 	bl	8002db8 <HAL_GetTick>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fe ff08 	bl	8002db8 <HAL_GetTick>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	4a91      	ldr	r2, [pc, #580]	@ (80041f4 <HAL_RCC_OscConfig+0x624>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e116      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fc2:	231f      	movs	r3, #31
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fcc:	4b88      	ldr	r3, [pc, #544]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	4b87      	ldr	r3, [pc, #540]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003fd2:	4989      	ldr	r1, [pc, #548]	@ (80041f8 <HAL_RCC_OscConfig+0x628>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2210      	movs	r2, #16
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d063      	beq.n	80040aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d12a      	bne.n	8004040 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fea:	4b81      	ldr	r3, [pc, #516]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fee:	4b80      	ldr	r3, [pc, #512]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	430a      	orrs	r2, r1
 8004000:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fe fed9 	bl	8002db8 <HAL_GetTick>
 8004006:	0003      	movs	r3, r0
 8004008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800400c:	f7fe fed4 	bl	8002db8 <HAL_GetTick>
 8004010:	0002      	movs	r2, r0
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0e3      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800401e:	4b74      	ldr	r3, [pc, #464]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	2202      	movs	r2, #2
 8004024:	4013      	ands	r3, r2
 8004026:	d0f1      	beq.n	800400c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004028:	4b71      	ldr	r3, [pc, #452]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800402a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402c:	22f8      	movs	r2, #248	@ 0xf8
 800402e:	4393      	bics	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	00da      	lsls	r2, r3, #3
 8004038:	4b6d      	ldr	r3, [pc, #436]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800403a:	430a      	orrs	r2, r1
 800403c:	635a      	str	r2, [r3, #52]	@ 0x34
 800403e:	e034      	b.n	80040aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	3305      	adds	r3, #5
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004048:	4b69      	ldr	r3, [pc, #420]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800404a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800404c:	4b68      	ldr	r3, [pc, #416]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800404e:	2104      	movs	r1, #4
 8004050:	438a      	bics	r2, r1
 8004052:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004054:	4b66      	ldr	r3, [pc, #408]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004058:	22f8      	movs	r2, #248	@ 0xf8
 800405a:	4393      	bics	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	00da      	lsls	r2, r3, #3
 8004064:	4b62      	ldr	r3, [pc, #392]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004066:	430a      	orrs	r2, r1
 8004068:	635a      	str	r2, [r3, #52]	@ 0x34
 800406a:	e01e      	b.n	80040aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800406c:	4b60      	ldr	r3, [pc, #384]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800406e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004070:	4b5f      	ldr	r3, [pc, #380]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004072:	2104      	movs	r1, #4
 8004074:	430a      	orrs	r2, r1
 8004076:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004078:	4b5d      	ldr	r3, [pc, #372]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800407a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800407c:	4b5c      	ldr	r3, [pc, #368]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800407e:	2101      	movs	r1, #1
 8004080:	438a      	bics	r2, r1
 8004082:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004084:	f7fe fe98 	bl	8002db8 <HAL_GetTick>
 8004088:	0003      	movs	r3, r0
 800408a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800408e:	f7fe fe93 	bl	8002db8 <HAL_GetTick>
 8004092:	0002      	movs	r2, r0
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0a2      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040a0:	4b53      	ldr	r3, [pc, #332]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a4:	2202      	movs	r2, #2
 80040a6:	4013      	ands	r3, r2
 80040a8:	d1f1      	bne.n	800408e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d100      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4e4>
 80040b2:	e097      	b.n	80041e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b4:	4b4e      	ldr	r3, [pc, #312]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	220c      	movs	r2, #12
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d100      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4f2>
 80040c0:	e06b      	b.n	800419a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d14c      	bne.n	8004164 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b49      	ldr	r3, [pc, #292]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b48      	ldr	r3, [pc, #288]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040d0:	494a      	ldr	r1, [pc, #296]	@ (80041fc <HAL_RCC_OscConfig+0x62c>)
 80040d2:	400a      	ands	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fe fe6f 	bl	8002db8 <HAL_GetTick>
 80040da:	0003      	movs	r3, r0
 80040dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fe fe6a 	bl	8002db8 <HAL_GetTick>
 80040e4:	0002      	movs	r2, r0
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e079      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f2:	4b3f      	ldr	r3, [pc, #252]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	2380      	movs	r3, #128	@ 0x80
 80040f8:	049b      	lsls	r3, r3, #18
 80040fa:	4013      	ands	r3, r2
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fe:	4b3c      	ldr	r3, [pc, #240]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	220f      	movs	r2, #15
 8004104:	4393      	bics	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410c:	4b38      	ldr	r3, [pc, #224]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800410e:	430a      	orrs	r2, r1
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004112:	4b37      	ldr	r3, [pc, #220]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4a3a      	ldr	r2, [pc, #232]	@ (8004200 <HAL_RCC_OscConfig+0x630>)
 8004118:	4013      	ands	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	431a      	orrs	r2, r3
 8004126:	4b32      	ldr	r3, [pc, #200]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412c:	4b30      	ldr	r3, [pc, #192]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b2f      	ldr	r3, [pc, #188]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	0449      	lsls	r1, r1, #17
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fe fe3d 	bl	8002db8 <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004144:	f7fe fe38 	bl	8002db8 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e047      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004156:	4b26      	ldr	r3, [pc, #152]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	049b      	lsls	r3, r3, #18
 800415e:	4013      	ands	r3, r2
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x574>
 8004162:	e03f      	b.n	80041e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004164:	4b22      	ldr	r3, [pc, #136]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800416a:	4924      	ldr	r1, [pc, #144]	@ (80041fc <HAL_RCC_OscConfig+0x62c>)
 800416c:	400a      	ands	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe fe22 	bl	8002db8 <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417a:	f7fe fe1d 	bl	8002db8 <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e02c      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418c:	4b18      	ldr	r3, [pc, #96]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	049b      	lsls	r3, r3, #18
 8004194:	4013      	ands	r3, r2
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x5aa>
 8004198:	e024      	b.n	80041e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01f      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80041a6:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80041ac:	4b10      	ldr	r3, [pc, #64]	@ (80041f0 <HAL_RCC_OscConfig+0x620>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	2380      	movs	r3, #128	@ 0x80
 80041b6:	025b      	lsls	r3, r3, #9
 80041b8:	401a      	ands	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10e      	bne.n	80041e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	220f      	movs	r2, #15
 80041c6:	401a      	ands	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	23f0      	movs	r3, #240	@ 0xf0
 80041d4:	039b      	lsls	r3, r3, #14
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b008      	add	sp, #32
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	40021000 	.word	0x40021000
 80041f4:	00001388 	.word	0x00001388
 80041f8:	efffffff 	.word	0xefffffff
 80041fc:	feffffff 	.word	0xfeffffff
 8004200:	ffc2ffff 	.word	0xffc2ffff

08004204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0b3      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004218:	4b5b      	ldr	r3, [pc, #364]	@ (8004388 <HAL_RCC_ClockConfig+0x184>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	4013      	ands	r3, r2
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d911      	bls.n	800424a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b58      	ldr	r3, [pc, #352]	@ (8004388 <HAL_RCC_ClockConfig+0x184>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	4393      	bics	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	4b55      	ldr	r3, [pc, #340]	@ (8004388 <HAL_RCC_ClockConfig+0x184>)
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004238:	4b53      	ldr	r3, [pc, #332]	@ (8004388 <HAL_RCC_ClockConfig+0x184>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2201      	movs	r2, #1
 800423e:	4013      	ands	r3, r2
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e09a      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2202      	movs	r2, #2
 8004250:	4013      	ands	r3, r2
 8004252:	d015      	beq.n	8004280 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2204      	movs	r2, #4
 800425a:	4013      	ands	r3, r2
 800425c:	d006      	beq.n	800426c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800425e:	4b4b      	ldr	r3, [pc, #300]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4b4a      	ldr	r3, [pc, #296]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 8004264:	21e0      	movs	r1, #224	@ 0xe0
 8004266:	00c9      	lsls	r1, r1, #3
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b47      	ldr	r3, [pc, #284]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	22f0      	movs	r2, #240	@ 0xf0
 8004272:	4393      	bics	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	4b44      	ldr	r3, [pc, #272]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	4013      	ands	r3, r2
 8004288:	d040      	beq.n	800430c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b3e      	ldr	r3, [pc, #248]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	029b      	lsls	r3, r3, #10
 800429a:	4013      	ands	r3, r2
 800429c:	d114      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e06e      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b38      	ldr	r3, [pc, #224]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	049b      	lsls	r3, r3, #18
 80042b2:	4013      	ands	r3, r2
 80042b4:	d108      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e062      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b34      	ldr	r3, [pc, #208]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2202      	movs	r2, #2
 80042c0:	4013      	ands	r3, r2
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e05b      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c8:	4b30      	ldr	r3, [pc, #192]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2203      	movs	r2, #3
 80042ce:	4393      	bics	r3, r2
 80042d0:	0019      	movs	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4b2d      	ldr	r3, [pc, #180]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fe fd6c 	bl	8002db8 <HAL_GetTick>
 80042e0:	0003      	movs	r3, r0
 80042e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e4:	e009      	b.n	80042fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e6:	f7fe fd67 	bl	8002db8 <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	4a27      	ldr	r2, [pc, #156]	@ (8004390 <HAL_RCC_ClockConfig+0x18c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e042      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b24      	ldr	r3, [pc, #144]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	220c      	movs	r2, #12
 8004300:	401a      	ands	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1ec      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b1e      	ldr	r3, [pc, #120]	@ (8004388 <HAL_RCC_ClockConfig+0x184>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2201      	movs	r2, #1
 8004312:	4013      	ands	r3, r2
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d211      	bcs.n	800433e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <HAL_RCC_ClockConfig+0x184>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	4393      	bics	r3, r2
 8004322:	0019      	movs	r1, r3
 8004324:	4b18      	ldr	r3, [pc, #96]	@ (8004388 <HAL_RCC_ClockConfig+0x184>)
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432c:	4b16      	ldr	r3, [pc, #88]	@ (8004388 <HAL_RCC_ClockConfig+0x184>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	4013      	ands	r3, r2
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d001      	beq.n	800433e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e020      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2204      	movs	r2, #4
 8004344:	4013      	ands	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b10      	ldr	r3, [pc, #64]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a11      	ldr	r2, [pc, #68]	@ (8004394 <HAL_RCC_ClockConfig+0x190>)
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800435c:	f000 f820 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004360:	0001      	movs	r1, r0
 8004362:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <HAL_RCC_ClockConfig+0x188>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	220f      	movs	r2, #15
 800436a:	4013      	ands	r3, r2
 800436c:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <HAL_RCC_ClockConfig+0x194>)
 800436e:	5cd3      	ldrb	r3, [r2, r3]
 8004370:	000a      	movs	r2, r1
 8004372:	40da      	lsrs	r2, r3
 8004374:	4b09      	ldr	r3, [pc, #36]	@ (800439c <HAL_RCC_ClockConfig+0x198>)
 8004376:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004378:	2003      	movs	r0, #3
 800437a:	f7fe fcd7 	bl	8002d2c <HAL_InitTick>
  
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b004      	add	sp, #16
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40022000 	.word	0x40022000
 800438c:	40021000 	.word	0x40021000
 8004390:	00001388 	.word	0x00001388
 8004394:	fffff8ff 	.word	0xfffff8ff
 8004398:	08005b08 	.word	0x08005b08
 800439c:	20000004 	.word	0x20000004

080043a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80043ba:	4b20      	ldr	r3, [pc, #128]	@ (800443c <HAL_RCC_GetSysClockFreq+0x9c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	220c      	movs	r2, #12
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d002      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d003      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x36>
 80043ce:	e02c      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043d2:	613b      	str	r3, [r7, #16]
      break;
 80043d4:	e02c      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	0c9b      	lsrs	r3, r3, #18
 80043da:	220f      	movs	r2, #15
 80043dc:	4013      	ands	r3, r2
 80043de:	4a19      	ldr	r2, [pc, #100]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043e4:	4b15      	ldr	r3, [pc, #84]	@ (800443c <HAL_RCC_GetSysClockFreq+0x9c>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	220f      	movs	r2, #15
 80043ea:	4013      	ands	r3, r2
 80043ec:	4a16      	ldr	r2, [pc, #88]	@ (8004448 <HAL_RCC_GetSysClockFreq+0xa8>)
 80043ee:	5cd3      	ldrb	r3, [r2, r3]
 80043f0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	025b      	lsls	r3, r3, #9
 80043f8:	4013      	ands	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	4810      	ldr	r0, [pc, #64]	@ (8004440 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004400:	f7fb fe8c 	bl	800011c <__udivsi3>
 8004404:	0003      	movs	r3, r0
 8004406:	001a      	movs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4353      	muls	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e009      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	000a      	movs	r2, r1
 8004414:	0152      	lsls	r2, r2, #5
 8004416:	1a52      	subs	r2, r2, r1
 8004418:	0193      	lsls	r3, r2, #6
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	185b      	adds	r3, r3, r1
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]
      break;
 8004428:	e002      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800442a:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <HAL_RCC_GetSysClockFreq+0xa0>)
 800442c:	613b      	str	r3, [r7, #16]
      break;
 800442e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004430:	693b      	ldr	r3, [r7, #16]
}
 8004432:	0018      	movs	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	b006      	add	sp, #24
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	40021000 	.word	0x40021000
 8004440:	007a1200 	.word	0x007a1200
 8004444:	08005b20 	.word	0x08005b20
 8004448:	08005b30 	.word	0x08005b30

0800444c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b02      	ldr	r3, [pc, #8]	@ (800445c <HAL_RCC_GetHCLKFreq+0x10>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			@ (mov r8, r8)
 800445c:	20000004 	.word	0x20000004

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004464:	f7ff fff2 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004468:	0001      	movs	r1, r0
 800446a:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	2207      	movs	r2, #7
 8004472:	4013      	ands	r3, r2
 8004474:	4a04      	ldr	r2, [pc, #16]	@ (8004488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	40d9      	lsrs	r1, r3
 800447a:	000b      	movs	r3, r1
}    
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	40021000 	.word	0x40021000
 8004488:	08005b18 	.word	0x08005b18

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	025b      	lsls	r3, r3, #9
 80044a4:	4013      	ands	r3, r2
 80044a6:	d100      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80044a8:	e08e      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2017      	movs	r0, #23
 80044ac:	183b      	adds	r3, r7, r0
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b2:	4b57      	ldr	r3, [pc, #348]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	2380      	movs	r3, #128	@ 0x80
 80044b8:	055b      	lsls	r3, r3, #21
 80044ba:	4013      	ands	r3, r2
 80044bc:	d110      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	4b54      	ldr	r3, [pc, #336]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044c4:	2180      	movs	r1, #128	@ 0x80
 80044c6:	0549      	lsls	r1, r1, #21
 80044c8:	430a      	orrs	r2, r1
 80044ca:	61da      	str	r2, [r3, #28]
 80044cc:	4b50      	ldr	r3, [pc, #320]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	2380      	movs	r3, #128	@ 0x80
 80044d2:	055b      	lsls	r3, r3, #21
 80044d4:	4013      	ands	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	183b      	adds	r3, r7, r0
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	@ 0x80
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4013      	ands	r3, r2
 80044ea:	d11a      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ec:	4b49      	ldr	r3, [pc, #292]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b48      	ldr	r3, [pc, #288]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044f2:	2180      	movs	r1, #128	@ 0x80
 80044f4:	0049      	lsls	r1, r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fe fc5d 	bl	8002db8 <HAL_GetTick>
 80044fe:	0003      	movs	r3, r0
 8004500:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004504:	f7fe fc58 	bl	8002db8 <HAL_GetTick>
 8004508:	0002      	movs	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	@ 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e077      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b3f      	ldr	r3, [pc, #252]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	2380      	movs	r3, #128	@ 0x80
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4013      	ands	r3, r2
 8004520:	d0f0      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004522:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	23c0      	movs	r3, #192	@ 0xc0
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d034      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	23c0      	movs	r3, #192	@ 0xc0
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4013      	ands	r3, r2
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d02c      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004544:	4b32      	ldr	r3, [pc, #200]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4a33      	ldr	r2, [pc, #204]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800454e:	4b30      	ldr	r3, [pc, #192]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	4b2f      	ldr	r3, [pc, #188]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004554:	2180      	movs	r1, #128	@ 0x80
 8004556:	0249      	lsls	r1, r1, #9
 8004558:	430a      	orrs	r2, r1
 800455a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800455c:	4b2c      	ldr	r3, [pc, #176]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	4b2b      	ldr	r3, [pc, #172]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004562:	492e      	ldr	r1, [pc, #184]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004564:	400a      	ands	r2, r1
 8004566:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004568:	4b29      	ldr	r3, [pc, #164]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	4013      	ands	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fe fc1f 	bl	8002db8 <HAL_GetTick>
 800457a:	0003      	movs	r3, r0
 800457c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	e009      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004580:	f7fe fc1a 	bl	8002db8 <HAL_GetTick>
 8004584:	0002      	movs	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	4a25      	ldr	r2, [pc, #148]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e038      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	4b1e      	ldr	r3, [pc, #120]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	2202      	movs	r2, #2
 800459a:	4013      	ands	r3, r2
 800459c:	d0f0      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800459e:	4b1c      	ldr	r3, [pc, #112]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ae:	430a      	orrs	r2, r1
 80045b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045b2:	2317      	movs	r3, #23
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045bc:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045c2:	4918      	ldr	r1, [pc, #96]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2201      	movs	r2, #1
 80045ce:	4013      	ands	r3, r2
 80045d0:	d009      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d6:	2203      	movs	r2, #3
 80045d8:	4393      	bics	r3, r2
 80045da:	0019      	movs	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045e2:	430a      	orrs	r2, r1
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2220      	movs	r2, #32
 80045ec:	4013      	ands	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f0:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	2210      	movs	r2, #16
 80045f6:	4393      	bics	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	4b04      	ldr	r3, [pc, #16]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004600:	430a      	orrs	r2, r1
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b006      	add	sp, #24
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
 8004618:	fffffcff 	.word	0xfffffcff
 800461c:	fffeffff 	.word	0xfffeffff
 8004620:	00001388 	.word	0x00001388
 8004624:	efffffff 	.word	0xefffffff

08004628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e042      	b.n	80046c0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	223d      	movs	r2, #61	@ 0x3d
 800463e:	5c9b      	ldrb	r3, [r3, r2]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	223c      	movs	r2, #60	@ 0x3c
 800464a:	2100      	movs	r1, #0
 800464c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0018      	movs	r0, r3
 8004652:	f7fe fa6b 	bl	8002b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	223d      	movs	r2, #61	@ 0x3d
 800465a:	2102      	movs	r1, #2
 800465c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3304      	adds	r3, #4
 8004666:	0019      	movs	r1, r3
 8004668:	0010      	movs	r0, r2
 800466a:	f000 f871 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2246      	movs	r2, #70	@ 0x46
 8004672:	2101      	movs	r1, #1
 8004674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	223e      	movs	r2, #62	@ 0x3e
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	223f      	movs	r2, #63	@ 0x3f
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2240      	movs	r2, #64	@ 0x40
 800468a:	2101      	movs	r1, #1
 800468c:	5499      	strb	r1, [r3, r2]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2241      	movs	r2, #65	@ 0x41
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2242      	movs	r2, #66	@ 0x42
 800469a:	2101      	movs	r1, #1
 800469c:	5499      	strb	r1, [r3, r2]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2243      	movs	r2, #67	@ 0x43
 80046a2:	2101      	movs	r1, #1
 80046a4:	5499      	strb	r1, [r3, r2]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2244      	movs	r2, #68	@ 0x44
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2245      	movs	r2, #69	@ 0x45
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	223d      	movs	r2, #61	@ 0x3d
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	223d      	movs	r2, #61	@ 0x3d
 80046d4:	5c9b      	ldrb	r3, [r3, r2]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d001      	beq.n	80046e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e02e      	b.n	800473e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	223d      	movs	r2, #61	@ 0x3d
 80046e4:	2102      	movs	r1, #2
 80046e6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a16      	ldr	r2, [pc, #88]	@ (8004748 <HAL_TIM_Base_Start+0x80>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00a      	beq.n	8004708 <HAL_TIM_Base_Start+0x40>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	2380      	movs	r3, #128	@ 0x80
 80046f8:	05db      	lsls	r3, r3, #23
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d004      	beq.n	8004708 <HAL_TIM_Base_Start+0x40>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a12      	ldr	r2, [pc, #72]	@ (800474c <HAL_TIM_Base_Start+0x84>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d111      	bne.n	800472c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2207      	movs	r2, #7
 8004710:	4013      	ands	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d010      	beq.n	800473c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472a:	e007      	b.n	800473c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2101      	movs	r1, #1
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b004      	add	sp, #16
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40000400 	.word	0x40000400

08004750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a37      	ldr	r2, [pc, #220]	@ (8004840 <TIM_Base_SetConfig+0xf0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d008      	beq.n	800477a <TIM_Base_SetConfig+0x2a>
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	2380      	movs	r3, #128	@ 0x80
 800476c:	05db      	lsls	r3, r3, #23
 800476e:	429a      	cmp	r2, r3
 8004770:	d003      	beq.n	800477a <TIM_Base_SetConfig+0x2a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a33      	ldr	r2, [pc, #204]	@ (8004844 <TIM_Base_SetConfig+0xf4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d108      	bne.n	800478c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2270      	movs	r2, #112	@ 0x70
 800477e:	4393      	bics	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a2c      	ldr	r2, [pc, #176]	@ (8004840 <TIM_Base_SetConfig+0xf0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d014      	beq.n	80047be <TIM_Base_SetConfig+0x6e>
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	2380      	movs	r3, #128	@ 0x80
 8004798:	05db      	lsls	r3, r3, #23
 800479a:	429a      	cmp	r2, r3
 800479c:	d00f      	beq.n	80047be <TIM_Base_SetConfig+0x6e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a28      	ldr	r2, [pc, #160]	@ (8004844 <TIM_Base_SetConfig+0xf4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00b      	beq.n	80047be <TIM_Base_SetConfig+0x6e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a27      	ldr	r2, [pc, #156]	@ (8004848 <TIM_Base_SetConfig+0xf8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <TIM_Base_SetConfig+0x6e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a26      	ldr	r2, [pc, #152]	@ (800484c <TIM_Base_SetConfig+0xfc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_Base_SetConfig+0x6e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a25      	ldr	r2, [pc, #148]	@ (8004850 <TIM_Base_SetConfig+0x100>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d108      	bne.n	80047d0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a24      	ldr	r2, [pc, #144]	@ (8004854 <TIM_Base_SetConfig+0x104>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2280      	movs	r2, #128	@ 0x80
 80047d4:	4393      	bics	r3, r2
 80047d6:	001a      	movs	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a11      	ldr	r2, [pc, #68]	@ (8004840 <TIM_Base_SetConfig+0xf0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_Base_SetConfig+0xbe>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a12      	ldr	r2, [pc, #72]	@ (800484c <TIM_Base_SetConfig+0xfc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0xbe>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a11      	ldr	r2, [pc, #68]	@ (8004850 <TIM_Base_SetConfig+0x100>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d103      	bne.n	8004816 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2201      	movs	r2, #1
 8004822:	4013      	ands	r3, r2
 8004824:	2b01      	cmp	r3, #1
 8004826:	d106      	bne.n	8004836 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2201      	movs	r2, #1
 800482e:	4393      	bics	r3, r2
 8004830:	001a      	movs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	611a      	str	r2, [r3, #16]
  }
}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b004      	add	sp, #16
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40000400 	.word	0x40000400
 8004848:	40002000 	.word	0x40002000
 800484c:	40014400 	.word	0x40014400
 8004850:	40014800 	.word	0x40014800
 8004854:	fffffcff 	.word	0xfffffcff

08004858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e044      	b.n	80048f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d107      	bne.n	8004882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2278      	movs	r2, #120	@ 0x78
 8004876:	2100      	movs	r1, #0
 8004878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f7fe f975 	bl	8002b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2224      	movs	r2, #36	@ 0x24
 8004886:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2101      	movs	r1, #1
 8004894:	438a      	bics	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	0018      	movs	r0, r3
 80048a4:	f000 f9f4 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 f8c8 	bl	8004a40 <UART_SetConfig>
 80048b0:	0003      	movs	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e01c      	b.n	80048f4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	490d      	ldr	r1, [pc, #52]	@ (80048fc <HAL_UART_Init+0xa4>)
 80048c6:	400a      	ands	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	212a      	movs	r1, #42	@ 0x2a
 80048d6:	438a      	bics	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 fa83 	bl	8004df8 <UART_CheckIdleState>
 80048f2:	0003      	movs	r3, r0
}
 80048f4:	0018      	movs	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b002      	add	sp, #8
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	ffffb7ff 	.word	0xffffb7ff

08004900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	1dbb      	adds	r3, r7, #6
 800490e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004914:	2b20      	cmp	r3, #32
 8004916:	d000      	beq.n	800491a <HAL_UART_Transmit+0x1a>
 8004918:	e08c      	b.n	8004a34 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_UART_Transmit+0x28>
 8004920:	1dbb      	adds	r3, r7, #6
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e084      	b.n	8004a36 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	2380      	movs	r3, #128	@ 0x80
 8004932:	015b      	lsls	r3, r3, #5
 8004934:	429a      	cmp	r2, r3
 8004936:	d109      	bne.n	800494c <HAL_UART_Transmit+0x4c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d105      	bne.n	800494c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2201      	movs	r2, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d001      	beq.n	800494c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e074      	b.n	8004a36 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2284      	movs	r2, #132	@ 0x84
 8004950:	2100      	movs	r1, #0
 8004952:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2221      	movs	r2, #33	@ 0x21
 8004958:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800495a:	f7fe fa2d 	bl	8002db8 <HAL_GetTick>
 800495e:	0003      	movs	r3, r0
 8004960:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1dba      	adds	r2, r7, #6
 8004966:	2150      	movs	r1, #80	@ 0x50
 8004968:	8812      	ldrh	r2, [r2, #0]
 800496a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1dba      	adds	r2, r7, #6
 8004970:	2152      	movs	r1, #82	@ 0x52
 8004972:	8812      	ldrh	r2, [r2, #0]
 8004974:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	2380      	movs	r3, #128	@ 0x80
 800497c:	015b      	lsls	r3, r3, #5
 800497e:	429a      	cmp	r2, r3
 8004980:	d108      	bne.n	8004994 <HAL_UART_Transmit+0x94>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e003      	b.n	800499c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800499c:	e02f      	b.n	80049fe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	0013      	movs	r3, r2
 80049a8:	2200      	movs	r2, #0
 80049aa:	2180      	movs	r1, #128	@ 0x80
 80049ac:	f000 facc 	bl	8004f48 <UART_WaitOnFlagUntilTimeout>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d004      	beq.n	80049be <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e03b      	b.n	8004a36 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	05d2      	lsls	r2, r2, #23
 80049ce:	0dd2      	lsrs	r2, r2, #23
 80049d0:	b292      	uxth	r2, r2
 80049d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	3302      	adds	r3, #2
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e007      	b.n	80049ec <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3301      	adds	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2252      	movs	r2, #82	@ 0x52
 80049f0:	5a9b      	ldrh	r3, [r3, r2]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b299      	uxth	r1, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2252      	movs	r2, #82	@ 0x52
 80049fc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2252      	movs	r2, #82	@ 0x52
 8004a02:	5a9b      	ldrh	r3, [r3, r2]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1c9      	bne.n	800499e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	0013      	movs	r3, r2
 8004a14:	2200      	movs	r2, #0
 8004a16:	2140      	movs	r1, #64	@ 0x40
 8004a18:	f000 fa96 	bl	8004f48 <UART_WaitOnFlagUntilTimeout>
 8004a1c:	1e03      	subs	r3, r0, #0
 8004a1e:	d004      	beq.n	8004a2a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e005      	b.n	8004a36 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e000      	b.n	8004a36 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
  }
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b008      	add	sp, #32
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a48:	231e      	movs	r3, #30
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a83      	ldr	r2, [pc, #524]	@ (8004c7c <UART_SetConfig+0x23c>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	0019      	movs	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4a7e      	ldr	r2, [pc, #504]	@ (8004c80 <UART_SetConfig+0x240>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a75      	ldr	r2, [pc, #468]	@ (8004c84 <UART_SetConfig+0x244>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	0019      	movs	r1, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004abc:	4b72      	ldr	r3, [pc, #456]	@ (8004c88 <UART_SetConfig+0x248>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d00d      	beq.n	8004ae4 <UART_SetConfig+0xa4>
 8004ac8:	d81b      	bhi.n	8004b02 <UART_SetConfig+0xc2>
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d014      	beq.n	8004af8 <UART_SetConfig+0xb8>
 8004ace:	d818      	bhi.n	8004b02 <UART_SetConfig+0xc2>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <UART_SetConfig+0x9a>
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d00a      	beq.n	8004aee <UART_SetConfig+0xae>
 8004ad8:	e013      	b.n	8004b02 <UART_SetConfig+0xc2>
 8004ada:	231f      	movs	r3, #31
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e012      	b.n	8004b0a <UART_SetConfig+0xca>
 8004ae4:	231f      	movs	r3, #31
 8004ae6:	18fb      	adds	r3, r7, r3
 8004ae8:	2202      	movs	r2, #2
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	e00d      	b.n	8004b0a <UART_SetConfig+0xca>
 8004aee:	231f      	movs	r3, #31
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2204      	movs	r2, #4
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e008      	b.n	8004b0a <UART_SetConfig+0xca>
 8004af8:	231f      	movs	r3, #31
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	2208      	movs	r2, #8
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e003      	b.n	8004b0a <UART_SetConfig+0xca>
 8004b02:	231f      	movs	r3, #31
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	2210      	movs	r2, #16
 8004b08:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	2380      	movs	r3, #128	@ 0x80
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d15c      	bne.n	8004bd0 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8004b16:	231f      	movs	r3, #31
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d015      	beq.n	8004b4c <UART_SetConfig+0x10c>
 8004b20:	dc18      	bgt.n	8004b54 <UART_SetConfig+0x114>
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d00d      	beq.n	8004b42 <UART_SetConfig+0x102>
 8004b26:	dc15      	bgt.n	8004b54 <UART_SetConfig+0x114>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <UART_SetConfig+0xf2>
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d005      	beq.n	8004b3c <UART_SetConfig+0xfc>
 8004b30:	e010      	b.n	8004b54 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b32:	f7ff fc95 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8004b36:	0003      	movs	r3, r0
 8004b38:	61bb      	str	r3, [r7, #24]
        break;
 8004b3a:	e012      	b.n	8004b62 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b3c:	4b53      	ldr	r3, [pc, #332]	@ (8004c8c <UART_SetConfig+0x24c>)
 8004b3e:	61bb      	str	r3, [r7, #24]
        break;
 8004b40:	e00f      	b.n	8004b62 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b42:	f7ff fc2d 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004b46:	0003      	movs	r3, r0
 8004b48:	61bb      	str	r3, [r7, #24]
        break;
 8004b4a:	e00a      	b.n	8004b62 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4c:	2380      	movs	r3, #128	@ 0x80
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	61bb      	str	r3, [r7, #24]
        break;
 8004b52:	e006      	b.n	8004b62 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b58:	231e      	movs	r3, #30
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
        break;
 8004b60:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d100      	bne.n	8004b6a <UART_SetConfig+0x12a>
 8004b68:	e07a      	b.n	8004c60 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	005a      	lsls	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	18d2      	adds	r2, r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	0019      	movs	r1, r3
 8004b7c:	0010      	movs	r0, r2
 8004b7e:	f7fb facd 	bl	800011c <__udivsi3>
 8004b82:	0003      	movs	r3, r0
 8004b84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b0f      	cmp	r3, #15
 8004b8a:	d91c      	bls.n	8004bc6 <UART_SetConfig+0x186>
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	2380      	movs	r3, #128	@ 0x80
 8004b90:	025b      	lsls	r3, r3, #9
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d217      	bcs.n	8004bc6 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	200e      	movs	r0, #14
 8004b9c:	183b      	adds	r3, r7, r0
 8004b9e:	210f      	movs	r1, #15
 8004ba0:	438a      	bics	r2, r1
 8004ba2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2207      	movs	r2, #7
 8004bac:	4013      	ands	r3, r2
 8004bae:	b299      	uxth	r1, r3
 8004bb0:	183b      	adds	r3, r7, r0
 8004bb2:	183a      	adds	r2, r7, r0
 8004bb4:	8812      	ldrh	r2, [r2, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	183a      	adds	r2, r7, r0
 8004bc0:	8812      	ldrh	r2, [r2, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	e04c      	b.n	8004c60 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc6:	231e      	movs	r3, #30
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e047      	b.n	8004c60 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd0:	231f      	movs	r3, #31
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d015      	beq.n	8004c06 <UART_SetConfig+0x1c6>
 8004bda:	dc18      	bgt.n	8004c0e <UART_SetConfig+0x1ce>
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d00d      	beq.n	8004bfc <UART_SetConfig+0x1bc>
 8004be0:	dc15      	bgt.n	8004c0e <UART_SetConfig+0x1ce>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <UART_SetConfig+0x1ac>
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d005      	beq.n	8004bf6 <UART_SetConfig+0x1b6>
 8004bea:	e010      	b.n	8004c0e <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7ff fc38 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	61bb      	str	r3, [r7, #24]
        break;
 8004bf4:	e012      	b.n	8004c1c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf6:	4b25      	ldr	r3, [pc, #148]	@ (8004c8c <UART_SetConfig+0x24c>)
 8004bf8:	61bb      	str	r3, [r7, #24]
        break;
 8004bfa:	e00f      	b.n	8004c1c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfc:	f7ff fbd0 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004c00:	0003      	movs	r3, r0
 8004c02:	61bb      	str	r3, [r7, #24]
        break;
 8004c04:	e00a      	b.n	8004c1c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	61bb      	str	r3, [r7, #24]
        break;
 8004c0c:	e006      	b.n	8004c1c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c12:	231e      	movs	r3, #30
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
        break;
 8004c1a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01e      	beq.n	8004c60 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085a      	lsrs	r2, r3, #1
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	18d2      	adds	r2, r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	0019      	movs	r1, r3
 8004c32:	0010      	movs	r0, r2
 8004c34:	f7fb fa72 	bl	800011c <__udivsi3>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d90a      	bls.n	8004c58 <UART_SetConfig+0x218>
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	025b      	lsls	r3, r3, #9
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d205      	bcs.n	8004c58 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	e003      	b.n	8004c60 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004c58:	231e      	movs	r3, #30
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c6c:	231e      	movs	r3, #30
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	781b      	ldrb	r3, [r3, #0]
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b008      	add	sp, #32
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	ffff69f3 	.word	0xffff69f3
 8004c80:	ffffcfff 	.word	0xffffcfff
 8004c84:	fffff4ff 	.word	0xfffff4ff
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	007a1200 	.word	0x007a1200

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a4a      	ldr	r2, [pc, #296]	@ (8004dd4 <UART_AdvFeatureConfig+0x144>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	0019      	movs	r1, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4a43      	ldr	r2, [pc, #268]	@ (8004dd8 <UART_AdvFeatureConfig+0x148>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a3b      	ldr	r2, [pc, #236]	@ (8004ddc <UART_AdvFeatureConfig+0x14c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	2204      	movs	r2, #4
 8004d04:	4013      	ands	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4a34      	ldr	r2, [pc, #208]	@ (8004de0 <UART_AdvFeatureConfig+0x150>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	2210      	movs	r2, #16
 8004d26:	4013      	ands	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a2c      	ldr	r2, [pc, #176]	@ (8004de4 <UART_AdvFeatureConfig+0x154>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	0019      	movs	r1, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	2220      	movs	r2, #32
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	4a25      	ldr	r2, [pc, #148]	@ (8004de8 <UART_AdvFeatureConfig+0x158>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	2240      	movs	r2, #64	@ 0x40
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d01d      	beq.n	8004daa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	@ (8004dec <UART_AdvFeatureConfig+0x15c>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d8a:	2380      	movs	r3, #128	@ 0x80
 8004d8c:	035b      	lsls	r3, r3, #13
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d10b      	bne.n	8004daa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a15      	ldr	r2, [pc, #84]	@ (8004df0 <UART_AdvFeatureConfig+0x160>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	2280      	movs	r2, #128	@ 0x80
 8004db0:	4013      	ands	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4a0e      	ldr	r2, [pc, #56]	@ (8004df4 <UART_AdvFeatureConfig+0x164>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }
}
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	ffff7fff 	.word	0xffff7fff
 8004dd8:	fffdffff 	.word	0xfffdffff
 8004ddc:	fffeffff 	.word	0xfffeffff
 8004de0:	fffbffff 	.word	0xfffbffff
 8004de4:	ffffefff 	.word	0xffffefff
 8004de8:	ffffdfff 	.word	0xffffdfff
 8004dec:	ffefffff 	.word	0xffefffff
 8004df0:	ff9fffff 	.word	0xff9fffff
 8004df4:	fff7ffff 	.word	0xfff7ffff

08004df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b092      	sub	sp, #72	@ 0x48
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2284      	movs	r2, #132	@ 0x84
 8004e04:	2100      	movs	r1, #0
 8004e06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e08:	f7fd ffd6 	bl	8002db8 <HAL_GetTick>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2208      	movs	r2, #8
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d12c      	bne.n	8004e78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e20:	2280      	movs	r2, #128	@ 0x80
 8004e22:	0391      	lsls	r1, r2, #14
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4a46      	ldr	r2, [pc, #280]	@ (8004f40 <UART_CheckIdleState+0x148>)
 8004e28:	9200      	str	r2, [sp, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f000 f88c 	bl	8004f48 <UART_WaitOnFlagUntilTimeout>
 8004e30:	1e03      	subs	r3, r0, #0
 8004e32:	d021      	beq.n	8004e78 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e34:	f3ef 8310 	mrs	r3, PRIMASK
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e3e:	2301      	movs	r3, #1
 8004e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	46c0      	nop			@ (mov r8, r8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2180      	movs	r1, #128	@ 0x80
 8004e56:	438a      	bics	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2278      	movs	r2, #120	@ 0x78
 8004e70:	2100      	movs	r1, #0
 8004e72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e05f      	b.n	8004f38 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d146      	bne.n	8004f14 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e88:	2280      	movs	r2, #128	@ 0x80
 8004e8a:	03d1      	lsls	r1, r2, #15
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f40 <UART_CheckIdleState+0x148>)
 8004e90:	9200      	str	r2, [sp, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f000 f858 	bl	8004f48 <UART_WaitOnFlagUntilTimeout>
 8004e98:	1e03      	subs	r3, r0, #0
 8004e9a:	d03b      	beq.n	8004f14 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4921      	ldr	r1, [pc, #132]	@ (8004f44 <UART_CheckIdleState+0x14c>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ece:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ed8:	2301      	movs	r3, #1
 8004eda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f383 8810 	msr	PRIMASK, r3
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2101      	movs	r1, #1
 8004ef0:	438a      	bics	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2280      	movs	r2, #128	@ 0x80
 8004f04:	2120      	movs	r1, #32
 8004f06:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2278      	movs	r2, #120	@ 0x78
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e011      	b.n	8004f38 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2280      	movs	r2, #128	@ 0x80
 8004f1e:	2120      	movs	r1, #32
 8004f20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2278      	movs	r2, #120	@ 0x78
 8004f32:	2100      	movs	r1, #0
 8004f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	0018      	movs	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b010      	add	sp, #64	@ 0x40
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	01ffffff 	.word	0x01ffffff
 8004f44:	fffffedf 	.word	0xfffffedf

08004f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	1dfb      	adds	r3, r7, #7
 8004f56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f58:	e051      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	d04e      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f60:	f7fd ff2a 	bl	8002db8 <HAL_GetTick>
 8004f64:	0002      	movs	r2, r0
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d302      	bcc.n	8004f76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e051      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2204      	movs	r2, #4
 8004f82:	4013      	ands	r3, r2
 8004f84:	d03b      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b80      	cmp	r3, #128	@ 0x80
 8004f8a:	d038      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b40      	cmp	r3, #64	@ 0x40
 8004f90:	d035      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d111      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	0018      	movs	r0, r3
 8004fac:	f000 f83c 	bl	8005028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2284      	movs	r2, #132	@ 0x84
 8004fb4:	2108      	movs	r1, #8
 8004fb6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2278      	movs	r2, #120	@ 0x78
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e02c      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	401a      	ands	r2, r3
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d112      	bne.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2280      	movs	r2, #128	@ 0x80
 8004fde:	0112      	lsls	r2, r2, #4
 8004fe0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 f81f 	bl	8005028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2284      	movs	r2, #132	@ 0x84
 8004fee:	2120      	movs	r1, #32
 8004ff0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2278      	movs	r2, #120	@ 0x78
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e00f      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	425a      	negs	r2, r3
 800500e:	4153      	adcs	r3, r2
 8005010:	b2db      	uxtb	r3, r3
 8005012:	001a      	movs	r2, r3
 8005014:	1dfb      	adds	r3, r7, #7
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d09e      	beq.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	0018      	movs	r0, r3
 8005020:	46bd      	mov	sp, r7
 8005022:	b004      	add	sp, #16
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08e      	sub	sp, #56	@ 0x38
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005030:	f3ef 8310 	mrs	r3, PRIMASK
 8005034:	617b      	str	r3, [r7, #20]
  return(result);
 8005036:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005038:	637b      	str	r3, [r7, #52]	@ 0x34
 800503a:	2301      	movs	r3, #1
 800503c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f383 8810 	msr	PRIMASK, r3
}
 8005044:	46c0      	nop			@ (mov r8, r8)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4926      	ldr	r1, [pc, #152]	@ (80050ec <UART_EndRxTransfer+0xc4>)
 8005052:	400a      	ands	r2, r1
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f383 8810 	msr	PRIMASK, r3
}
 8005060:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005062:	f3ef 8310 	mrs	r3, PRIMASK
 8005066:	623b      	str	r3, [r7, #32]
  return(result);
 8005068:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	633b      	str	r3, [r7, #48]	@ 0x30
 800506c:	2301      	movs	r3, #1
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	f383 8810 	msr	PRIMASK, r3
}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2101      	movs	r1, #1
 8005084:	438a      	bics	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	f383 8810 	msr	PRIMASK, r3
}
 8005092:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005098:	2b01      	cmp	r3, #1
 800509a:	d118      	bne.n	80050ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509c:	f3ef 8310 	mrs	r3, PRIMASK
 80050a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80050a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a6:	2301      	movs	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			@ (mov r8, r8)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2110      	movs	r1, #16
 80050be:	438a      	bics	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f383 8810 	msr	PRIMASK, r3
}
 80050cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2280      	movs	r2, #128	@ 0x80
 80050d2:	2120      	movs	r1, #32
 80050d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b00e      	add	sp, #56	@ 0x38
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	46c0      	nop			@ (mov r8, r8)
 80050ec:	fffffedf 	.word	0xfffffedf

080050f0 <sniprintf>:
 80050f0:	b40c      	push	{r2, r3}
 80050f2:	b530      	push	{r4, r5, lr}
 80050f4:	4b17      	ldr	r3, [pc, #92]	@ (8005154 <sniprintf+0x64>)
 80050f6:	000c      	movs	r4, r1
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	b09d      	sub	sp, #116	@ 0x74
 80050fc:	2900      	cmp	r1, #0
 80050fe:	da08      	bge.n	8005112 <sniprintf+0x22>
 8005100:	238b      	movs	r3, #139	@ 0x8b
 8005102:	2001      	movs	r0, #1
 8005104:	602b      	str	r3, [r5, #0]
 8005106:	4240      	negs	r0, r0
 8005108:	b01d      	add	sp, #116	@ 0x74
 800510a:	bc30      	pop	{r4, r5}
 800510c:	bc08      	pop	{r3}
 800510e:	b002      	add	sp, #8
 8005110:	4718      	bx	r3
 8005112:	2382      	movs	r3, #130	@ 0x82
 8005114:	466a      	mov	r2, sp
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	8293      	strh	r3, [r2, #20]
 800511a:	2300      	movs	r3, #0
 800511c:	9002      	str	r0, [sp, #8]
 800511e:	9006      	str	r0, [sp, #24]
 8005120:	4299      	cmp	r1, r3
 8005122:	d000      	beq.n	8005126 <sniprintf+0x36>
 8005124:	1e4b      	subs	r3, r1, #1
 8005126:	9304      	str	r3, [sp, #16]
 8005128:	9307      	str	r3, [sp, #28]
 800512a:	2301      	movs	r3, #1
 800512c:	466a      	mov	r2, sp
 800512e:	425b      	negs	r3, r3
 8005130:	82d3      	strh	r3, [r2, #22]
 8005132:	0028      	movs	r0, r5
 8005134:	ab21      	add	r3, sp, #132	@ 0x84
 8005136:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005138:	a902      	add	r1, sp, #8
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	f000 f99c 	bl	8005478 <_svfiprintf_r>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	da01      	bge.n	8005148 <sniprintf+0x58>
 8005144:	238b      	movs	r3, #139	@ 0x8b
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	2c00      	cmp	r4, #0
 800514a:	d0dd      	beq.n	8005108 <sniprintf+0x18>
 800514c:	2200      	movs	r2, #0
 800514e:	9b02      	ldr	r3, [sp, #8]
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e7d9      	b.n	8005108 <sniprintf+0x18>
 8005154:	20000010 	.word	0x20000010

08005158 <memset>:
 8005158:	0003      	movs	r3, r0
 800515a:	1882      	adds	r2, r0, r2
 800515c:	4293      	cmp	r3, r2
 800515e:	d100      	bne.n	8005162 <memset+0xa>
 8005160:	4770      	bx	lr
 8005162:	7019      	strb	r1, [r3, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	e7f9      	b.n	800515c <memset+0x4>

08005168 <__errno>:
 8005168:	4b01      	ldr	r3, [pc, #4]	@ (8005170 <__errno+0x8>)
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	4770      	bx	lr
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	20000010 	.word	0x20000010

08005174 <__libc_init_array>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	2600      	movs	r6, #0
 8005178:	4c0c      	ldr	r4, [pc, #48]	@ (80051ac <__libc_init_array+0x38>)
 800517a:	4d0d      	ldr	r5, [pc, #52]	@ (80051b0 <__libc_init_array+0x3c>)
 800517c:	1b64      	subs	r4, r4, r5
 800517e:	10a4      	asrs	r4, r4, #2
 8005180:	42a6      	cmp	r6, r4
 8005182:	d109      	bne.n	8005198 <__libc_init_array+0x24>
 8005184:	2600      	movs	r6, #0
 8005186:	f000 fc65 	bl	8005a54 <_init>
 800518a:	4c0a      	ldr	r4, [pc, #40]	@ (80051b4 <__libc_init_array+0x40>)
 800518c:	4d0a      	ldr	r5, [pc, #40]	@ (80051b8 <__libc_init_array+0x44>)
 800518e:	1b64      	subs	r4, r4, r5
 8005190:	10a4      	asrs	r4, r4, #2
 8005192:	42a6      	cmp	r6, r4
 8005194:	d105      	bne.n	80051a2 <__libc_init_array+0x2e>
 8005196:	bd70      	pop	{r4, r5, r6, pc}
 8005198:	00b3      	lsls	r3, r6, #2
 800519a:	58eb      	ldr	r3, [r5, r3]
 800519c:	4798      	blx	r3
 800519e:	3601      	adds	r6, #1
 80051a0:	e7ee      	b.n	8005180 <__libc_init_array+0xc>
 80051a2:	00b3      	lsls	r3, r6, #2
 80051a4:	58eb      	ldr	r3, [r5, r3]
 80051a6:	4798      	blx	r3
 80051a8:	3601      	adds	r6, #1
 80051aa:	e7f2      	b.n	8005192 <__libc_init_array+0x1e>
 80051ac:	08005b74 	.word	0x08005b74
 80051b0:	08005b74 	.word	0x08005b74
 80051b4:	08005b78 	.word	0x08005b78
 80051b8:	08005b74 	.word	0x08005b74

080051bc <__retarget_lock_acquire_recursive>:
 80051bc:	4770      	bx	lr

080051be <__retarget_lock_release_recursive>:
 80051be:	4770      	bx	lr

080051c0 <_free_r>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	0005      	movs	r5, r0
 80051c4:	1e0c      	subs	r4, r1, #0
 80051c6:	d010      	beq.n	80051ea <_free_r+0x2a>
 80051c8:	3c04      	subs	r4, #4
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da00      	bge.n	80051d2 <_free_r+0x12>
 80051d0:	18e4      	adds	r4, r4, r3
 80051d2:	0028      	movs	r0, r5
 80051d4:	f000 f8e0 	bl	8005398 <__malloc_lock>
 80051d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005250 <_free_r+0x90>)
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <_free_r+0x2c>
 80051e0:	6063      	str	r3, [r4, #4]
 80051e2:	6014      	str	r4, [r2, #0]
 80051e4:	0028      	movs	r0, r5
 80051e6:	f000 f8df 	bl	80053a8 <__malloc_unlock>
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	d908      	bls.n	8005202 <_free_r+0x42>
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	1821      	adds	r1, r4, r0
 80051f4:	428b      	cmp	r3, r1
 80051f6:	d1f3      	bne.n	80051e0 <_free_r+0x20>
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	1809      	adds	r1, r1, r0
 80051fe:	6021      	str	r1, [r4, #0]
 8005200:	e7ee      	b.n	80051e0 <_free_r+0x20>
 8005202:	001a      	movs	r2, r3
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <_free_r+0x4e>
 800520a:	42a3      	cmp	r3, r4
 800520c:	d9f9      	bls.n	8005202 <_free_r+0x42>
 800520e:	6811      	ldr	r1, [r2, #0]
 8005210:	1850      	adds	r0, r2, r1
 8005212:	42a0      	cmp	r0, r4
 8005214:	d10b      	bne.n	800522e <_free_r+0x6e>
 8005216:	6820      	ldr	r0, [r4, #0]
 8005218:	1809      	adds	r1, r1, r0
 800521a:	1850      	adds	r0, r2, r1
 800521c:	6011      	str	r1, [r2, #0]
 800521e:	4283      	cmp	r3, r0
 8005220:	d1e0      	bne.n	80051e4 <_free_r+0x24>
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	1841      	adds	r1, r0, r1
 8005228:	6011      	str	r1, [r2, #0]
 800522a:	6053      	str	r3, [r2, #4]
 800522c:	e7da      	b.n	80051e4 <_free_r+0x24>
 800522e:	42a0      	cmp	r0, r4
 8005230:	d902      	bls.n	8005238 <_free_r+0x78>
 8005232:	230c      	movs	r3, #12
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	e7d5      	b.n	80051e4 <_free_r+0x24>
 8005238:	6820      	ldr	r0, [r4, #0]
 800523a:	1821      	adds	r1, r4, r0
 800523c:	428b      	cmp	r3, r1
 800523e:	d103      	bne.n	8005248 <_free_r+0x88>
 8005240:	6819      	ldr	r1, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	1809      	adds	r1, r1, r0
 8005246:	6021      	str	r1, [r4, #0]
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	6054      	str	r4, [r2, #4]
 800524c:	e7ca      	b.n	80051e4 <_free_r+0x24>
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	2000046c 	.word	0x2000046c

08005254 <sbrk_aligned>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4e0f      	ldr	r6, [pc, #60]	@ (8005294 <sbrk_aligned+0x40>)
 8005258:	000d      	movs	r5, r1
 800525a:	6831      	ldr	r1, [r6, #0]
 800525c:	0004      	movs	r4, r0
 800525e:	2900      	cmp	r1, #0
 8005260:	d102      	bne.n	8005268 <sbrk_aligned+0x14>
 8005262:	f000 fb99 	bl	8005998 <_sbrk_r>
 8005266:	6030      	str	r0, [r6, #0]
 8005268:	0029      	movs	r1, r5
 800526a:	0020      	movs	r0, r4
 800526c:	f000 fb94 	bl	8005998 <_sbrk_r>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d103      	bne.n	800527c <sbrk_aligned+0x28>
 8005274:	2501      	movs	r5, #1
 8005276:	426d      	negs	r5, r5
 8005278:	0028      	movs	r0, r5
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	2303      	movs	r3, #3
 800527e:	1cc5      	adds	r5, r0, #3
 8005280:	439d      	bics	r5, r3
 8005282:	42a8      	cmp	r0, r5
 8005284:	d0f8      	beq.n	8005278 <sbrk_aligned+0x24>
 8005286:	1a29      	subs	r1, r5, r0
 8005288:	0020      	movs	r0, r4
 800528a:	f000 fb85 	bl	8005998 <_sbrk_r>
 800528e:	3001      	adds	r0, #1
 8005290:	d1f2      	bne.n	8005278 <sbrk_aligned+0x24>
 8005292:	e7ef      	b.n	8005274 <sbrk_aligned+0x20>
 8005294:	20000468 	.word	0x20000468

08005298 <_malloc_r>:
 8005298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800529a:	2203      	movs	r2, #3
 800529c:	1ccb      	adds	r3, r1, #3
 800529e:	4393      	bics	r3, r2
 80052a0:	3308      	adds	r3, #8
 80052a2:	0005      	movs	r5, r0
 80052a4:	001f      	movs	r7, r3
 80052a6:	2b0c      	cmp	r3, #12
 80052a8:	d234      	bcs.n	8005314 <_malloc_r+0x7c>
 80052aa:	270c      	movs	r7, #12
 80052ac:	42b9      	cmp	r1, r7
 80052ae:	d833      	bhi.n	8005318 <_malloc_r+0x80>
 80052b0:	0028      	movs	r0, r5
 80052b2:	f000 f871 	bl	8005398 <__malloc_lock>
 80052b6:	4e37      	ldr	r6, [pc, #220]	@ (8005394 <_malloc_r+0xfc>)
 80052b8:	6833      	ldr	r3, [r6, #0]
 80052ba:	001c      	movs	r4, r3
 80052bc:	2c00      	cmp	r4, #0
 80052be:	d12f      	bne.n	8005320 <_malloc_r+0x88>
 80052c0:	0039      	movs	r1, r7
 80052c2:	0028      	movs	r0, r5
 80052c4:	f7ff ffc6 	bl	8005254 <sbrk_aligned>
 80052c8:	0004      	movs	r4, r0
 80052ca:	1c43      	adds	r3, r0, #1
 80052cc:	d15f      	bne.n	800538e <_malloc_r+0xf6>
 80052ce:	6834      	ldr	r4, [r6, #0]
 80052d0:	9400      	str	r4, [sp, #0]
 80052d2:	9b00      	ldr	r3, [sp, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d14a      	bne.n	800536e <_malloc_r+0xd6>
 80052d8:	2c00      	cmp	r4, #0
 80052da:	d052      	beq.n	8005382 <_malloc_r+0xea>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	0028      	movs	r0, r5
 80052e0:	18e3      	adds	r3, r4, r3
 80052e2:	9900      	ldr	r1, [sp, #0]
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	f000 fb57 	bl	8005998 <_sbrk_r>
 80052ea:	9b01      	ldr	r3, [sp, #4]
 80052ec:	4283      	cmp	r3, r0
 80052ee:	d148      	bne.n	8005382 <_malloc_r+0xea>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	0028      	movs	r0, r5
 80052f4:	1aff      	subs	r7, r7, r3
 80052f6:	0039      	movs	r1, r7
 80052f8:	f7ff ffac 	bl	8005254 <sbrk_aligned>
 80052fc:	3001      	adds	r0, #1
 80052fe:	d040      	beq.n	8005382 <_malloc_r+0xea>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	19db      	adds	r3, r3, r7
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	6833      	ldr	r3, [r6, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	2a00      	cmp	r2, #0
 800530c:	d133      	bne.n	8005376 <_malloc_r+0xde>
 800530e:	9b00      	ldr	r3, [sp, #0]
 8005310:	6033      	str	r3, [r6, #0]
 8005312:	e019      	b.n	8005348 <_malloc_r+0xb0>
 8005314:	2b00      	cmp	r3, #0
 8005316:	dac9      	bge.n	80052ac <_malloc_r+0x14>
 8005318:	230c      	movs	r3, #12
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	2000      	movs	r0, #0
 800531e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005320:	6821      	ldr	r1, [r4, #0]
 8005322:	1bc9      	subs	r1, r1, r7
 8005324:	d420      	bmi.n	8005368 <_malloc_r+0xd0>
 8005326:	290b      	cmp	r1, #11
 8005328:	d90a      	bls.n	8005340 <_malloc_r+0xa8>
 800532a:	19e2      	adds	r2, r4, r7
 800532c:	6027      	str	r7, [r4, #0]
 800532e:	42a3      	cmp	r3, r4
 8005330:	d104      	bne.n	800533c <_malloc_r+0xa4>
 8005332:	6032      	str	r2, [r6, #0]
 8005334:	6863      	ldr	r3, [r4, #4]
 8005336:	6011      	str	r1, [r2, #0]
 8005338:	6053      	str	r3, [r2, #4]
 800533a:	e005      	b.n	8005348 <_malloc_r+0xb0>
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	e7f9      	b.n	8005334 <_malloc_r+0x9c>
 8005340:	6862      	ldr	r2, [r4, #4]
 8005342:	42a3      	cmp	r3, r4
 8005344:	d10e      	bne.n	8005364 <_malloc_r+0xcc>
 8005346:	6032      	str	r2, [r6, #0]
 8005348:	0028      	movs	r0, r5
 800534a:	f000 f82d 	bl	80053a8 <__malloc_unlock>
 800534e:	0020      	movs	r0, r4
 8005350:	2207      	movs	r2, #7
 8005352:	300b      	adds	r0, #11
 8005354:	1d23      	adds	r3, r4, #4
 8005356:	4390      	bics	r0, r2
 8005358:	1ac2      	subs	r2, r0, r3
 800535a:	4298      	cmp	r0, r3
 800535c:	d0df      	beq.n	800531e <_malloc_r+0x86>
 800535e:	1a1b      	subs	r3, r3, r0
 8005360:	50a3      	str	r3, [r4, r2]
 8005362:	e7dc      	b.n	800531e <_malloc_r+0x86>
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	e7ef      	b.n	8005348 <_malloc_r+0xb0>
 8005368:	0023      	movs	r3, r4
 800536a:	6864      	ldr	r4, [r4, #4]
 800536c:	e7a6      	b.n	80052bc <_malloc_r+0x24>
 800536e:	9c00      	ldr	r4, [sp, #0]
 8005370:	6863      	ldr	r3, [r4, #4]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	e7ad      	b.n	80052d2 <_malloc_r+0x3a>
 8005376:	001a      	movs	r2, r3
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	42a3      	cmp	r3, r4
 800537c:	d1fb      	bne.n	8005376 <_malloc_r+0xde>
 800537e:	2300      	movs	r3, #0
 8005380:	e7da      	b.n	8005338 <_malloc_r+0xa0>
 8005382:	230c      	movs	r3, #12
 8005384:	0028      	movs	r0, r5
 8005386:	602b      	str	r3, [r5, #0]
 8005388:	f000 f80e 	bl	80053a8 <__malloc_unlock>
 800538c:	e7c6      	b.n	800531c <_malloc_r+0x84>
 800538e:	6007      	str	r7, [r0, #0]
 8005390:	e7da      	b.n	8005348 <_malloc_r+0xb0>
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	2000046c 	.word	0x2000046c

08005398 <__malloc_lock>:
 8005398:	b510      	push	{r4, lr}
 800539a:	4802      	ldr	r0, [pc, #8]	@ (80053a4 <__malloc_lock+0xc>)
 800539c:	f7ff ff0e 	bl	80051bc <__retarget_lock_acquire_recursive>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	20000464 	.word	0x20000464

080053a8 <__malloc_unlock>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4802      	ldr	r0, [pc, #8]	@ (80053b4 <__malloc_unlock+0xc>)
 80053ac:	f7ff ff07 	bl	80051be <__retarget_lock_release_recursive>
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	20000464 	.word	0x20000464

080053b8 <__ssputs_r>:
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	688e      	ldr	r6, [r1, #8]
 80053bc:	b085      	sub	sp, #20
 80053be:	001f      	movs	r7, r3
 80053c0:	000c      	movs	r4, r1
 80053c2:	680b      	ldr	r3, [r1, #0]
 80053c4:	9002      	str	r0, [sp, #8]
 80053c6:	9203      	str	r2, [sp, #12]
 80053c8:	42be      	cmp	r6, r7
 80053ca:	d830      	bhi.n	800542e <__ssputs_r+0x76>
 80053cc:	210c      	movs	r1, #12
 80053ce:	5e62      	ldrsh	r2, [r4, r1]
 80053d0:	2190      	movs	r1, #144	@ 0x90
 80053d2:	00c9      	lsls	r1, r1, #3
 80053d4:	420a      	tst	r2, r1
 80053d6:	d028      	beq.n	800542a <__ssputs_r+0x72>
 80053d8:	2003      	movs	r0, #3
 80053da:	6921      	ldr	r1, [r4, #16]
 80053dc:	1a5b      	subs	r3, r3, r1
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6963      	ldr	r3, [r4, #20]
 80053e2:	4343      	muls	r3, r0
 80053e4:	9801      	ldr	r0, [sp, #4]
 80053e6:	0fdd      	lsrs	r5, r3, #31
 80053e8:	18ed      	adds	r5, r5, r3
 80053ea:	1c7b      	adds	r3, r7, #1
 80053ec:	181b      	adds	r3, r3, r0
 80053ee:	106d      	asrs	r5, r5, #1
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	d900      	bls.n	80053f6 <__ssputs_r+0x3e>
 80053f4:	001d      	movs	r5, r3
 80053f6:	0552      	lsls	r2, r2, #21
 80053f8:	d528      	bpl.n	800544c <__ssputs_r+0x94>
 80053fa:	0029      	movs	r1, r5
 80053fc:	9802      	ldr	r0, [sp, #8]
 80053fe:	f7ff ff4b 	bl	8005298 <_malloc_r>
 8005402:	1e06      	subs	r6, r0, #0
 8005404:	d02c      	beq.n	8005460 <__ssputs_r+0xa8>
 8005406:	9a01      	ldr	r2, [sp, #4]
 8005408:	6921      	ldr	r1, [r4, #16]
 800540a:	f000 fae2 	bl	80059d2 <memcpy>
 800540e:	89a2      	ldrh	r2, [r4, #12]
 8005410:	4b18      	ldr	r3, [pc, #96]	@ (8005474 <__ssputs_r+0xbc>)
 8005412:	401a      	ands	r2, r3
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	4313      	orrs	r3, r2
 8005418:	81a3      	strh	r3, [r4, #12]
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	6126      	str	r6, [r4, #16]
 800541e:	18f6      	adds	r6, r6, r3
 8005420:	6026      	str	r6, [r4, #0]
 8005422:	003e      	movs	r6, r7
 8005424:	6165      	str	r5, [r4, #20]
 8005426:	1aed      	subs	r5, r5, r3
 8005428:	60a5      	str	r5, [r4, #8]
 800542a:	42be      	cmp	r6, r7
 800542c:	d900      	bls.n	8005430 <__ssputs_r+0x78>
 800542e:	003e      	movs	r6, r7
 8005430:	0032      	movs	r2, r6
 8005432:	9903      	ldr	r1, [sp, #12]
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	f000 fa9b 	bl	8005970 <memmove>
 800543a:	2000      	movs	r0, #0
 800543c:	68a3      	ldr	r3, [r4, #8]
 800543e:	1b9b      	subs	r3, r3, r6
 8005440:	60a3      	str	r3, [r4, #8]
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	199b      	adds	r3, r3, r6
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	b005      	add	sp, #20
 800544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544c:	002a      	movs	r2, r5
 800544e:	9802      	ldr	r0, [sp, #8]
 8005450:	f000 fac8 	bl	80059e4 <_realloc_r>
 8005454:	1e06      	subs	r6, r0, #0
 8005456:	d1e0      	bne.n	800541a <__ssputs_r+0x62>
 8005458:	6921      	ldr	r1, [r4, #16]
 800545a:	9802      	ldr	r0, [sp, #8]
 800545c:	f7ff feb0 	bl	80051c0 <_free_r>
 8005460:	230c      	movs	r3, #12
 8005462:	2001      	movs	r0, #1
 8005464:	9a02      	ldr	r2, [sp, #8]
 8005466:	4240      	negs	r0, r0
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	89a2      	ldrh	r2, [r4, #12]
 800546c:	3334      	adds	r3, #52	@ 0x34
 800546e:	4313      	orrs	r3, r2
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	e7e9      	b.n	8005448 <__ssputs_r+0x90>
 8005474:	fffffb7f 	.word	0xfffffb7f

08005478 <_svfiprintf_r>:
 8005478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547a:	b0a1      	sub	sp, #132	@ 0x84
 800547c:	9003      	str	r0, [sp, #12]
 800547e:	001d      	movs	r5, r3
 8005480:	898b      	ldrh	r3, [r1, #12]
 8005482:	000f      	movs	r7, r1
 8005484:	0016      	movs	r6, r2
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	d511      	bpl.n	80054ae <_svfiprintf_r+0x36>
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10e      	bne.n	80054ae <_svfiprintf_r+0x36>
 8005490:	2140      	movs	r1, #64	@ 0x40
 8005492:	f7ff ff01 	bl	8005298 <_malloc_r>
 8005496:	6038      	str	r0, [r7, #0]
 8005498:	6138      	str	r0, [r7, #16]
 800549a:	2800      	cmp	r0, #0
 800549c:	d105      	bne.n	80054aa <_svfiprintf_r+0x32>
 800549e:	230c      	movs	r3, #12
 80054a0:	9a03      	ldr	r2, [sp, #12]
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	2001      	movs	r0, #1
 80054a6:	4240      	negs	r0, r0
 80054a8:	e0cf      	b.n	800564a <_svfiprintf_r+0x1d2>
 80054aa:	2340      	movs	r3, #64	@ 0x40
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	2300      	movs	r3, #0
 80054b0:	ac08      	add	r4, sp, #32
 80054b2:	6163      	str	r3, [r4, #20]
 80054b4:	3320      	adds	r3, #32
 80054b6:	7663      	strb	r3, [r4, #25]
 80054b8:	3310      	adds	r3, #16
 80054ba:	76a3      	strb	r3, [r4, #26]
 80054bc:	9507      	str	r5, [sp, #28]
 80054be:	0035      	movs	r5, r6
 80054c0:	782b      	ldrb	r3, [r5, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <_svfiprintf_r+0x52>
 80054c6:	2b25      	cmp	r3, #37	@ 0x25
 80054c8:	d148      	bne.n	800555c <_svfiprintf_r+0xe4>
 80054ca:	1bab      	subs	r3, r5, r6
 80054cc:	9305      	str	r3, [sp, #20]
 80054ce:	42b5      	cmp	r5, r6
 80054d0:	d00b      	beq.n	80054ea <_svfiprintf_r+0x72>
 80054d2:	0032      	movs	r2, r6
 80054d4:	0039      	movs	r1, r7
 80054d6:	9803      	ldr	r0, [sp, #12]
 80054d8:	f7ff ff6e 	bl	80053b8 <__ssputs_r>
 80054dc:	3001      	adds	r0, #1
 80054de:	d100      	bne.n	80054e2 <_svfiprintf_r+0x6a>
 80054e0:	e0ae      	b.n	8005640 <_svfiprintf_r+0x1c8>
 80054e2:	6963      	ldr	r3, [r4, #20]
 80054e4:	9a05      	ldr	r2, [sp, #20]
 80054e6:	189b      	adds	r3, r3, r2
 80054e8:	6163      	str	r3, [r4, #20]
 80054ea:	782b      	ldrb	r3, [r5, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d100      	bne.n	80054f2 <_svfiprintf_r+0x7a>
 80054f0:	e0a6      	b.n	8005640 <_svfiprintf_r+0x1c8>
 80054f2:	2201      	movs	r2, #1
 80054f4:	2300      	movs	r3, #0
 80054f6:	4252      	negs	r2, r2
 80054f8:	6062      	str	r2, [r4, #4]
 80054fa:	a904      	add	r1, sp, #16
 80054fc:	3254      	adds	r2, #84	@ 0x54
 80054fe:	1852      	adds	r2, r2, r1
 8005500:	1c6e      	adds	r6, r5, #1
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	60e3      	str	r3, [r4, #12]
 8005506:	60a3      	str	r3, [r4, #8]
 8005508:	7013      	strb	r3, [r2, #0]
 800550a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800550c:	4b54      	ldr	r3, [pc, #336]	@ (8005660 <_svfiprintf_r+0x1e8>)
 800550e:	2205      	movs	r2, #5
 8005510:	0018      	movs	r0, r3
 8005512:	7831      	ldrb	r1, [r6, #0]
 8005514:	9305      	str	r3, [sp, #20]
 8005516:	f000 fa51 	bl	80059bc <memchr>
 800551a:	1c75      	adds	r5, r6, #1
 800551c:	2800      	cmp	r0, #0
 800551e:	d11f      	bne.n	8005560 <_svfiprintf_r+0xe8>
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	06d3      	lsls	r3, r2, #27
 8005524:	d504      	bpl.n	8005530 <_svfiprintf_r+0xb8>
 8005526:	2353      	movs	r3, #83	@ 0x53
 8005528:	a904      	add	r1, sp, #16
 800552a:	185b      	adds	r3, r3, r1
 800552c:	2120      	movs	r1, #32
 800552e:	7019      	strb	r1, [r3, #0]
 8005530:	0713      	lsls	r3, r2, #28
 8005532:	d504      	bpl.n	800553e <_svfiprintf_r+0xc6>
 8005534:	2353      	movs	r3, #83	@ 0x53
 8005536:	a904      	add	r1, sp, #16
 8005538:	185b      	adds	r3, r3, r1
 800553a:	212b      	movs	r1, #43	@ 0x2b
 800553c:	7019      	strb	r1, [r3, #0]
 800553e:	7833      	ldrb	r3, [r6, #0]
 8005540:	2b2a      	cmp	r3, #42	@ 0x2a
 8005542:	d016      	beq.n	8005572 <_svfiprintf_r+0xfa>
 8005544:	0035      	movs	r5, r6
 8005546:	2100      	movs	r1, #0
 8005548:	200a      	movs	r0, #10
 800554a:	68e3      	ldr	r3, [r4, #12]
 800554c:	782a      	ldrb	r2, [r5, #0]
 800554e:	1c6e      	adds	r6, r5, #1
 8005550:	3a30      	subs	r2, #48	@ 0x30
 8005552:	2a09      	cmp	r2, #9
 8005554:	d950      	bls.n	80055f8 <_svfiprintf_r+0x180>
 8005556:	2900      	cmp	r1, #0
 8005558:	d111      	bne.n	800557e <_svfiprintf_r+0x106>
 800555a:	e017      	b.n	800558c <_svfiprintf_r+0x114>
 800555c:	3501      	adds	r5, #1
 800555e:	e7af      	b.n	80054c0 <_svfiprintf_r+0x48>
 8005560:	9b05      	ldr	r3, [sp, #20]
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	1ac0      	subs	r0, r0, r3
 8005566:	2301      	movs	r3, #1
 8005568:	4083      	lsls	r3, r0
 800556a:	4313      	orrs	r3, r2
 800556c:	002e      	movs	r6, r5
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	e7cc      	b.n	800550c <_svfiprintf_r+0x94>
 8005572:	9b07      	ldr	r3, [sp, #28]
 8005574:	1d19      	adds	r1, r3, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	9107      	str	r1, [sp, #28]
 800557a:	2b00      	cmp	r3, #0
 800557c:	db01      	blt.n	8005582 <_svfiprintf_r+0x10a>
 800557e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005580:	e004      	b.n	800558c <_svfiprintf_r+0x114>
 8005582:	425b      	negs	r3, r3
 8005584:	60e3      	str	r3, [r4, #12]
 8005586:	2302      	movs	r3, #2
 8005588:	4313      	orrs	r3, r2
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	782b      	ldrb	r3, [r5, #0]
 800558e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005590:	d10c      	bne.n	80055ac <_svfiprintf_r+0x134>
 8005592:	786b      	ldrb	r3, [r5, #1]
 8005594:	2b2a      	cmp	r3, #42	@ 0x2a
 8005596:	d134      	bne.n	8005602 <_svfiprintf_r+0x18a>
 8005598:	9b07      	ldr	r3, [sp, #28]
 800559a:	3502      	adds	r5, #2
 800559c:	1d1a      	adds	r2, r3, #4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	9207      	str	r2, [sp, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da01      	bge.n	80055aa <_svfiprintf_r+0x132>
 80055a6:	2301      	movs	r3, #1
 80055a8:	425b      	negs	r3, r3
 80055aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ac:	4e2d      	ldr	r6, [pc, #180]	@ (8005664 <_svfiprintf_r+0x1ec>)
 80055ae:	2203      	movs	r2, #3
 80055b0:	0030      	movs	r0, r6
 80055b2:	7829      	ldrb	r1, [r5, #0]
 80055b4:	f000 fa02 	bl	80059bc <memchr>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d006      	beq.n	80055ca <_svfiprintf_r+0x152>
 80055bc:	2340      	movs	r3, #64	@ 0x40
 80055be:	1b80      	subs	r0, r0, r6
 80055c0:	4083      	lsls	r3, r0
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	3501      	adds	r5, #1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	7829      	ldrb	r1, [r5, #0]
 80055cc:	2206      	movs	r2, #6
 80055ce:	4826      	ldr	r0, [pc, #152]	@ (8005668 <_svfiprintf_r+0x1f0>)
 80055d0:	1c6e      	adds	r6, r5, #1
 80055d2:	7621      	strb	r1, [r4, #24]
 80055d4:	f000 f9f2 	bl	80059bc <memchr>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d038      	beq.n	800564e <_svfiprintf_r+0x1d6>
 80055dc:	4b23      	ldr	r3, [pc, #140]	@ (800566c <_svfiprintf_r+0x1f4>)
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d122      	bne.n	8005628 <_svfiprintf_r+0x1b0>
 80055e2:	2207      	movs	r2, #7
 80055e4:	9b07      	ldr	r3, [sp, #28]
 80055e6:	3307      	adds	r3, #7
 80055e8:	4393      	bics	r3, r2
 80055ea:	3308      	adds	r3, #8
 80055ec:	9307      	str	r3, [sp, #28]
 80055ee:	6963      	ldr	r3, [r4, #20]
 80055f0:	9a04      	ldr	r2, [sp, #16]
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	6163      	str	r3, [r4, #20]
 80055f6:	e762      	b.n	80054be <_svfiprintf_r+0x46>
 80055f8:	4343      	muls	r3, r0
 80055fa:	0035      	movs	r5, r6
 80055fc:	2101      	movs	r1, #1
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	e7a4      	b.n	800554c <_svfiprintf_r+0xd4>
 8005602:	2300      	movs	r3, #0
 8005604:	200a      	movs	r0, #10
 8005606:	0019      	movs	r1, r3
 8005608:	3501      	adds	r5, #1
 800560a:	6063      	str	r3, [r4, #4]
 800560c:	782a      	ldrb	r2, [r5, #0]
 800560e:	1c6e      	adds	r6, r5, #1
 8005610:	3a30      	subs	r2, #48	@ 0x30
 8005612:	2a09      	cmp	r2, #9
 8005614:	d903      	bls.n	800561e <_svfiprintf_r+0x1a6>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0c8      	beq.n	80055ac <_svfiprintf_r+0x134>
 800561a:	9109      	str	r1, [sp, #36]	@ 0x24
 800561c:	e7c6      	b.n	80055ac <_svfiprintf_r+0x134>
 800561e:	4341      	muls	r1, r0
 8005620:	0035      	movs	r5, r6
 8005622:	2301      	movs	r3, #1
 8005624:	1889      	adds	r1, r1, r2
 8005626:	e7f1      	b.n	800560c <_svfiprintf_r+0x194>
 8005628:	aa07      	add	r2, sp, #28
 800562a:	9200      	str	r2, [sp, #0]
 800562c:	0021      	movs	r1, r4
 800562e:	003a      	movs	r2, r7
 8005630:	4b0f      	ldr	r3, [pc, #60]	@ (8005670 <_svfiprintf_r+0x1f8>)
 8005632:	9803      	ldr	r0, [sp, #12]
 8005634:	e000      	b.n	8005638 <_svfiprintf_r+0x1c0>
 8005636:	bf00      	nop
 8005638:	9004      	str	r0, [sp, #16]
 800563a:	9b04      	ldr	r3, [sp, #16]
 800563c:	3301      	adds	r3, #1
 800563e:	d1d6      	bne.n	80055ee <_svfiprintf_r+0x176>
 8005640:	89bb      	ldrh	r3, [r7, #12]
 8005642:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005644:	065b      	lsls	r3, r3, #25
 8005646:	d500      	bpl.n	800564a <_svfiprintf_r+0x1d2>
 8005648:	e72c      	b.n	80054a4 <_svfiprintf_r+0x2c>
 800564a:	b021      	add	sp, #132	@ 0x84
 800564c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564e:	aa07      	add	r2, sp, #28
 8005650:	9200      	str	r2, [sp, #0]
 8005652:	0021      	movs	r1, r4
 8005654:	003a      	movs	r2, r7
 8005656:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <_svfiprintf_r+0x1f8>)
 8005658:	9803      	ldr	r0, [sp, #12]
 800565a:	f000 f87b 	bl	8005754 <_printf_i>
 800565e:	e7eb      	b.n	8005638 <_svfiprintf_r+0x1c0>
 8005660:	08005b40 	.word	0x08005b40
 8005664:	08005b46 	.word	0x08005b46
 8005668:	08005b4a 	.word	0x08005b4a
 800566c:	00000000 	.word	0x00000000
 8005670:	080053b9 	.word	0x080053b9

08005674 <_printf_common>:
 8005674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005676:	0016      	movs	r6, r2
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	688a      	ldr	r2, [r1, #8]
 800567c:	690b      	ldr	r3, [r1, #16]
 800567e:	000c      	movs	r4, r1
 8005680:	9000      	str	r0, [sp, #0]
 8005682:	4293      	cmp	r3, r2
 8005684:	da00      	bge.n	8005688 <_printf_common+0x14>
 8005686:	0013      	movs	r3, r2
 8005688:	0022      	movs	r2, r4
 800568a:	6033      	str	r3, [r6, #0]
 800568c:	3243      	adds	r2, #67	@ 0x43
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	2a00      	cmp	r2, #0
 8005692:	d001      	beq.n	8005698 <_printf_common+0x24>
 8005694:	3301      	adds	r3, #1
 8005696:	6033      	str	r3, [r6, #0]
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	069b      	lsls	r3, r3, #26
 800569c:	d502      	bpl.n	80056a4 <_printf_common+0x30>
 800569e:	6833      	ldr	r3, [r6, #0]
 80056a0:	3302      	adds	r3, #2
 80056a2:	6033      	str	r3, [r6, #0]
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	2306      	movs	r3, #6
 80056a8:	0015      	movs	r5, r2
 80056aa:	401d      	ands	r5, r3
 80056ac:	421a      	tst	r2, r3
 80056ae:	d027      	beq.n	8005700 <_printf_common+0x8c>
 80056b0:	0023      	movs	r3, r4
 80056b2:	3343      	adds	r3, #67	@ 0x43
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	1e5a      	subs	r2, r3, #1
 80056b8:	4193      	sbcs	r3, r2
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	0692      	lsls	r2, r2, #26
 80056be:	d430      	bmi.n	8005722 <_printf_common+0xae>
 80056c0:	0022      	movs	r2, r4
 80056c2:	9901      	ldr	r1, [sp, #4]
 80056c4:	9800      	ldr	r0, [sp, #0]
 80056c6:	9d08      	ldr	r5, [sp, #32]
 80056c8:	3243      	adds	r2, #67	@ 0x43
 80056ca:	47a8      	blx	r5
 80056cc:	3001      	adds	r0, #1
 80056ce:	d025      	beq.n	800571c <_printf_common+0xa8>
 80056d0:	2206      	movs	r2, #6
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	2500      	movs	r5, #0
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d105      	bne.n	80056e8 <_printf_common+0x74>
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	68e5      	ldr	r5, [r4, #12]
 80056e0:	1aed      	subs	r5, r5, r3
 80056e2:	43eb      	mvns	r3, r5
 80056e4:	17db      	asrs	r3, r3, #31
 80056e6:	401d      	ands	r5, r3
 80056e8:	68a3      	ldr	r3, [r4, #8]
 80056ea:	6922      	ldr	r2, [r4, #16]
 80056ec:	4293      	cmp	r3, r2
 80056ee:	dd01      	ble.n	80056f4 <_printf_common+0x80>
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	18ed      	adds	r5, r5, r3
 80056f4:	2600      	movs	r6, #0
 80056f6:	42b5      	cmp	r5, r6
 80056f8:	d120      	bne.n	800573c <_printf_common+0xc8>
 80056fa:	2000      	movs	r0, #0
 80056fc:	e010      	b.n	8005720 <_printf_common+0xac>
 80056fe:	3501      	adds	r5, #1
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	6832      	ldr	r2, [r6, #0]
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	42ab      	cmp	r3, r5
 8005708:	ddd2      	ble.n	80056b0 <_printf_common+0x3c>
 800570a:	0022      	movs	r2, r4
 800570c:	2301      	movs	r3, #1
 800570e:	9901      	ldr	r1, [sp, #4]
 8005710:	9800      	ldr	r0, [sp, #0]
 8005712:	9f08      	ldr	r7, [sp, #32]
 8005714:	3219      	adds	r2, #25
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	d1f0      	bne.n	80056fe <_printf_common+0x8a>
 800571c:	2001      	movs	r0, #1
 800571e:	4240      	negs	r0, r0
 8005720:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005722:	2030      	movs	r0, #48	@ 0x30
 8005724:	18e1      	adds	r1, r4, r3
 8005726:	3143      	adds	r1, #67	@ 0x43
 8005728:	7008      	strb	r0, [r1, #0]
 800572a:	0021      	movs	r1, r4
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	3145      	adds	r1, #69	@ 0x45
 8005730:	7809      	ldrb	r1, [r1, #0]
 8005732:	18a2      	adds	r2, r4, r2
 8005734:	3243      	adds	r2, #67	@ 0x43
 8005736:	3302      	adds	r3, #2
 8005738:	7011      	strb	r1, [r2, #0]
 800573a:	e7c1      	b.n	80056c0 <_printf_common+0x4c>
 800573c:	0022      	movs	r2, r4
 800573e:	2301      	movs	r3, #1
 8005740:	9901      	ldr	r1, [sp, #4]
 8005742:	9800      	ldr	r0, [sp, #0]
 8005744:	9f08      	ldr	r7, [sp, #32]
 8005746:	321a      	adds	r2, #26
 8005748:	47b8      	blx	r7
 800574a:	3001      	adds	r0, #1
 800574c:	d0e6      	beq.n	800571c <_printf_common+0xa8>
 800574e:	3601      	adds	r6, #1
 8005750:	e7d1      	b.n	80056f6 <_printf_common+0x82>
	...

08005754 <_printf_i>:
 8005754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005756:	b08b      	sub	sp, #44	@ 0x2c
 8005758:	9206      	str	r2, [sp, #24]
 800575a:	000a      	movs	r2, r1
 800575c:	3243      	adds	r2, #67	@ 0x43
 800575e:	9307      	str	r3, [sp, #28]
 8005760:	9005      	str	r0, [sp, #20]
 8005762:	9203      	str	r2, [sp, #12]
 8005764:	7e0a      	ldrb	r2, [r1, #24]
 8005766:	000c      	movs	r4, r1
 8005768:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800576a:	2a78      	cmp	r2, #120	@ 0x78
 800576c:	d809      	bhi.n	8005782 <_printf_i+0x2e>
 800576e:	2a62      	cmp	r2, #98	@ 0x62
 8005770:	d80b      	bhi.n	800578a <_printf_i+0x36>
 8005772:	2a00      	cmp	r2, #0
 8005774:	d100      	bne.n	8005778 <_printf_i+0x24>
 8005776:	e0bc      	b.n	80058f2 <_printf_i+0x19e>
 8005778:	497b      	ldr	r1, [pc, #492]	@ (8005968 <_printf_i+0x214>)
 800577a:	9104      	str	r1, [sp, #16]
 800577c:	2a58      	cmp	r2, #88	@ 0x58
 800577e:	d100      	bne.n	8005782 <_printf_i+0x2e>
 8005780:	e090      	b.n	80058a4 <_printf_i+0x150>
 8005782:	0025      	movs	r5, r4
 8005784:	3542      	adds	r5, #66	@ 0x42
 8005786:	702a      	strb	r2, [r5, #0]
 8005788:	e022      	b.n	80057d0 <_printf_i+0x7c>
 800578a:	0010      	movs	r0, r2
 800578c:	3863      	subs	r0, #99	@ 0x63
 800578e:	2815      	cmp	r0, #21
 8005790:	d8f7      	bhi.n	8005782 <_printf_i+0x2e>
 8005792:	f7fa fcb9 	bl	8000108 <__gnu_thumb1_case_shi>
 8005796:	0016      	.short	0x0016
 8005798:	fff6001f 	.word	0xfff6001f
 800579c:	fff6fff6 	.word	0xfff6fff6
 80057a0:	001ffff6 	.word	0x001ffff6
 80057a4:	fff6fff6 	.word	0xfff6fff6
 80057a8:	fff6fff6 	.word	0xfff6fff6
 80057ac:	003600a1 	.word	0x003600a1
 80057b0:	fff60080 	.word	0xfff60080
 80057b4:	00b2fff6 	.word	0x00b2fff6
 80057b8:	0036fff6 	.word	0x0036fff6
 80057bc:	fff6fff6 	.word	0xfff6fff6
 80057c0:	0084      	.short	0x0084
 80057c2:	0025      	movs	r5, r4
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	3542      	adds	r5, #66	@ 0x42
 80057c8:	1d11      	adds	r1, r2, #4
 80057ca:	6019      	str	r1, [r3, #0]
 80057cc:	6813      	ldr	r3, [r2, #0]
 80057ce:	702b      	strb	r3, [r5, #0]
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0a0      	b.n	8005916 <_printf_i+0x1c2>
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	6809      	ldr	r1, [r1, #0]
 80057d8:	1d02      	adds	r2, r0, #4
 80057da:	060d      	lsls	r5, r1, #24
 80057dc:	d50b      	bpl.n	80057f6 <_printf_i+0xa2>
 80057de:	6806      	ldr	r6, [r0, #0]
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	2e00      	cmp	r6, #0
 80057e4:	da03      	bge.n	80057ee <_printf_i+0x9a>
 80057e6:	232d      	movs	r3, #45	@ 0x2d
 80057e8:	9a03      	ldr	r2, [sp, #12]
 80057ea:	4276      	negs	r6, r6
 80057ec:	7013      	strb	r3, [r2, #0]
 80057ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005968 <_printf_i+0x214>)
 80057f0:	270a      	movs	r7, #10
 80057f2:	9304      	str	r3, [sp, #16]
 80057f4:	e018      	b.n	8005828 <_printf_i+0xd4>
 80057f6:	6806      	ldr	r6, [r0, #0]
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	0649      	lsls	r1, r1, #25
 80057fc:	d5f1      	bpl.n	80057e2 <_printf_i+0x8e>
 80057fe:	b236      	sxth	r6, r6
 8005800:	e7ef      	b.n	80057e2 <_printf_i+0x8e>
 8005802:	6808      	ldr	r0, [r1, #0]
 8005804:	6819      	ldr	r1, [r3, #0]
 8005806:	c940      	ldmia	r1!, {r6}
 8005808:	0605      	lsls	r5, r0, #24
 800580a:	d402      	bmi.n	8005812 <_printf_i+0xbe>
 800580c:	0640      	lsls	r0, r0, #25
 800580e:	d500      	bpl.n	8005812 <_printf_i+0xbe>
 8005810:	b2b6      	uxth	r6, r6
 8005812:	6019      	str	r1, [r3, #0]
 8005814:	4b54      	ldr	r3, [pc, #336]	@ (8005968 <_printf_i+0x214>)
 8005816:	270a      	movs	r7, #10
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	2a6f      	cmp	r2, #111	@ 0x6f
 800581c:	d100      	bne.n	8005820 <_printf_i+0xcc>
 800581e:	3f02      	subs	r7, #2
 8005820:	0023      	movs	r3, r4
 8005822:	2200      	movs	r2, #0
 8005824:	3343      	adds	r3, #67	@ 0x43
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	60a3      	str	r3, [r4, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	db03      	blt.n	8005838 <_printf_i+0xe4>
 8005830:	2104      	movs	r1, #4
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	438a      	bics	r2, r1
 8005836:	6022      	str	r2, [r4, #0]
 8005838:	2e00      	cmp	r6, #0
 800583a:	d102      	bne.n	8005842 <_printf_i+0xee>
 800583c:	9d03      	ldr	r5, [sp, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00c      	beq.n	800585c <_printf_i+0x108>
 8005842:	9d03      	ldr	r5, [sp, #12]
 8005844:	0030      	movs	r0, r6
 8005846:	0039      	movs	r1, r7
 8005848:	f7fa fcee 	bl	8000228 <__aeabi_uidivmod>
 800584c:	9b04      	ldr	r3, [sp, #16]
 800584e:	3d01      	subs	r5, #1
 8005850:	5c5b      	ldrb	r3, [r3, r1]
 8005852:	702b      	strb	r3, [r5, #0]
 8005854:	0033      	movs	r3, r6
 8005856:	0006      	movs	r6, r0
 8005858:	429f      	cmp	r7, r3
 800585a:	d9f3      	bls.n	8005844 <_printf_i+0xf0>
 800585c:	2f08      	cmp	r7, #8
 800585e:	d109      	bne.n	8005874 <_printf_i+0x120>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	07db      	lsls	r3, r3, #31
 8005864:	d506      	bpl.n	8005874 <_printf_i+0x120>
 8005866:	6862      	ldr	r2, [r4, #4]
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	429a      	cmp	r2, r3
 800586c:	dc02      	bgt.n	8005874 <_printf_i+0x120>
 800586e:	2330      	movs	r3, #48	@ 0x30
 8005870:	3d01      	subs	r5, #1
 8005872:	702b      	strb	r3, [r5, #0]
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	1b5b      	subs	r3, r3, r5
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	9b07      	ldr	r3, [sp, #28]
 800587c:	0021      	movs	r1, r4
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	9805      	ldr	r0, [sp, #20]
 8005882:	9b06      	ldr	r3, [sp, #24]
 8005884:	aa09      	add	r2, sp, #36	@ 0x24
 8005886:	f7ff fef5 	bl	8005674 <_printf_common>
 800588a:	3001      	adds	r0, #1
 800588c:	d148      	bne.n	8005920 <_printf_i+0x1cc>
 800588e:	2001      	movs	r0, #1
 8005890:	4240      	negs	r0, r0
 8005892:	b00b      	add	sp, #44	@ 0x2c
 8005894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005896:	2220      	movs	r2, #32
 8005898:	6809      	ldr	r1, [r1, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	6022      	str	r2, [r4, #0]
 800589e:	2278      	movs	r2, #120	@ 0x78
 80058a0:	4932      	ldr	r1, [pc, #200]	@ (800596c <_printf_i+0x218>)
 80058a2:	9104      	str	r1, [sp, #16]
 80058a4:	0021      	movs	r1, r4
 80058a6:	3145      	adds	r1, #69	@ 0x45
 80058a8:	700a      	strb	r2, [r1, #0]
 80058aa:	6819      	ldr	r1, [r3, #0]
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	c940      	ldmia	r1!, {r6}
 80058b0:	0610      	lsls	r0, r2, #24
 80058b2:	d402      	bmi.n	80058ba <_printf_i+0x166>
 80058b4:	0650      	lsls	r0, r2, #25
 80058b6:	d500      	bpl.n	80058ba <_printf_i+0x166>
 80058b8:	b2b6      	uxth	r6, r6
 80058ba:	6019      	str	r1, [r3, #0]
 80058bc:	07d3      	lsls	r3, r2, #31
 80058be:	d502      	bpl.n	80058c6 <_printf_i+0x172>
 80058c0:	2320      	movs	r3, #32
 80058c2:	4313      	orrs	r3, r2
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	2e00      	cmp	r6, #0
 80058c8:	d001      	beq.n	80058ce <_printf_i+0x17a>
 80058ca:	2710      	movs	r7, #16
 80058cc:	e7a8      	b.n	8005820 <_printf_i+0xcc>
 80058ce:	2220      	movs	r2, #32
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	4393      	bics	r3, r2
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	e7f8      	b.n	80058ca <_printf_i+0x176>
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	680d      	ldr	r5, [r1, #0]
 80058dc:	1d10      	adds	r0, r2, #4
 80058de:	6949      	ldr	r1, [r1, #20]
 80058e0:	6018      	str	r0, [r3, #0]
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	062e      	lsls	r6, r5, #24
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0x198>
 80058e8:	6019      	str	r1, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <_printf_i+0x19e>
 80058ec:	066d      	lsls	r5, r5, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0x194>
 80058f0:	8019      	strh	r1, [r3, #0]
 80058f2:	2300      	movs	r3, #0
 80058f4:	9d03      	ldr	r5, [sp, #12]
 80058f6:	6123      	str	r3, [r4, #16]
 80058f8:	e7bf      	b.n	800587a <_printf_i+0x126>
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	1d11      	adds	r1, r2, #4
 80058fe:	6019      	str	r1, [r3, #0]
 8005900:	6815      	ldr	r5, [r2, #0]
 8005902:	2100      	movs	r1, #0
 8005904:	0028      	movs	r0, r5
 8005906:	6862      	ldr	r2, [r4, #4]
 8005908:	f000 f858 	bl	80059bc <memchr>
 800590c:	2800      	cmp	r0, #0
 800590e:	d001      	beq.n	8005914 <_printf_i+0x1c0>
 8005910:	1b40      	subs	r0, r0, r5
 8005912:	6060      	str	r0, [r4, #4]
 8005914:	6863      	ldr	r3, [r4, #4]
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	2300      	movs	r3, #0
 800591a:	9a03      	ldr	r2, [sp, #12]
 800591c:	7013      	strb	r3, [r2, #0]
 800591e:	e7ac      	b.n	800587a <_printf_i+0x126>
 8005920:	002a      	movs	r2, r5
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	9906      	ldr	r1, [sp, #24]
 8005926:	9805      	ldr	r0, [sp, #20]
 8005928:	9d07      	ldr	r5, [sp, #28]
 800592a:	47a8      	blx	r5
 800592c:	3001      	adds	r0, #1
 800592e:	d0ae      	beq.n	800588e <_printf_i+0x13a>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	079b      	lsls	r3, r3, #30
 8005934:	d415      	bmi.n	8005962 <_printf_i+0x20e>
 8005936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005938:	68e0      	ldr	r0, [r4, #12]
 800593a:	4298      	cmp	r0, r3
 800593c:	daa9      	bge.n	8005892 <_printf_i+0x13e>
 800593e:	0018      	movs	r0, r3
 8005940:	e7a7      	b.n	8005892 <_printf_i+0x13e>
 8005942:	0022      	movs	r2, r4
 8005944:	2301      	movs	r3, #1
 8005946:	9906      	ldr	r1, [sp, #24]
 8005948:	9805      	ldr	r0, [sp, #20]
 800594a:	9e07      	ldr	r6, [sp, #28]
 800594c:	3219      	adds	r2, #25
 800594e:	47b0      	blx	r6
 8005950:	3001      	adds	r0, #1
 8005952:	d09c      	beq.n	800588e <_printf_i+0x13a>
 8005954:	3501      	adds	r5, #1
 8005956:	68e3      	ldr	r3, [r4, #12]
 8005958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	42ab      	cmp	r3, r5
 800595e:	dcf0      	bgt.n	8005942 <_printf_i+0x1ee>
 8005960:	e7e9      	b.n	8005936 <_printf_i+0x1e2>
 8005962:	2500      	movs	r5, #0
 8005964:	e7f7      	b.n	8005956 <_printf_i+0x202>
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	08005b51 	.word	0x08005b51
 800596c:	08005b62 	.word	0x08005b62

08005970 <memmove>:
 8005970:	b510      	push	{r4, lr}
 8005972:	4288      	cmp	r0, r1
 8005974:	d806      	bhi.n	8005984 <memmove+0x14>
 8005976:	2300      	movs	r3, #0
 8005978:	429a      	cmp	r2, r3
 800597a:	d008      	beq.n	800598e <memmove+0x1e>
 800597c:	5ccc      	ldrb	r4, [r1, r3]
 800597e:	54c4      	strb	r4, [r0, r3]
 8005980:	3301      	adds	r3, #1
 8005982:	e7f9      	b.n	8005978 <memmove+0x8>
 8005984:	188b      	adds	r3, r1, r2
 8005986:	4298      	cmp	r0, r3
 8005988:	d2f5      	bcs.n	8005976 <memmove+0x6>
 800598a:	3a01      	subs	r2, #1
 800598c:	d200      	bcs.n	8005990 <memmove+0x20>
 800598e:	bd10      	pop	{r4, pc}
 8005990:	5c8b      	ldrb	r3, [r1, r2]
 8005992:	5483      	strb	r3, [r0, r2]
 8005994:	e7f9      	b.n	800598a <memmove+0x1a>
	...

08005998 <_sbrk_r>:
 8005998:	2300      	movs	r3, #0
 800599a:	b570      	push	{r4, r5, r6, lr}
 800599c:	4d06      	ldr	r5, [pc, #24]	@ (80059b8 <_sbrk_r+0x20>)
 800599e:	0004      	movs	r4, r0
 80059a0:	0008      	movs	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fd f948 	bl	8002c38 <_sbrk>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d103      	bne.n	80059b4 <_sbrk_r+0x1c>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d000      	beq.n	80059b4 <_sbrk_r+0x1c>
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	20000460 	.word	0x20000460

080059bc <memchr>:
 80059bc:	b2c9      	uxtb	r1, r1
 80059be:	1882      	adds	r2, r0, r2
 80059c0:	4290      	cmp	r0, r2
 80059c2:	d101      	bne.n	80059c8 <memchr+0xc>
 80059c4:	2000      	movs	r0, #0
 80059c6:	4770      	bx	lr
 80059c8:	7803      	ldrb	r3, [r0, #0]
 80059ca:	428b      	cmp	r3, r1
 80059cc:	d0fb      	beq.n	80059c6 <memchr+0xa>
 80059ce:	3001      	adds	r0, #1
 80059d0:	e7f6      	b.n	80059c0 <memchr+0x4>

080059d2 <memcpy>:
 80059d2:	2300      	movs	r3, #0
 80059d4:	b510      	push	{r4, lr}
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d100      	bne.n	80059dc <memcpy+0xa>
 80059da:	bd10      	pop	{r4, pc}
 80059dc:	5ccc      	ldrb	r4, [r1, r3]
 80059de:	54c4      	strb	r4, [r0, r3]
 80059e0:	3301      	adds	r3, #1
 80059e2:	e7f8      	b.n	80059d6 <memcpy+0x4>

080059e4 <_realloc_r>:
 80059e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059e6:	0006      	movs	r6, r0
 80059e8:	000c      	movs	r4, r1
 80059ea:	0015      	movs	r5, r2
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d105      	bne.n	80059fc <_realloc_r+0x18>
 80059f0:	0011      	movs	r1, r2
 80059f2:	f7ff fc51 	bl	8005298 <_malloc_r>
 80059f6:	0004      	movs	r4, r0
 80059f8:	0020      	movs	r0, r4
 80059fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	d103      	bne.n	8005a08 <_realloc_r+0x24>
 8005a00:	f7ff fbde 	bl	80051c0 <_free_r>
 8005a04:	2400      	movs	r4, #0
 8005a06:	e7f7      	b.n	80059f8 <_realloc_r+0x14>
 8005a08:	f000 f81b 	bl	8005a42 <_malloc_usable_size_r>
 8005a0c:	0007      	movs	r7, r0
 8005a0e:	4285      	cmp	r5, r0
 8005a10:	d802      	bhi.n	8005a18 <_realloc_r+0x34>
 8005a12:	0843      	lsrs	r3, r0, #1
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	d3ef      	bcc.n	80059f8 <_realloc_r+0x14>
 8005a18:	0029      	movs	r1, r5
 8005a1a:	0030      	movs	r0, r6
 8005a1c:	f7ff fc3c 	bl	8005298 <_malloc_r>
 8005a20:	9001      	str	r0, [sp, #4]
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d0ee      	beq.n	8005a04 <_realloc_r+0x20>
 8005a26:	002a      	movs	r2, r5
 8005a28:	42bd      	cmp	r5, r7
 8005a2a:	d900      	bls.n	8005a2e <_realloc_r+0x4a>
 8005a2c:	003a      	movs	r2, r7
 8005a2e:	0021      	movs	r1, r4
 8005a30:	9801      	ldr	r0, [sp, #4]
 8005a32:	f7ff ffce 	bl	80059d2 <memcpy>
 8005a36:	0021      	movs	r1, r4
 8005a38:	0030      	movs	r0, r6
 8005a3a:	f7ff fbc1 	bl	80051c0 <_free_r>
 8005a3e:	9c01      	ldr	r4, [sp, #4]
 8005a40:	e7da      	b.n	80059f8 <_realloc_r+0x14>

08005a42 <_malloc_usable_size_r>:
 8005a42:	1f0b      	subs	r3, r1, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	1f18      	subs	r0, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	da01      	bge.n	8005a50 <_malloc_usable_size_r+0xe>
 8005a4c:	580b      	ldr	r3, [r1, r0]
 8005a4e:	18c0      	adds	r0, r0, r3
 8005a50:	4770      	bx	lr
	...

08005a54 <_init>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr

08005a60 <_fini>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	46c0      	nop			@ (mov r8, r8)
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr
