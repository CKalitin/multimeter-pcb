
ADS1115-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003524  08003524  00004524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c8  080035c8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080035c8  080035c8  000045c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035d0  080035d0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d0  080035d0  000045d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035d4  080035d4  000045d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080035d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  08003640  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003640  00005274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009357  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165c  00000000  00000000  0000e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0000fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070f  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017059  00000000  00000000  00010a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b854  00000000  00000000  00027ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084725  00000000  00000000  00033304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7a29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a30  00000000  00000000  000b7a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ba49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800350c 	.word	0x0800350c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800350c 	.word	0x0800350c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fb88 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f811 	bl	800018a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8a2 	bl	80002b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800016c:	f000 f848 	bl	8000200 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f874 	bl	800025c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  HAL_Delay(100);
 8000174:	2064      	movs	r0, #100	@ 0x64
 8000176:	f000 fbdf 	bl	8000938 <HAL_Delay>
  ADS1115_Init();
 800017a:	f000 f8f1 	bl	8000360 <ADS1115_Init>
  HAL_Delay(100);
 800017e:	2064      	movs	r0, #100	@ 0x64
 8000180:	f000 fbda 	bl	8000938 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    ADS1115_Read(); // Read the ADC value
 8000184:	f000 f95c 	bl	8000440 <ADS1115_Read>
 8000188:	e7fc      	b.n	8000184 <main+0x28>

0800018a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018a:	b580      	push	{r7, lr}
 800018c:	b090      	sub	sp, #64	@ 0x40
 800018e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000190:	f107 0318 	add.w	r3, r7, #24
 8000194:	2228      	movs	r2, #40	@ 0x28
 8000196:	2100      	movs	r1, #0
 8000198:	4618      	mov	r0, r3
 800019a:	f002 fd27 	bl	8002bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ac:	2302      	movs	r3, #2
 80001ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b4:	2310      	movs	r3, #16
 80001b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b8:	2300      	movs	r3, #0
 80001ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f001 feab 	bl	8001f1c <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001cc:	f000 f9f2 	bl	80005b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 f919 	bl	8002420 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f4:	f000 f9de 	bl	80005b4 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000204:	4b12      	ldr	r3, [pc, #72]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000206:	4a13      	ldr	r2, [pc, #76]	@ (8000254 <MX_I2C1_Init+0x54>)
 8000208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <MX_I2C1_Init+0x50>)
 800020c:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <MX_I2C1_Init+0x58>)
 800020e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000210:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000216:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <MX_I2C1_Init+0x50>)
 800021e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000224:	4b0a      	ldr	r3, [pc, #40]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000226:	2200      	movs	r2, #0
 8000228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800022a:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <MX_I2C1_Init+0x50>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000236:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800023c:	4804      	ldr	r0, [pc, #16]	@ (8000250 <MX_I2C1_Init+0x50>)
 800023e:	f000 fe39 	bl	8000eb4 <HAL_I2C_Init>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000248:	f000 f9b4 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000084 	.word	0x20000084
 8000254:	40005400 	.word	0x40005400
 8000258:	000186a0 	.word	0x000186a0

0800025c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000260:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000262:	4a12      	ldr	r2, [pc, #72]	@ (80002ac <MX_USART2_UART_Init+0x50>)
 8000264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000266:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000268:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800026c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026e:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000282:	220c      	movs	r2, #12
 8000284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000286:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000292:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000294:	f002 fa52 	bl	800273c <HAL_UART_Init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800029e:	f000 f989 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200000d8 	.word	0x200000d8
 80002ac:	40004400 	.word	0x40004400

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c4:	4b23      	ldr	r3, [pc, #140]	@ (8000354 <MX_GPIO_Init+0xa4>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a22      	ldr	r2, [pc, #136]	@ (8000354 <MX_GPIO_Init+0xa4>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b20      	ldr	r3, [pc, #128]	@ (8000354 <MX_GPIO_Init+0xa4>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0304 	and.w	r3, r3, #4
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000354 <MX_GPIO_Init+0xa4>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <MX_GPIO_Init+0xa4>)
 80002e2:	f043 0310 	orr.w	r3, r3, #16
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <MX_GPIO_Init+0xa4>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0310 	and.w	r3, r3, #16
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <MX_GPIO_Init+0xa4>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a16      	ldr	r2, [pc, #88]	@ (8000354 <MX_GPIO_Init+0xa4>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <MX_GPIO_Init+0xa4>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2120      	movs	r1, #32
 8000310:	4811      	ldr	r0, [pc, #68]	@ (8000358 <MX_GPIO_Init+0xa8>)
 8000312:	f000 fd9d 	bl	8000e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000316:	2320      	movs	r3, #32
 8000318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2302      	movs	r3, #2
 8000324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	480a      	ldr	r0, [pc, #40]	@ (8000358 <MX_GPIO_Init+0xa8>)
 800032e:	f000 fc0b 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALRT_Pin */
  GPIO_InitStruct.Pin = ALRT_Pin;
 8000332:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ALRT_GPIO_Port, &GPIO_InitStruct);
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4619      	mov	r1, r3
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_GPIO_Init+0xac>)
 8000348:	f000 fbfe 	bl	8000b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800034c:	bf00      	nop
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	40010800 	.word	0x40010800
 800035c:	40011000 	.word	0x40011000

08000360 <ADS1115_Init>:

/* USER CODE BEGIN 4 */

static void ADS1115_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  ADS1115_Write(&ADS1115_REG_CONFIG, &ads1115_config);
 8000364:	4908      	ldr	r1, [pc, #32]	@ (8000388 <ADS1115_Init+0x28>)
 8000366:	4809      	ldr	r0, [pc, #36]	@ (800038c <ADS1115_Init+0x2c>)
 8000368:	f000 f838 	bl	80003dc <ADS1115_Write>
  ADS1115_Write(&ADS1115_REG_LO_THRESH, &ads1115_low_thresh);
 800036c:	4908      	ldr	r1, [pc, #32]	@ (8000390 <ADS1115_Init+0x30>)
 800036e:	4809      	ldr	r0, [pc, #36]	@ (8000394 <ADS1115_Init+0x34>)
 8000370:	f000 f834 	bl	80003dc <ADS1115_Write>
  ADS1115_Write(&ADS1115_REG_HI_THRESH, &ads1115_high_thresh);
 8000374:	4908      	ldr	r1, [pc, #32]	@ (8000398 <ADS1115_Init+0x38>)
 8000376:	4809      	ldr	r0, [pc, #36]	@ (800039c <ADS1115_Init+0x3c>)
 8000378:	f000 f830 	bl	80003dc <ADS1115_Write>
  ADS1115_Select_Register(&ADS1115_REG_CONVERSION); // Select conversion register for reading from
 800037c:	4808      	ldr	r0, [pc, #32]	@ (80003a0 <ADS1115_Init+0x40>)
 800037e:	f000 f811 	bl	80003a4 <ADS1115_Select_Register>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000004 	.word	0x20000004
 800038c:	20000001 	.word	0x20000001
 8000390:	20000006 	.word	0x20000006
 8000394:	20000002 	.word	0x20000002
 8000398:	20000008 	.word	0x20000008
 800039c:	20000003 	.word	0x20000003
 80003a0:	20000120 	.word	0x20000120

080003a4 <ADS1115_Select_Register>:

static void ADS1115_Select_Register(uint8_t* reg) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af02      	add	r7, sp, #8
 80003aa:	6078      	str	r0, [r7, #4]
  uint8_t buf[1] = {*reg}; // Buffer to send, first byte is the register address
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	733b      	strb	r3, [r7, #12]
  I2C_Transmit(&hi2c1, ADS1115_ADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <ADS1115_Select_Register+0x30>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4619      	mov	r1, r3
 80003b8:	f107 020c 	add.w	r2, r7, #12
 80003bc:	f04f 33ff 	mov.w	r3, #4294967295
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	2301      	movs	r3, #1
 80003c4:	4804      	ldr	r0, [pc, #16]	@ (80003d8 <ADS1115_Select_Register+0x34>)
 80003c6:	f000 f875 	bl	80004b4 <I2C_Transmit>
}
 80003ca:	bf00      	nop
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000084 	.word	0x20000084

080003dc <ADS1115_Write>:

static void ADS1115_Write(uint8_t* reg, uint16_t* data) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af02      	add	r7, sp, #8
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  // Write this better later, this data length this is stupid what if the msb is actually 0x00 and you want to send that
  uint8_t data_byte_msb = (uint8_t)((*data >> 8) & 0xFF); // First byte of data to send, most significant byte
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	0a1b      	lsrs	r3, r3, #8
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	73fb      	strb	r3, [r7, #15]
  uint8_t data_byte_lsb = (uint8_t)(*data & 0xFF); // Least significant byte, with 0xFF mask to clear the upper 8 bits, probably not needed
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	881b      	ldrh	r3, [r3, #0]
 80003f4:	73bb      	strb	r3, [r7, #14]
  uint8_t buf[3] = {*reg, data_byte_msb, data_byte_lsb}; // Buffer to send, first byte is the register address, second and third are the data bytes
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	723b      	strb	r3, [r7, #8]
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	727b      	strb	r3, [r7, #9]
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	72bb      	strb	r3, [r7, #10]
  uint8_t buf_len = data_byte_msb == 0x00 ? 2 : 3; // If msb if empty, only send register and lsb byte
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d101      	bne.n	800040e <ADS1115_Write+0x32>
 800040a:	2302      	movs	r3, #2
 800040c:	e000      	b.n	8000410 <ADS1115_Write+0x34>
 800040e:	2303      	movs	r3, #3
 8000410:	737b      	strb	r3, [r7, #13]
  I2C_Transmit(&hi2c1, ADS1115_ADDR, buf, buf_len, HAL_MAX_DELAY);
 8000412:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <ADS1115_Write+0x5c>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	4618      	mov	r0, r3
 8000418:	7b7b      	ldrb	r3, [r7, #13]
 800041a:	b29b      	uxth	r3, r3
 800041c:	f107 0208 	add.w	r2, r7, #8
 8000420:	f04f 31ff 	mov.w	r1, #4294967295
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	4601      	mov	r1, r0
 8000428:	4804      	ldr	r0, [pc, #16]	@ (800043c <ADS1115_Write+0x60>)
 800042a:	f000 f843 	bl	80004b4 <I2C_Transmit>
}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	20000084 	.word	0x20000084

08000440 <ADS1115_Read>:

// This reads from whatever register was last selected. Note that both Select_Register and Write functions will select the register to either read or write to
static int16_t ADS1115_Read(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b090      	sub	sp, #64	@ 0x40
 8000444:	af02      	add	r7, sp, #8
  uint8_t buf[2];
  I2C_Receive(&hi2c1, ADS1115_ADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <ADS1115_Read+0x64>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000450:	f04f 33ff 	mov.w	r3, #4294967295
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2302      	movs	r3, #2
 8000458:	4813      	ldr	r0, [pc, #76]	@ (80004a8 <ADS1115_Read+0x68>)
 800045a:	f000 f86b 	bl	8000534 <I2C_Receive>
  int16_t ads_data = (buf[0] << 8) | buf[1]; // Combine the two bytes into a single 16-bit value
 800045e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000462:	021b      	lsls	r3, r3, #8
 8000464:	b21a      	sxth	r2, r3
 8000466:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800046a:	b21b      	sxth	r3, r3
 800046c:	4313      	orrs	r3, r2
 800046e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  char msg[50];
  snprintf(msg, sizeof(msg), "ADC Value: %d\r\n", ads_data);
 8000470:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000474:	4638      	mov	r0, r7
 8000476:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <ADS1115_Read+0x6c>)
 8000478:	2132      	movs	r1, #50	@ 0x32
 800047a:	f002 fb83 	bl	8002b84 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);  
 800047e:	463b      	mov	r3, r7
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff fe63 	bl	800014c <strlen>
 8000486:	4603      	mov	r3, r0
 8000488:	b29a      	uxth	r2, r3
 800048a:	4639      	mov	r1, r7
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
 8000490:	4807      	ldr	r0, [pc, #28]	@ (80004b0 <ADS1115_Read+0x70>)
 8000492:	f002 f9a3 	bl	80027dc <HAL_UART_Transmit>
  return ads_data;
 8000496:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
}
 800049a:	4618      	mov	r0, r3
 800049c:	3738      	adds	r7, #56	@ 0x38
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000084 	.word	0x20000084
 80004ac:	08003524 	.word	0x08003524
 80004b0:	200000d8 	.word	0x200000d8

080004b4 <I2C_Transmit>:

static HAL_StatusTypeDef I2C_Transmit(I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint8_t* pData, uint16_t Size, uint32_t Timeout)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b094      	sub	sp, #80	@ 0x50
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	607a      	str	r2, [r7, #4]
 80004be:	461a      	mov	r2, r3
 80004c0:	460b      	mov	r3, r1
 80004c2:	817b      	strh	r3, [r7, #10]
 80004c4:	4613      	mov	r3, r2
 80004c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, Size, Timeout);
 80004c8:	893a      	ldrh	r2, [r7, #8]
 80004ca:	8979      	ldrh	r1, [r7, #10]
 80004cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	4613      	mov	r3, r2
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	68f8      	ldr	r0, [r7, #12]
 80004d6:	f000 fe31 	bl	800113c <HAL_I2C_Master_Transmit>
 80004da:	4603      	mov	r3, r0
 80004dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  if (status != HAL_OK)
 80004e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d019      	beq.n	800051c <I2C_Transmit+0x68>
  {
    char msg[50];
    snprintf(msg, sizeof(msg), "I2C Transmit Error: %d\r\n", status);
 80004e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80004ec:	f107 0014 	add.w	r0, r7, #20
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <I2C_Transmit+0x74>)
 80004f2:	2132      	movs	r1, #50	@ 0x32
 80004f4:	f002 fb46 	bl	8002b84 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe25 	bl	800014c <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	f107 0114 	add.w	r1, r7, #20
 800050a:	f04f 33ff 	mov.w	r3, #4294967295
 800050e:	4807      	ldr	r0, [pc, #28]	@ (800052c <I2C_Transmit+0x78>)
 8000510:	f002 f964 	bl	80027dc <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000514:	2120      	movs	r1, #32
 8000516:	4806      	ldr	r0, [pc, #24]	@ (8000530 <I2C_Transmit+0x7c>)
 8000518:	f000 fcb2 	bl	8000e80 <HAL_GPIO_TogglePin>
  }
  return status;
 800051c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8000520:	4618      	mov	r0, r3
 8000522:	3748      	adds	r7, #72	@ 0x48
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08003534 	.word	0x08003534
 800052c:	200000d8 	.word	0x200000d8
 8000530:	40010800 	.word	0x40010800

08000534 <I2C_Receive>:

static HAL_StatusTypeDef I2C_Receive(I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint8_t* pData, uint16_t Size, uint32_t Timeout)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af02      	add	r7, sp, #8
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	607a      	str	r2, [r7, #4]
 800053e:	461a      	mov	r2, r3
 8000540:	460b      	mov	r3, r1
 8000542:	817b      	strh	r3, [r7, #10]
 8000544:	4613      	mov	r3, r2
 8000546:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_I2C_Master_Receive(hi2c, DevAddress, pData, Size, Timeout);
 8000548:	893a      	ldrh	r2, [r7, #8]
 800054a:	8979      	ldrh	r1, [r7, #10]
 800054c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	4613      	mov	r3, r2
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 feef 	bl	8001338 <HAL_I2C_Master_Receive>
 800055a:	4603      	mov	r3, r0
 800055c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  if (status != HAL_OK)
 8000560:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000564:	2b00      	cmp	r3, #0
 8000566:	d019      	beq.n	800059c <I2C_Receive+0x68>
  {
    char msg[50];
    snprintf(msg, sizeof(msg), "I2C Receive Error: %d\r\n", status);
 8000568:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800056c:	f107 0014 	add.w	r0, r7, #20
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <I2C_Receive+0x74>)
 8000572:	2132      	movs	r1, #50	@ 0x32
 8000574:	f002 fb06 	bl	8002b84 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fde5 	bl	800014c <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	f107 0114 	add.w	r1, r7, #20
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	4807      	ldr	r0, [pc, #28]	@ (80005ac <I2C_Receive+0x78>)
 8000590:	f002 f924 	bl	80027dc <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000594:	2120      	movs	r1, #32
 8000596:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <I2C_Receive+0x7c>)
 8000598:	f000 fc72 	bl	8000e80 <HAL_GPIO_TogglePin>
  }
  return status;
 800059c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3748      	adds	r7, #72	@ 0x48
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08003550 	.word	0x08003550
 80005ac:	200000d8 	.word	0x200000d8
 80005b0:	40010800 	.word	0x40010800

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <Error_Handler+0x8>

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <HAL_MspInit+0x5c>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_MspInit+0x5c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <HAL_MspInit+0x5c>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <HAL_MspInit+0x5c>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <HAL_MspInit+0x60>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <HAL_MspInit+0x60>)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40021000 	.word	0x40021000
 8000620:	40010000 	.word	0x40010000

08000624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a1d      	ldr	r2, [pc, #116]	@ (80006b4 <HAL_I2C_MspInit+0x90>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d132      	bne.n	80006aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <HAL_I2C_MspInit+0x94>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <HAL_I2C_MspInit+0x94>)
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <HAL_I2C_MspInit+0x94>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800065c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000662:	2312      	movs	r3, #18
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <HAL_I2C_MspInit+0x98>)
 8000672:	f000 fa69 	bl	8000b48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <HAL_I2C_MspInit+0x9c>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
 800067c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
 8000684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
 800068c:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <HAL_I2C_MspInit+0x9c>)
 800068e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000690:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <HAL_I2C_MspInit+0x94>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <HAL_I2C_MspInit+0x94>)
 8000698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <HAL_I2C_MspInit+0x94>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	@ 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40005400 	.word	0x40005400
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	40010000 	.word	0x40010000

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1b      	ldr	r2, [pc, #108]	@ (800074c <HAL_UART_MspInit+0x88>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d12f      	bne.n	8000744 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <HAL_UART_MspInit+0x8c>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <HAL_UART_MspInit+0x8c>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ee:	61d3      	str	r3, [r2, #28]
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <HAL_UART_MspInit+0x8c>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <HAL_UART_MspInit+0x8c>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <HAL_UART_MspInit+0x8c>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <HAL_UART_MspInit+0x8c>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000714:	2304      	movs	r3, #4
 8000716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	480b      	ldr	r0, [pc, #44]	@ (8000754 <HAL_UART_MspInit+0x90>)
 8000728:	f000 fa0e 	bl	8000b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800072c:	2308      	movs	r3, #8
 800072e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <HAL_UART_MspInit+0x90>)
 8000740:	f000 fa02 	bl	8000b48 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40004400 	.word	0x40004400
 8000750:	40021000 	.word	0x40021000
 8000754:	40010800 	.word	0x40010800

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <NMI_Handler+0x4>

08000760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <MemManage_Handler+0x4>

08000770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <UsageFault_Handler+0x4>

08000780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 f8aa 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b8:	4a14      	ldr	r2, [pc, #80]	@ (800080c <_sbrk+0x5c>)
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <_sbrk+0x60>)
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <_sbrk+0x64>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <_sbrk+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d207      	bcs.n	80007f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e0:	f002 fa0c 	bl	8002bfc <__errno>
 80007e4:	4603      	mov	r3, r0
 80007e6:	220c      	movs	r2, #12
 80007e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	e009      	b.n	8000804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f6:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	4a05      	ldr	r2, [pc, #20]	@ (8000814 <_sbrk+0x64>)
 8000800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20005000 	.word	0x20005000
 8000810:	00000400 	.word	0x00000400
 8000814:	20000124 	.word	0x20000124
 8000818:	20000278 	.word	0x20000278

0800081c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff fff8 	bl	800081c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480b      	ldr	r0, [pc, #44]	@ (800085c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800082e:	490c      	ldr	r1, [pc, #48]	@ (8000860 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000830:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a09      	ldr	r2, [pc, #36]	@ (8000868 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000844:	4c09      	ldr	r4, [pc, #36]	@ (800086c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f002 f9d9 	bl	8002c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fc81 	bl	800015c <main>
  bx lr
 800085a:	4770      	bx	lr
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000864:	080035d8 	.word	0x080035d8
  ldr r2, =_sbss
 8000868:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800086c:	20000274 	.word	0x20000274

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_Init+0x28>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	@ (800089c <HAL_Init+0x28>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f92b 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	200f      	movs	r0, #15
 800088c:	f000 f808 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff fe96 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <HAL_InitTick+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_InitTick+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f935 	bl	8000b2e <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00e      	b.n	80008ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d80a      	bhi.n	80008ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f000 f90b 	bl	8000af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4a06      	ldr	r2, [pc, #24]	@ (80008fc <HAL_InitTick+0x5c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000000c 	.word	0x2000000c
 80008f8:	20000014 	.word	0x20000014
 80008fc:	20000010 	.word	0x20000010

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	@ (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a03      	ldr	r2, [pc, #12]	@ (8000920 <HAL_IncTick+0x20>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000014 	.word	0x20000014
 8000920:	20000128 	.word	0x20000128

08000924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	@ (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000128 	.word	0x20000128

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff fff0 	bl	8000924 <HAL_GetTick>
 8000944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d005      	beq.n	800095e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_Delay+0x44>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095e:	bf00      	nop
 8000960:	f7ff ffe0 	bl	8000924 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f7      	bhi.n	8000960 <HAL_Delay+0x28>
  {
  }
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000014 	.word	0x20000014

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	@ (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	@ (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	@ (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	@ 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	@ 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f7ff ff90 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff49 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff5e 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff90 	bl	8000a38 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5f 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffb0 	bl	8000a9c <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b08b      	sub	sp, #44	@ 0x2c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e169      	b.n	8000e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f040 8158 	bne.w	8000e2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4a9a      	ldr	r2, [pc, #616]	@ (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d05e      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b84:	4a98      	ldr	r2, [pc, #608]	@ (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d875      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000b8a:	4a98      	ldr	r2, [pc, #608]	@ (8000dec <HAL_GPIO_Init+0x2a4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d058      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b90:	4a96      	ldr	r2, [pc, #600]	@ (8000dec <HAL_GPIO_Init+0x2a4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d86f      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000b96:	4a96      	ldr	r2, [pc, #600]	@ (8000df0 <HAL_GPIO_Init+0x2a8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d052      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b9c:	4a94      	ldr	r2, [pc, #592]	@ (8000df0 <HAL_GPIO_Init+0x2a8>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d869      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000ba2:	4a94      	ldr	r2, [pc, #592]	@ (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d04c      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a92      	ldr	r2, [pc, #584]	@ (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d863      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bae:	4a92      	ldr	r2, [pc, #584]	@ (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d046      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000bb4:	4a90      	ldr	r2, [pc, #576]	@ (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d85d      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d82a      	bhi.n	8000c14 <HAL_GPIO_Init+0xcc>
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d859      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc8 <HAL_GPIO_Init+0x80>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c1d 	.word	0x08000c1d
 8000bd0:	08000c2f 	.word	0x08000c2f
 8000bd4:	08000c71 	.word	0x08000c71
 8000bd8:	08000c77 	.word	0x08000c77
 8000bdc:	08000c77 	.word	0x08000c77
 8000be0:	08000c77 	.word	0x08000c77
 8000be4:	08000c77 	.word	0x08000c77
 8000be8:	08000c77 	.word	0x08000c77
 8000bec:	08000c77 	.word	0x08000c77
 8000bf0:	08000c77 	.word	0x08000c77
 8000bf4:	08000c77 	.word	0x08000c77
 8000bf8:	08000c77 	.word	0x08000c77
 8000bfc:	08000c77 	.word	0x08000c77
 8000c00:	08000c77 	.word	0x08000c77
 8000c04:	08000c77 	.word	0x08000c77
 8000c08:	08000c77 	.word	0x08000c77
 8000c0c:	08000c25 	.word	0x08000c25
 8000c10:	08000c39 	.word	0x08000c39
 8000c14:	4a79      	ldr	r2, [pc, #484]	@ (8000dfc <HAL_GPIO_Init+0x2b4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1a:	e02c      	b.n	8000c76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e029      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e024      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	3308      	adds	r3, #8
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e01f      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	330c      	adds	r3, #12
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e01a      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e013      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	611a      	str	r2, [r3, #16]
          break;
 8000c62:	e009      	b.n	8000c78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	615a      	str	r2, [r3, #20]
          break;
 8000c6e:	e003      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e000      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          break;
 8000c76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2bff      	cmp	r3, #255	@ 0xff
 8000c7c:	d801      	bhi.n	8000c82 <HAL_GPIO_Init+0x13a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	e001      	b.n	8000c86 <HAL_GPIO_Init+0x13e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3304      	adds	r3, #4
 8000c86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2bff      	cmp	r3, #255	@ 0xff
 8000c8c:	d802      	bhi.n	8000c94 <HAL_GPIO_Init+0x14c>
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	e002      	b.n	8000c9a <HAL_GPIO_Init+0x152>
 8000c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c96:	3b08      	subs	r3, #8
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	6a39      	ldr	r1, [r7, #32]
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 80b1 	beq.w	8000e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce0:	4a48      	ldr	r2, [pc, #288]	@ (8000e04 <HAL_GPIO_Init+0x2bc>)
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a40      	ldr	r2, [pc, #256]	@ (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d013      	beq.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e0c <HAL_GPIO_Init+0x2c4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d00d      	beq.n	8000d30 <HAL_GPIO_Init+0x1e8>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3e      	ldr	r2, [pc, #248]	@ (8000e10 <HAL_GPIO_Init+0x2c8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d007      	beq.n	8000d2c <HAL_GPIO_Init+0x1e4>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e14 <HAL_GPIO_Init+0x2cc>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d101      	bne.n	8000d28 <HAL_GPIO_Init+0x1e0>
 8000d24:	2303      	movs	r3, #3
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	e004      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d34:	2300      	movs	r3, #0
 8000d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d38:	f002 0203 	and.w	r2, r2, #3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	4093      	lsls	r3, r2
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d46:	492f      	ldr	r1, [pc, #188]	@ (8000e04 <HAL_GPIO_Init+0x2bc>)
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d60:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	492c      	ldr	r1, [pc, #176]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4928      	ldr	r1, [pc, #160]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	4922      	ldr	r1, [pc, #136]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60cb      	str	r3, [r1, #12]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	491e      	ldr	r1, [pc, #120]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4918      	ldr	r1, [pc, #96]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4914      	ldr	r1, [pc, #80]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d021      	beq.n	8000e1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	490e      	ldr	r1, [pc, #56]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	e021      	b.n	8000e2a <HAL_GPIO_Init+0x2e2>
 8000de6:	bf00      	nop
 8000de8:	10320000 	.word	0x10320000
 8000dec:	10310000 	.word	0x10310000
 8000df0:	10220000 	.word	0x10220000
 8000df4:	10210000 	.word	0x10210000
 8000df8:	10120000 	.word	0x10120000
 8000dfc:	10110000 	.word	0x10110000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40011400 	.word	0x40011400
 8000e18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_GPIO_Init+0x304>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4909      	ldr	r1, [pc, #36]	@ (8000e4c <HAL_GPIO_Init+0x304>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e36:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f47f ae8e 	bne.w	8000b5c <HAL_GPIO_Init+0x14>
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	372c      	adds	r7, #44	@ 0x2c
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e60:	787b      	ldrb	r3, [r7, #1]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e6c:	e003      	b.n	8000e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	041a      	lsls	r2, r3, #16
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	611a      	str	r2, [r3, #16]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4013      	ands	r3, r2
 8000e98:	041a      	lsls	r2, r3, #16
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43d9      	mvns	r1, r3
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	400b      	ands	r3, r1
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	611a      	str	r2, [r3, #16]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
	...

08000eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e12b      	b.n	800111e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fba2 	bl	8000624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2224      	movs	r2, #36	@ 0x24
 8000ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0201 	bic.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f18:	f001 fbca 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8000f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a81      	ldr	r2, [pc, #516]	@ (8001128 <HAL_I2C_Init+0x274>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d807      	bhi.n	8000f38 <HAL_I2C_Init+0x84>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4a80      	ldr	r2, [pc, #512]	@ (800112c <HAL_I2C_Init+0x278>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	bf94      	ite	ls
 8000f30:	2301      	movls	r3, #1
 8000f32:	2300      	movhi	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	e006      	b.n	8000f46 <HAL_I2C_Init+0x92>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4a7d      	ldr	r2, [pc, #500]	@ (8001130 <HAL_I2C_Init+0x27c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	bf94      	ite	ls
 8000f40:	2301      	movls	r3, #1
 8000f42:	2300      	movhi	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e0e7      	b.n	800111e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4a78      	ldr	r2, [pc, #480]	@ (8001134 <HAL_I2C_Init+0x280>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9b      	lsrs	r3, r3, #18
 8000f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001128 <HAL_I2C_Init+0x274>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d802      	bhi.n	8000f88 <HAL_I2C_Init+0xd4>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	e009      	b.n	8000f9c <HAL_I2C_Init+0xe8>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	4a69      	ldr	r2, [pc, #420]	@ (8001138 <HAL_I2C_Init+0x284>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	099b      	lsrs	r3, r3, #6
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000fae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	495c      	ldr	r1, [pc, #368]	@ (8001128 <HAL_I2C_Init+0x274>)
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d819      	bhi.n	8000ff0 <HAL_I2C_Init+0x13c>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1e59      	subs	r1, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fca:	1c59      	adds	r1, r3, #1
 8000fcc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00a      	beq.n	8000fec <HAL_I2C_Init+0x138>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1e59      	subs	r1, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fea:	e051      	b.n	8001090 <HAL_I2C_Init+0x1dc>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e04f      	b.n	8001090 <HAL_I2C_Init+0x1dc>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d111      	bne.n	800101c <HAL_I2C_Init+0x168>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	1e58      	subs	r0, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6859      	ldr	r1, [r3, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	440b      	add	r3, r1
 8001006:	fbb0 f3f3 	udiv	r3, r0, r3
 800100a:	3301      	adds	r3, #1
 800100c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	e012      	b.n	8001042 <HAL_I2C_Init+0x18e>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1e58      	subs	r0, r3, #1
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	0099      	lsls	r1, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001032:	3301      	adds	r3, #1
 8001034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_I2C_Init+0x196>
 8001046:	2301      	movs	r3, #1
 8001048:	e022      	b.n	8001090 <HAL_I2C_Init+0x1dc>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10e      	bne.n	8001070 <HAL_I2C_Init+0x1bc>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	1e58      	subs	r0, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6859      	ldr	r1, [r3, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	440b      	add	r3, r1
 8001060:	fbb0 f3f3 	udiv	r3, r0, r3
 8001064:	3301      	adds	r3, #1
 8001066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800106e:	e00f      	b.n	8001090 <HAL_I2C_Init+0x1dc>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1e58      	subs	r0, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	0099      	lsls	r1, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	fbb0 f3f3 	udiv	r3, r0, r3
 8001086:	3301      	adds	r3, #1
 8001088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	6809      	ldr	r1, [r1, #0]
 8001094:	4313      	orrs	r3, r2
 8001096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69da      	ldr	r2, [r3, #28]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80010be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6911      	ldr	r1, [r2, #16]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68d2      	ldr	r2, [r2, #12]
 80010ca:	4311      	orrs	r1, r2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2220      	movs	r2, #32
 800110a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	000186a0 	.word	0x000186a0
 800112c:	001e847f 	.word	0x001e847f
 8001130:	003d08ff 	.word	0x003d08ff
 8001134:	431bde83 	.word	0x431bde83
 8001138:	10624dd3 	.word	0x10624dd3

0800113c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af02      	add	r7, sp, #8
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	461a      	mov	r2, r3
 8001148:	460b      	mov	r3, r1
 800114a:	817b      	strh	r3, [r7, #10]
 800114c:	4613      	mov	r3, r2
 800114e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff fbe8 	bl	8000924 <HAL_GetTick>
 8001154:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b20      	cmp	r3, #32
 8001160:	f040 80e0 	bne.w	8001324 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2319      	movs	r3, #25
 800116a:	2201      	movs	r2, #1
 800116c:	4970      	ldr	r1, [pc, #448]	@ (8001330 <HAL_I2C_Master_Transmit+0x1f4>)
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 fc9e 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800117a:	2302      	movs	r3, #2
 800117c:	e0d3      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_I2C_Master_Transmit+0x50>
 8001188:	2302      	movs	r3, #2
 800118a:	e0cc      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ea>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d007      	beq.n	80011b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0201 	orr.w	r2, r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2221      	movs	r2, #33	@ 0x21
 80011c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2210      	movs	r2, #16
 80011ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	893a      	ldrh	r2, [r7, #8]
 80011e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4a50      	ldr	r2, [pc, #320]	@ (8001334 <HAL_I2C_Master_Transmit+0x1f8>)
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011f4:	8979      	ldrh	r1, [r7, #10]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	6a3a      	ldr	r2, [r7, #32]
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 fb08 	bl	8001810 <I2C_MasterRequestWrite>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e08d      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001220:	e066      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	6a39      	ldr	r1, [r7, #32]
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 fd5c 	bl	8001ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00d      	beq.n	800124e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	2b04      	cmp	r3, #4
 8001238:	d107      	bne.n	800124a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e06b      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001268:	b29b      	uxth	r3, r3
 800126a:	3b01      	subs	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001276:	3b01      	subs	r3, #1
 8001278:	b29a      	uxth	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b04      	cmp	r3, #4
 800128a:	d11b      	bne.n	80012c4 <HAL_I2C_Master_Transmit+0x188>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001290:	2b00      	cmp	r3, #0
 8001292:	d017      	beq.n	80012c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012bc:	3b01      	subs	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	6a39      	ldr	r1, [r7, #32]
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 fd53 	bl	8001d74 <I2C_WaitOnBTFFlagUntilTimeout>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00d      	beq.n	80012f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d107      	bne.n	80012ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e01a      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d194      	bne.n	8001222 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2220      	movs	r2, #32
 800130c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	e000      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001324:	2302      	movs	r3, #2
  }
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	00100002 	.word	0x00100002
 8001334:	ffff0000 	.word	0xffff0000

08001338 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af02      	add	r7, sp, #8
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	461a      	mov	r2, r3
 8001344:	460b      	mov	r3, r1
 8001346:	817b      	strh	r3, [r7, #10]
 8001348:	4613      	mov	r3, r2
 800134a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff fae8 	bl	8000924 <HAL_GetTick>
 8001354:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b20      	cmp	r3, #32
 8001360:	f040 824b 	bne.w	80017fa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2319      	movs	r3, #25
 800136a:	2201      	movs	r2, #1
 800136c:	497f      	ldr	r1, [pc, #508]	@ (800156c <HAL_I2C_Master_Receive+0x234>)
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fb9e 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800137a:	2302      	movs	r3, #2
 800137c:	e23e      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_I2C_Master_Receive+0x54>
 8001388:	2302      	movs	r3, #2
 800138a:	e237      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d007      	beq.n	80013b2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2222      	movs	r2, #34	@ 0x22
 80013c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2210      	movs	r2, #16
 80013ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	893a      	ldrh	r2, [r7, #8]
 80013e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4a5f      	ldr	r2, [pc, #380]	@ (8001570 <HAL_I2C_Master_Receive+0x238>)
 80013f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013f4:	8979      	ldrh	r1, [r7, #10]
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 fa8a 	bl	8001914 <I2C_MasterRequestRead>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1f8      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800140e:	2b00      	cmp	r3, #0
 8001410:	d113      	bne.n	800143a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e1cc      	b.n	80017d4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11e      	bne.n	8001480 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001450:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001452:	b672      	cpsid	i
}
 8001454:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800147a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800147c:	b662      	cpsie	i
}
 800147e:	e035      	b.n	80014ec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001484:	2b02      	cmp	r3, #2
 8001486:	d11e      	bne.n	80014c6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001496:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014c2:	b662      	cpsie	i
}
 80014c4:	e012      	b.n	80014ec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80014d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80014ec:	e172      	b.n	80017d4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	f200 811f 	bhi.w	8001736 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d123      	bne.n	8001548 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001502:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 fc7d 	bl	8001e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e173      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800153c:	b29b      	uxth	r3, r3
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001546:	e145      	b.n	80017d4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154c:	2b02      	cmp	r3, #2
 800154e:	d152      	bne.n	80015f6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001556:	2200      	movs	r2, #0
 8001558:	4906      	ldr	r1, [pc, #24]	@ (8001574 <HAL_I2C_Master_Receive+0x23c>)
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 faa8 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e148      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
 800156a:	bf00      	nop
 800156c:	00100002 	.word	0x00100002
 8001570:	ffff0000 	.word	0xffff0000
 8001574:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800158a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80015be:	b662      	cpsie	i
}
 80015c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80015f4:	e0ee      	b.n	80017d4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fc:	2200      	movs	r2, #0
 80015fe:	4981      	ldr	r1, [pc, #516]	@ (8001804 <HAL_I2C_Master_Receive+0x4cc>)
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 fa55 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0f5      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800161e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800164c:	b29b      	uxth	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001656:	4b6c      	ldr	r3, [pc, #432]	@ (8001808 <HAL_I2C_Master_Receive+0x4d0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	4a6b      	ldr	r2, [pc, #428]	@ (800180c <HAL_I2C_Master_Receive+0x4d4>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0a1a      	lsrs	r2, r3, #8
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00da      	lsls	r2, r3, #3
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3b01      	subs	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d118      	bne.n	80016ae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f043 0220 	orr.w	r2, r3, #32
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800169e:	b662      	cpsie	i
}
 80016a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0a6      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d1d9      	bne.n	8001670 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016fe:	b662      	cpsie	i
}
 8001700:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b01      	subs	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001734:	e04e      	b.n	80017d4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001738:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fb62 	bl	8001e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e058      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b04      	cmp	r3, #4
 8001788:	d124      	bne.n	80017d4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800178e:	2b03      	cmp	r3, #3
 8001790:	d107      	bne.n	80017a2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f ae88 	bne.w	80014ee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80017fa:	2302      	movs	r3, #2
  }
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	00010004 	.word	0x00010004
 8001808:	2000000c 	.word	0x2000000c
 800180c:	14f8b589 	.word	0x14f8b589

08001810 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af02      	add	r7, sp, #8
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	460b      	mov	r3, r1
 800181e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b08      	cmp	r3, #8
 800182a:	d006      	beq.n	800183a <I2C_MasterRequestWrite+0x2a>
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d003      	beq.n	800183a <I2C_MasterRequestWrite+0x2a>
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001838:	d108      	bne.n	800184c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e00b      	b.n	8001864 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001850:	2b12      	cmp	r3, #18
 8001852:	d107      	bne.n	8001864 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001862:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f91d 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00d      	beq.n	8001898 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800188a:	d103      	bne.n	8001894 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001892:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e035      	b.n	8001904 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018a0:	d108      	bne.n	80018b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	e01b      	b.n	80018ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018b4:	897b      	ldrh	r3, [r7, #10]
 80018b6:	11db      	asrs	r3, r3, #7
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f003 0306 	and.w	r3, r3, #6
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f063 030f 	orn	r3, r3, #15
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	490e      	ldr	r1, [pc, #56]	@ (800190c <I2C_MasterRequestWrite+0xfc>)
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f966 	bl	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e010      	b.n	8001904 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4907      	ldr	r1, [pc, #28]	@ (8001910 <I2C_MasterRequestWrite+0x100>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f956 	bl	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	00010008 	.word	0x00010008
 8001910:	00010002 	.word	0x00010002

08001914 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	460b      	mov	r3, r1
 8001922:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001938:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d006      	beq.n	800194e <I2C_MasterRequestRead+0x3a>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d003      	beq.n	800194e <I2C_MasterRequestRead+0x3a>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800194c:	d108      	bne.n	8001960 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e00b      	b.n	8001978 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	2b11      	cmp	r3, #17
 8001966:	d107      	bne.n	8001978 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001976:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f893 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00d      	beq.n	80019ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800199e:	d103      	bne.n	80019a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e079      	b.n	8001aa0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019b4:	d108      	bne.n	80019c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019b6:	897b      	ldrh	r3, [r7, #10]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	e05f      	b.n	8001a88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	11db      	asrs	r3, r3, #7
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 0306 	and.w	r3, r3, #6
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f063 030f 	orn	r3, r3, #15
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4930      	ldr	r1, [pc, #192]	@ (8001aa8 <I2C_MasterRequestRead+0x194>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f8dc 	bl	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e054      	b.n	8001aa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019f6:	897b      	ldrh	r3, [r7, #10]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4929      	ldr	r1, [pc, #164]	@ (8001aac <I2C_MasterRequestRead+0x198>)
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f8cc 	bl	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e044      	b.n	8001aa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f831 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00d      	beq.n	8001a70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a62:	d103      	bne.n	8001a6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e017      	b.n	8001aa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a70:	897b      	ldrh	r3, [r7, #10]
 8001a72:	11db      	asrs	r3, r3, #7
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f003 0306 	and.w	r3, r3, #6
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f063 030e 	orn	r3, r3, #14
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4907      	ldr	r1, [pc, #28]	@ (8001aac <I2C_MasterRequestRead+0x198>)
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f888 	bl	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	00010008 	.word	0x00010008
 8001aac:	00010002 	.word	0x00010002

08001ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	4613      	mov	r3, r2
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac0:	e048      	b.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d044      	beq.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aca:	f7fe ff2b 	bl	8000924 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d139      	bne.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10d      	bne.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4013      	ands	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	e00c      	b.n	8001b20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4013      	ands	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d116      	bne.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e023      	b.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10d      	bne.n	8001b7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	43da      	mvns	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf0c      	ite	eq
 8001b70:	2301      	moveq	r3, #1
 8001b72:	2300      	movne	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	e00c      	b.n	8001b94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	43da      	mvns	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4013      	ands	r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d093      	beq.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bb2:	e071      	b.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc2:	d123      	bne.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	f043 0204 	orr.w	r2, r3, #4
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e067      	b.n	8001cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d041      	beq.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c14:	f7fe fe86 	bl	8000924 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d136      	bne.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d10c      	bne.n	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf14      	ite	ne
 8001c46:	2301      	movne	r3, #1
 8001c48:	2300      	moveq	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	e00b      	b.n	8001c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	43da      	mvns	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e021      	b.n	8001cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10c      	bne.n	8001cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4013      	ands	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e00b      	b.n	8001cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f af6d 	bne.w	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cf0:	e034      	b.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f8e3 	bl	8001ebe <I2C_IsAcknowledgeFailed>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e034      	b.n	8001d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d028      	beq.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0a:	f7fe fe0b 	bl	8000924 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11d      	bne.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2a:	2b80      	cmp	r3, #128	@ 0x80
 8001d2c:	d016      	beq.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f043 0220 	orr.w	r2, r3, #32
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e007      	b.n	8001d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	2b80      	cmp	r3, #128	@ 0x80
 8001d68:	d1c3      	bne.n	8001cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d80:	e034      	b.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f89b 	bl	8001ebe <I2C_IsAcknowledgeFailed>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e034      	b.n	8001dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d028      	beq.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7fe fdc3 	bl	8000924 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d11d      	bne.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d016      	beq.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e007      	b.n	8001dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d1c3      	bne.n	8001d82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e10:	e049      	b.n	8001ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b10      	cmp	r3, #16
 8001e1e:	d119      	bne.n	8001e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0210 	mvn.w	r2, #16
 8001e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e030      	b.n	8001eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e54:	f7fe fd66 	bl	8000924 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d302      	bcc.n	8001e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d11d      	bne.n	8001ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e74:	2b40      	cmp	r3, #64	@ 0x40
 8001e76:	d016      	beq.n	8001ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f043 0220 	orr.w	r2, r3, #32
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e007      	b.n	8001eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb0:	2b40      	cmp	r3, #64	@ 0x40
 8001eb2:	d1ae      	bne.n	8001e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed4:	d11b      	bne.n	8001f0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ede:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	f043 0204 	orr.w	r2, r3, #4
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e272      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8087 	beq.w	800204a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f3c:	4b92      	ldr	r3, [pc, #584]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d00c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f48:	4b8f      	ldr	r3, [pc, #572]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d112      	bne.n	8001f7a <HAL_RCC_OscConfig+0x5e>
 8001f54:	4b8c      	ldr	r3, [pc, #560]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f60:	d10b      	bne.n	8001f7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f62:	4b89      	ldr	r3, [pc, #548]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d06c      	beq.n	8002048 <HAL_RCC_OscConfig+0x12c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d168      	bne.n	8002048 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e24c      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x76>
 8001f84:	4b80      	ldr	r3, [pc, #512]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a7f      	ldr	r2, [pc, #508]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e02e      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x98>
 8001f9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a7a      	ldr	r2, [pc, #488]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b78      	ldr	r3, [pc, #480]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a77      	ldr	r2, [pc, #476]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e01d      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xbc>
 8001fbe:	4b72      	ldr	r3, [pc, #456]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a71      	ldr	r2, [pc, #452]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b6f      	ldr	r3, [pc, #444]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6e      	ldr	r2, [pc, #440]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd4>
 8001fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b68      	ldr	r3, [pc, #416]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a67      	ldr	r2, [pc, #412]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fc94 	bl	8000924 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7fe fc90 	bl	8000924 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e200      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b5d      	ldr	r3, [pc, #372]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0xe4>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe fc80 	bl	8000924 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002028:	f7fe fc7c 	bl	8000924 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	@ 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e1ec      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	4b53      	ldr	r3, [pc, #332]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x10c>
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d063      	beq.n	800211e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002056:	4b4c      	ldr	r3, [pc, #304]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002062:	4b49      	ldr	r3, [pc, #292]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	d11c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x18c>
 800206e:	4b46      	ldr	r3, [pc, #280]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d116      	bne.n	80020a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	4b43      	ldr	r3, [pc, #268]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_RCC_OscConfig+0x176>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e1c0      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002092:	4b3d      	ldr	r3, [pc, #244]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4939      	ldr	r1, [pc, #228]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	e03a      	b.n	800211e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b0:	4b36      	ldr	r3, [pc, #216]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7fe fc35 	bl	8000924 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020be:	f7fe fc31 	bl	8000924 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e1a1      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4927      	ldr	r1, [pc, #156]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
 80020f0:	e015      	b.n	800211e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f2:	4b26      	ldr	r3, [pc, #152]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7fe fc14 	bl	8000924 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7fe fc10 	bl	8000924 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e180      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d03a      	beq.n	80021a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d019      	beq.n	8002166 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002132:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <HAL_RCC_OscConfig+0x274>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002138:	f7fe fbf4 	bl	8000924 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002140:	f7fe fbf0 	bl	8000924 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e160      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HAL_RCC_OscConfig+0x26c>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800215e:	2001      	movs	r0, #1
 8002160:	f000 face 	bl	8002700 <RCC_Delay>
 8002164:	e01c      	b.n	80021a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_RCC_OscConfig+0x274>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7fe fbda 	bl	8000924 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002172:	e00f      	b.n	8002194 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7fe fbd6 	bl	8000924 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d908      	bls.n	8002194 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e146      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	42420000 	.word	0x42420000
 8002190:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	4b92      	ldr	r3, [pc, #584]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1e9      	bne.n	8002174 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a6 	beq.w	80022fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b8b      	ldr	r3, [pc, #556]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10d      	bne.n	80021da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b88      	ldr	r3, [pc, #544]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a87      	ldr	r2, [pc, #540]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	61d3      	str	r3, [r2, #28]
 80021ca:	4b85      	ldr	r3, [pc, #532]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4b82      	ldr	r3, [pc, #520]	@ (80023e4 <HAL_RCC_OscConfig+0x4c8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d118      	bne.n	8002218 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e6:	4b7f      	ldr	r3, [pc, #508]	@ (80023e4 <HAL_RCC_OscConfig+0x4c8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a7e      	ldr	r2, [pc, #504]	@ (80023e4 <HAL_RCC_OscConfig+0x4c8>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f2:	f7fe fb97 	bl	8000924 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7fe fb93 	bl	8000924 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b64      	cmp	r3, #100	@ 0x64
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e103      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	4b75      	ldr	r3, [pc, #468]	@ (80023e4 <HAL_RCC_OscConfig+0x4c8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x312>
 8002220:	4b6f      	ldr	r3, [pc, #444]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a6e      	ldr	r2, [pc, #440]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	e02d      	b.n	800228a <HAL_RCC_OscConfig+0x36e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x334>
 8002236:	4b6a      	ldr	r3, [pc, #424]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4a69      	ldr	r2, [pc, #420]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6213      	str	r3, [r2, #32]
 8002242:	4b67      	ldr	r3, [pc, #412]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a66      	ldr	r2, [pc, #408]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6213      	str	r3, [r2, #32]
 800224e:	e01c      	b.n	800228a <HAL_RCC_OscConfig+0x36e>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b05      	cmp	r3, #5
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_OscConfig+0x356>
 8002258:	4b61      	ldr	r3, [pc, #388]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4a60      	ldr	r2, [pc, #384]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6213      	str	r3, [r2, #32]
 8002264:	4b5e      	ldr	r3, [pc, #376]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a5d      	ldr	r2, [pc, #372]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	e00b      	b.n	800228a <HAL_RCC_OscConfig+0x36e>
 8002272:	4b5b      	ldr	r3, [pc, #364]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a5a      	ldr	r2, [pc, #360]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6213      	str	r3, [r2, #32]
 800227e:	4b58      	ldr	r3, [pc, #352]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a57      	ldr	r2, [pc, #348]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d015      	beq.n	80022be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7fe fb47 	bl	8000924 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7fe fb43 	bl	8000924 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0b1      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	4b4b      	ldr	r3, [pc, #300]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ee      	beq.n	800229a <HAL_RCC_OscConfig+0x37e>
 80022bc:	e014      	b.n	80022e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe fb31 	bl	8000924 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fb2d 	bl	8000924 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e09b      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022dc:	4b40      	ldr	r3, [pc, #256]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ee:	4b3c      	ldr	r3, [pc, #240]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4a3b      	ldr	r2, [pc, #236]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8087 	beq.w	8002412 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002304:	4b36      	ldr	r3, [pc, #216]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d061      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d146      	bne.n	80023a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b33      	ldr	r3, [pc, #204]	@ (80023e8 <HAL_RCC_OscConfig+0x4cc>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fb01 	bl	8000924 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe fafd 	bl	8000924 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e06d      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002338:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f0      	bne.n	8002326 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800234c:	d108      	bne.n	8002360 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	4921      	ldr	r1, [pc, #132]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002360:	4b1f      	ldr	r3, [pc, #124]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a19      	ldr	r1, [r3, #32]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	430b      	orrs	r3, r1
 8002372:	491b      	ldr	r1, [pc, #108]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HAL_RCC_OscConfig+0x4cc>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7fe fad1 	bl	8000924 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002386:	f7fe facd 	bl	8000924 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e03d      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x46a>
 80023a4:	e035      	b.n	8002412 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <HAL_RCC_OscConfig+0x4cc>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe faba 	bl	8000924 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe fab6 	bl	8000924 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e026      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x498>
 80023d2:	e01e      	b.n	8002412 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e019      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40007000 	.word	0x40007000
 80023e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_RCC_OscConfig+0x500>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000

08002420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0d0      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b6a      	ldr	r3, [pc, #424]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b67      	ldr	r3, [pc, #412]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4965      	ldr	r1, [pc, #404]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b63      	ldr	r3, [pc, #396]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b8      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800247c:	4b59      	ldr	r3, [pc, #356]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a58      	ldr	r2, [pc, #352]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002486:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002494:	4b53      	ldr	r3, [pc, #332]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a52      	ldr	r2, [pc, #328]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800249e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a0:	4b50      	ldr	r3, [pc, #320]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	494d      	ldr	r1, [pc, #308]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d040      	beq.n	8002540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b47      	ldr	r3, [pc, #284]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d115      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e07f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e073      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	4b3d      	ldr	r3, [pc, #244]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e06b      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b39      	ldr	r3, [pc, #228]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4936      	ldr	r1, [pc, #216]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002510:	f7fe fa08 	bl	8000924 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe fa04 	bl	8000924 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e053      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b2d      	ldr	r3, [pc, #180]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 020c 	and.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	429a      	cmp	r2, r3
 800253e:	d1eb      	bne.n	8002518 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d210      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4922      	ldr	r1, [pc, #136]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b20      	ldr	r3, [pc, #128]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e032      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4916      	ldr	r1, [pc, #88]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259a:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	490e      	ldr	r1, [pc, #56]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ae:	f000 f821 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	490a      	ldr	r1, [pc, #40]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	4a09      	ldr	r2, [pc, #36]	@ (80025ec <HAL_RCC_ClockConfig+0x1cc>)
 80025c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <HAL_RCC_ClockConfig+0x1d0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe f966 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08003568 	.word	0x08003568
 80025ec:	2000000c 	.word	0x2000000c
 80025f0:	20000010 	.word	0x20000010

080025f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800260e:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x94>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b04      	cmp	r3, #4
 800261c:	d002      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x30>
 800261e:	2b08      	cmp	r3, #8
 8002620:	d003      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x36>
 8002622:	e027      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002624:	4b19      	ldr	r3, [pc, #100]	@ (800268c <HAL_RCC_GetSysClockFreq+0x98>)
 8002626:	613b      	str	r3, [r7, #16]
      break;
 8002628:	e027      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	0c9b      	lsrs	r3, r3, #18
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	4a17      	ldr	r2, [pc, #92]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x94>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	0c5b      	lsrs	r3, r3, #17
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	4a11      	ldr	r2, [pc, #68]	@ (8002694 <HAL_RCC_GetSysClockFreq+0xa0>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <HAL_RCC_GetSysClockFreq+0x98>)
 8002656:	fb03 f202 	mul.w	r2, r3, r2
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e004      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a0c      	ldr	r2, [pc, #48]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002668:	fb02 f303 	mul.w	r3, r2, r3
 800266c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	613b      	str	r3, [r7, #16]
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_GetSysClockFreq+0x98>)
 8002676:	613b      	str	r3, [r7, #16]
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	693b      	ldr	r3, [r7, #16]
}
 800267c:	4618      	mov	r0, r3
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	007a1200 	.word	0x007a1200
 8002690:	08003580 	.word	0x08003580
 8002694:	08003590 	.word	0x08003590
 8002698:	003d0900 	.word	0x003d0900

0800269c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a0:	4b02      	ldr	r3, [pc, #8]	@ (80026ac <HAL_RCC_GetHCLKFreq+0x10>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	2000000c 	.word	0x2000000c

080026b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b4:	f7ff fff2 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4903      	ldr	r1, [pc, #12]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08003578 	.word	0x08003578

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026dc:	f7ff ffde 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	0adb      	lsrs	r3, r3, #11
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4903      	ldr	r1, [pc, #12]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08003578 	.word	0x08003578

08002700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002708:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <RCC_Delay+0x34>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <RCC_Delay+0x38>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a5b      	lsrs	r3, r3, #9
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800271c:	bf00      	nop
  }
  while (Delay --);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <RCC_Delay+0x1c>
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	2000000c 	.word	0x2000000c
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e042      	b.n	80027d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fd ffae 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	@ 0x24
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800277e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f971 	bl	8002a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d175      	bne.n	80028e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_UART_Transmit+0x2c>
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e06e      	b.n	80028ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2221      	movs	r2, #33	@ 0x21
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281a:	f7fe f883 	bl	8000924 <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002834:	d108      	bne.n	8002848 <HAL_UART_Transmit+0x6c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e003      	b.n	8002850 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002850:	e02e      	b.n	80028b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2180      	movs	r1, #128	@ 0x80
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f848 	bl	80028f2 <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e03a      	b.n	80028ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10b      	bne.n	8002892 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	3302      	adds	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e007      	b.n	80028a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1cb      	bne.n	8002852 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2140      	movs	r1, #64	@ 0x40
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f814 	bl	80028f2 <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e006      	b.n	80028ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002902:	e03b      	b.n	800297c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d037      	beq.n	800297c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290c:	f7fe f80a 	bl	8000924 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	429a      	cmp	r2, r3
 800291a:	d302      	bcc.n	8002922 <UART_WaitOnFlagUntilTimeout+0x30>
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e03a      	b.n	800299c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d023      	beq.n	800297c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b80      	cmp	r3, #128	@ 0x80
 8002938:	d020      	beq.n	800297c <UART_WaitOnFlagUntilTimeout+0x8a>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b40      	cmp	r3, #64	@ 0x40
 800293e:	d01d      	beq.n	800297c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b08      	cmp	r3, #8
 800294c:	d116      	bne.n	800297c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f81d 	bl	80029a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2208      	movs	r2, #8
 800296e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e00f      	b.n	800299c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	429a      	cmp	r2, r3
 8002998:	d0b4      	beq.n	8002904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b095      	sub	sp, #84	@ 0x54
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b6:	e853 3f00 	ldrex	r3, [r3]
 80029ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80029ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029d4:	e841 2300 	strex	r3, r2, [r1]
 80029d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e5      	bne.n	80029ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	e853 3f00 	ldrex	r3, [r3]
 80029ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e5      	bne.n	80029e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d119      	bne.n	8002a50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	e853 3f00 	ldrex	r3, [r3]
 8002a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f023 0310 	bic.w	r3, r3, #16
 8002a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a3c:	61ba      	str	r2, [r7, #24]
 8002a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	6979      	ldr	r1, [r7, #20]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e5      	bne.n	8002a1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a5e:	bf00      	nop
 8002a60:	3754      	adds	r7, #84	@ 0x54
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002aa2:	f023 030c 	bic.w	r3, r3, #12
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2c      	ldr	r2, [pc, #176]	@ (8002b7c <UART_SetConfig+0x114>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d103      	bne.n	8002ad8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ad0:	f7ff fe02 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	e002      	b.n	8002ade <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f7ff fdea 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8002adc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009a      	lsls	r2, r3, #2
 8002ae8:	441a      	add	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <UART_SetConfig+0x118>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	0119      	lsls	r1, r3, #4
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009a      	lsls	r2, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b14:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <UART_SetConfig+0x118>)
 8002b16:	fba3 0302 	umull	r0, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2064      	movs	r0, #100	@ 0x64
 8002b1e:	fb00 f303 	mul.w	r3, r0, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	3332      	adds	r3, #50	@ 0x32
 8002b28:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <UART_SetConfig+0x118>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b34:	4419      	add	r1, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009a      	lsls	r2, r3, #2
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <UART_SetConfig+0x118>)
 8002b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2064      	movs	r0, #100	@ 0x64
 8002b56:	fb00 f303 	mul.w	r3, r0, r3
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	3332      	adds	r3, #50	@ 0x32
 8002b60:	4a07      	ldr	r2, [pc, #28]	@ (8002b80 <UART_SetConfig+0x118>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	440a      	add	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	51eb851f 	.word	0x51eb851f

08002b84 <sniprintf>:
 8002b84:	b40c      	push	{r2, r3}
 8002b86:	b530      	push	{r4, r5, lr}
 8002b88:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <sniprintf+0x64>)
 8002b8a:	1e0c      	subs	r4, r1, #0
 8002b8c:	681d      	ldr	r5, [r3, #0]
 8002b8e:	b09d      	sub	sp, #116	@ 0x74
 8002b90:	da08      	bge.n	8002ba4 <sniprintf+0x20>
 8002b92:	238b      	movs	r3, #139	@ 0x8b
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	602b      	str	r3, [r5, #0]
 8002b9a:	b01d      	add	sp, #116	@ 0x74
 8002b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ba0:	b002      	add	sp, #8
 8002ba2:	4770      	bx	lr
 8002ba4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002ba8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002bac:	bf0c      	ite	eq
 8002bae:	4623      	moveq	r3, r4
 8002bb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002bb4:	9304      	str	r3, [sp, #16]
 8002bb6:	9307      	str	r3, [sp, #28]
 8002bb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bbc:	9002      	str	r0, [sp, #8]
 8002bbe:	9006      	str	r0, [sp, #24]
 8002bc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	ab21      	add	r3, sp, #132	@ 0x84
 8002bc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002bca:	a902      	add	r1, sp, #8
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	f000 f993 	bl	8002ef8 <_svfiprintf_r>
 8002bd2:	1c43      	adds	r3, r0, #1
 8002bd4:	bfbc      	itt	lt
 8002bd6:	238b      	movlt	r3, #139	@ 0x8b
 8002bd8:	602b      	strlt	r3, [r5, #0]
 8002bda:	2c00      	cmp	r4, #0
 8002bdc:	d0dd      	beq.n	8002b9a <sniprintf+0x16>
 8002bde:	2200      	movs	r2, #0
 8002be0:	9b02      	ldr	r3, [sp, #8]
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e7d9      	b.n	8002b9a <sniprintf+0x16>
 8002be6:	bf00      	nop
 8002be8:	20000018 	.word	0x20000018

08002bec <memset>:
 8002bec:	4603      	mov	r3, r0
 8002bee:	4402      	add	r2, r0
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d100      	bne.n	8002bf6 <memset+0xa>
 8002bf4:	4770      	bx	lr
 8002bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfa:	e7f9      	b.n	8002bf0 <memset+0x4>

08002bfc <__errno>:
 8002bfc:	4b01      	ldr	r3, [pc, #4]	@ (8002c04 <__errno+0x8>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000018 	.word	0x20000018

08002c08 <__libc_init_array>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	4d0c      	ldr	r5, [pc, #48]	@ (8002c40 <__libc_init_array+0x38>)
 8002c0e:	4c0d      	ldr	r4, [pc, #52]	@ (8002c44 <__libc_init_array+0x3c>)
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	42a6      	cmp	r6, r4
 8002c16:	d109      	bne.n	8002c2c <__libc_init_array+0x24>
 8002c18:	f000 fc78 	bl	800350c <_init>
 8002c1c:	2600      	movs	r6, #0
 8002c1e:	4d0a      	ldr	r5, [pc, #40]	@ (8002c48 <__libc_init_array+0x40>)
 8002c20:	4c0a      	ldr	r4, [pc, #40]	@ (8002c4c <__libc_init_array+0x44>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	42a6      	cmp	r6, r4
 8002c28:	d105      	bne.n	8002c36 <__libc_init_array+0x2e>
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c30:	4798      	blx	r3
 8002c32:	3601      	adds	r6, #1
 8002c34:	e7ee      	b.n	8002c14 <__libc_init_array+0xc>
 8002c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3a:	4798      	blx	r3
 8002c3c:	3601      	adds	r6, #1
 8002c3e:	e7f2      	b.n	8002c26 <__libc_init_array+0x1e>
 8002c40:	080035d0 	.word	0x080035d0
 8002c44:	080035d0 	.word	0x080035d0
 8002c48:	080035d0 	.word	0x080035d0
 8002c4c:	080035d4 	.word	0x080035d4

08002c50 <__retarget_lock_acquire_recursive>:
 8002c50:	4770      	bx	lr

08002c52 <__retarget_lock_release_recursive>:
 8002c52:	4770      	bx	lr

08002c54 <_free_r>:
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4605      	mov	r5, r0
 8002c58:	2900      	cmp	r1, #0
 8002c5a:	d040      	beq.n	8002cde <_free_r+0x8a>
 8002c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c60:	1f0c      	subs	r4, r1, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bfb8      	it	lt
 8002c66:	18e4      	addlt	r4, r4, r3
 8002c68:	f000 f8de 	bl	8002e28 <__malloc_lock>
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce0 <_free_r+0x8c>)
 8002c6e:	6813      	ldr	r3, [r2, #0]
 8002c70:	b933      	cbnz	r3, 8002c80 <_free_r+0x2c>
 8002c72:	6063      	str	r3, [r4, #4]
 8002c74:	6014      	str	r4, [r2, #0]
 8002c76:	4628      	mov	r0, r5
 8002c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c7c:	f000 b8da 	b.w	8002e34 <__malloc_unlock>
 8002c80:	42a3      	cmp	r3, r4
 8002c82:	d908      	bls.n	8002c96 <_free_r+0x42>
 8002c84:	6820      	ldr	r0, [r4, #0]
 8002c86:	1821      	adds	r1, r4, r0
 8002c88:	428b      	cmp	r3, r1
 8002c8a:	bf01      	itttt	eq
 8002c8c:	6819      	ldreq	r1, [r3, #0]
 8002c8e:	685b      	ldreq	r3, [r3, #4]
 8002c90:	1809      	addeq	r1, r1, r0
 8002c92:	6021      	streq	r1, [r4, #0]
 8002c94:	e7ed      	b.n	8002c72 <_free_r+0x1e>
 8002c96:	461a      	mov	r2, r3
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	b10b      	cbz	r3, 8002ca0 <_free_r+0x4c>
 8002c9c:	42a3      	cmp	r3, r4
 8002c9e:	d9fa      	bls.n	8002c96 <_free_r+0x42>
 8002ca0:	6811      	ldr	r1, [r2, #0]
 8002ca2:	1850      	adds	r0, r2, r1
 8002ca4:	42a0      	cmp	r0, r4
 8002ca6:	d10b      	bne.n	8002cc0 <_free_r+0x6c>
 8002ca8:	6820      	ldr	r0, [r4, #0]
 8002caa:	4401      	add	r1, r0
 8002cac:	1850      	adds	r0, r2, r1
 8002cae:	4283      	cmp	r3, r0
 8002cb0:	6011      	str	r1, [r2, #0]
 8002cb2:	d1e0      	bne.n	8002c76 <_free_r+0x22>
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4408      	add	r0, r1
 8002cba:	6010      	str	r0, [r2, #0]
 8002cbc:	6053      	str	r3, [r2, #4]
 8002cbe:	e7da      	b.n	8002c76 <_free_r+0x22>
 8002cc0:	d902      	bls.n	8002cc8 <_free_r+0x74>
 8002cc2:	230c      	movs	r3, #12
 8002cc4:	602b      	str	r3, [r5, #0]
 8002cc6:	e7d6      	b.n	8002c76 <_free_r+0x22>
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	1821      	adds	r1, r4, r0
 8002ccc:	428b      	cmp	r3, r1
 8002cce:	bf01      	itttt	eq
 8002cd0:	6819      	ldreq	r1, [r3, #0]
 8002cd2:	685b      	ldreq	r3, [r3, #4]
 8002cd4:	1809      	addeq	r1, r1, r0
 8002cd6:	6021      	streq	r1, [r4, #0]
 8002cd8:	6063      	str	r3, [r4, #4]
 8002cda:	6054      	str	r4, [r2, #4]
 8002cdc:	e7cb      	b.n	8002c76 <_free_r+0x22>
 8002cde:	bd38      	pop	{r3, r4, r5, pc}
 8002ce0:	20000270 	.word	0x20000270

08002ce4 <sbrk_aligned>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8002d24 <sbrk_aligned+0x40>)
 8002ce8:	460c      	mov	r4, r1
 8002cea:	6831      	ldr	r1, [r6, #0]
 8002cec:	4605      	mov	r5, r0
 8002cee:	b911      	cbnz	r1, 8002cf6 <sbrk_aligned+0x12>
 8002cf0:	f000 fbaa 	bl	8003448 <_sbrk_r>
 8002cf4:	6030      	str	r0, [r6, #0]
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f000 fba5 	bl	8003448 <_sbrk_r>
 8002cfe:	1c43      	adds	r3, r0, #1
 8002d00:	d103      	bne.n	8002d0a <sbrk_aligned+0x26>
 8002d02:	f04f 34ff 	mov.w	r4, #4294967295
 8002d06:	4620      	mov	r0, r4
 8002d08:	bd70      	pop	{r4, r5, r6, pc}
 8002d0a:	1cc4      	adds	r4, r0, #3
 8002d0c:	f024 0403 	bic.w	r4, r4, #3
 8002d10:	42a0      	cmp	r0, r4
 8002d12:	d0f8      	beq.n	8002d06 <sbrk_aligned+0x22>
 8002d14:	1a21      	subs	r1, r4, r0
 8002d16:	4628      	mov	r0, r5
 8002d18:	f000 fb96 	bl	8003448 <_sbrk_r>
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d1f2      	bne.n	8002d06 <sbrk_aligned+0x22>
 8002d20:	e7ef      	b.n	8002d02 <sbrk_aligned+0x1e>
 8002d22:	bf00      	nop
 8002d24:	2000026c 	.word	0x2000026c

08002d28 <_malloc_r>:
 8002d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d2c:	1ccd      	adds	r5, r1, #3
 8002d2e:	f025 0503 	bic.w	r5, r5, #3
 8002d32:	3508      	adds	r5, #8
 8002d34:	2d0c      	cmp	r5, #12
 8002d36:	bf38      	it	cc
 8002d38:	250c      	movcc	r5, #12
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	4606      	mov	r6, r0
 8002d3e:	db01      	blt.n	8002d44 <_malloc_r+0x1c>
 8002d40:	42a9      	cmp	r1, r5
 8002d42:	d904      	bls.n	8002d4e <_malloc_r+0x26>
 8002d44:	230c      	movs	r3, #12
 8002d46:	6033      	str	r3, [r6, #0]
 8002d48:	2000      	movs	r0, #0
 8002d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e24 <_malloc_r+0xfc>
 8002d52:	f000 f869 	bl	8002e28 <__malloc_lock>
 8002d56:	f8d8 3000 	ldr.w	r3, [r8]
 8002d5a:	461c      	mov	r4, r3
 8002d5c:	bb44      	cbnz	r4, 8002db0 <_malloc_r+0x88>
 8002d5e:	4629      	mov	r1, r5
 8002d60:	4630      	mov	r0, r6
 8002d62:	f7ff ffbf 	bl	8002ce4 <sbrk_aligned>
 8002d66:	1c43      	adds	r3, r0, #1
 8002d68:	4604      	mov	r4, r0
 8002d6a:	d158      	bne.n	8002e1e <_malloc_r+0xf6>
 8002d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8002d70:	4627      	mov	r7, r4
 8002d72:	2f00      	cmp	r7, #0
 8002d74:	d143      	bne.n	8002dfe <_malloc_r+0xd6>
 8002d76:	2c00      	cmp	r4, #0
 8002d78:	d04b      	beq.n	8002e12 <_malloc_r+0xea>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	4639      	mov	r1, r7
 8002d7e:	4630      	mov	r0, r6
 8002d80:	eb04 0903 	add.w	r9, r4, r3
 8002d84:	f000 fb60 	bl	8003448 <_sbrk_r>
 8002d88:	4581      	cmp	r9, r0
 8002d8a:	d142      	bne.n	8002e12 <_malloc_r+0xea>
 8002d8c:	6821      	ldr	r1, [r4, #0]
 8002d8e:	4630      	mov	r0, r6
 8002d90:	1a6d      	subs	r5, r5, r1
 8002d92:	4629      	mov	r1, r5
 8002d94:	f7ff ffa6 	bl	8002ce4 <sbrk_aligned>
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d03a      	beq.n	8002e12 <_malloc_r+0xea>
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	442b      	add	r3, r5
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	f8d8 3000 	ldr.w	r3, [r8]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	bb62      	cbnz	r2, 8002e04 <_malloc_r+0xdc>
 8002daa:	f8c8 7000 	str.w	r7, [r8]
 8002dae:	e00f      	b.n	8002dd0 <_malloc_r+0xa8>
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	1b52      	subs	r2, r2, r5
 8002db4:	d420      	bmi.n	8002df8 <_malloc_r+0xd0>
 8002db6:	2a0b      	cmp	r2, #11
 8002db8:	d917      	bls.n	8002dea <_malloc_r+0xc2>
 8002dba:	1961      	adds	r1, r4, r5
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	6025      	str	r5, [r4, #0]
 8002dc0:	bf18      	it	ne
 8002dc2:	6059      	strne	r1, [r3, #4]
 8002dc4:	6863      	ldr	r3, [r4, #4]
 8002dc6:	bf08      	it	eq
 8002dc8:	f8c8 1000 	streq.w	r1, [r8]
 8002dcc:	5162      	str	r2, [r4, r5]
 8002dce:	604b      	str	r3, [r1, #4]
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	f000 f82f 	bl	8002e34 <__malloc_unlock>
 8002dd6:	f104 000b 	add.w	r0, r4, #11
 8002dda:	1d23      	adds	r3, r4, #4
 8002ddc:	f020 0007 	bic.w	r0, r0, #7
 8002de0:	1ac2      	subs	r2, r0, r3
 8002de2:	bf1c      	itt	ne
 8002de4:	1a1b      	subne	r3, r3, r0
 8002de6:	50a3      	strne	r3, [r4, r2]
 8002de8:	e7af      	b.n	8002d4a <_malloc_r+0x22>
 8002dea:	6862      	ldr	r2, [r4, #4]
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	bf0c      	ite	eq
 8002df0:	f8c8 2000 	streq.w	r2, [r8]
 8002df4:	605a      	strne	r2, [r3, #4]
 8002df6:	e7eb      	b.n	8002dd0 <_malloc_r+0xa8>
 8002df8:	4623      	mov	r3, r4
 8002dfa:	6864      	ldr	r4, [r4, #4]
 8002dfc:	e7ae      	b.n	8002d5c <_malloc_r+0x34>
 8002dfe:	463c      	mov	r4, r7
 8002e00:	687f      	ldr	r7, [r7, #4]
 8002e02:	e7b6      	b.n	8002d72 <_malloc_r+0x4a>
 8002e04:	461a      	mov	r2, r3
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	42a3      	cmp	r3, r4
 8002e0a:	d1fb      	bne.n	8002e04 <_malloc_r+0xdc>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	6053      	str	r3, [r2, #4]
 8002e10:	e7de      	b.n	8002dd0 <_malloc_r+0xa8>
 8002e12:	230c      	movs	r3, #12
 8002e14:	4630      	mov	r0, r6
 8002e16:	6033      	str	r3, [r6, #0]
 8002e18:	f000 f80c 	bl	8002e34 <__malloc_unlock>
 8002e1c:	e794      	b.n	8002d48 <_malloc_r+0x20>
 8002e1e:	6005      	str	r5, [r0, #0]
 8002e20:	e7d6      	b.n	8002dd0 <_malloc_r+0xa8>
 8002e22:	bf00      	nop
 8002e24:	20000270 	.word	0x20000270

08002e28 <__malloc_lock>:
 8002e28:	4801      	ldr	r0, [pc, #4]	@ (8002e30 <__malloc_lock+0x8>)
 8002e2a:	f7ff bf11 	b.w	8002c50 <__retarget_lock_acquire_recursive>
 8002e2e:	bf00      	nop
 8002e30:	20000268 	.word	0x20000268

08002e34 <__malloc_unlock>:
 8002e34:	4801      	ldr	r0, [pc, #4]	@ (8002e3c <__malloc_unlock+0x8>)
 8002e36:	f7ff bf0c 	b.w	8002c52 <__retarget_lock_release_recursive>
 8002e3a:	bf00      	nop
 8002e3c:	20000268 	.word	0x20000268

08002e40 <__ssputs_r>:
 8002e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e44:	461f      	mov	r7, r3
 8002e46:	688e      	ldr	r6, [r1, #8]
 8002e48:	4682      	mov	sl, r0
 8002e4a:	42be      	cmp	r6, r7
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	4690      	mov	r8, r2
 8002e50:	680b      	ldr	r3, [r1, #0]
 8002e52:	d82d      	bhi.n	8002eb0 <__ssputs_r+0x70>
 8002e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e5c:	d026      	beq.n	8002eac <__ssputs_r+0x6c>
 8002e5e:	6965      	ldr	r5, [r4, #20]
 8002e60:	6909      	ldr	r1, [r1, #16]
 8002e62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e66:	eba3 0901 	sub.w	r9, r3, r1
 8002e6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e6e:	1c7b      	adds	r3, r7, #1
 8002e70:	444b      	add	r3, r9
 8002e72:	106d      	asrs	r5, r5, #1
 8002e74:	429d      	cmp	r5, r3
 8002e76:	bf38      	it	cc
 8002e78:	461d      	movcc	r5, r3
 8002e7a:	0553      	lsls	r3, r2, #21
 8002e7c:	d527      	bpl.n	8002ece <__ssputs_r+0x8e>
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f7ff ff52 	bl	8002d28 <_malloc_r>
 8002e84:	4606      	mov	r6, r0
 8002e86:	b360      	cbz	r0, 8002ee2 <__ssputs_r+0xa2>
 8002e88:	464a      	mov	r2, r9
 8002e8a:	6921      	ldr	r1, [r4, #16]
 8002e8c:	f000 fafa 	bl	8003484 <memcpy>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e9a:	81a3      	strh	r3, [r4, #12]
 8002e9c:	6126      	str	r6, [r4, #16]
 8002e9e:	444e      	add	r6, r9
 8002ea0:	6026      	str	r6, [r4, #0]
 8002ea2:	463e      	mov	r6, r7
 8002ea4:	6165      	str	r5, [r4, #20]
 8002ea6:	eba5 0509 	sub.w	r5, r5, r9
 8002eaa:	60a5      	str	r5, [r4, #8]
 8002eac:	42be      	cmp	r6, r7
 8002eae:	d900      	bls.n	8002eb2 <__ssputs_r+0x72>
 8002eb0:	463e      	mov	r6, r7
 8002eb2:	4632      	mov	r2, r6
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	f000 faac 	bl	8003414 <memmove>
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	68a3      	ldr	r3, [r4, #8]
 8002ec0:	1b9b      	subs	r3, r3, r6
 8002ec2:	60a3      	str	r3, [r4, #8]
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	4433      	add	r3, r6
 8002ec8:	6023      	str	r3, [r4, #0]
 8002eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ece:	462a      	mov	r2, r5
 8002ed0:	f000 fae6 	bl	80034a0 <_realloc_r>
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d1e0      	bne.n	8002e9c <__ssputs_r+0x5c>
 8002eda:	4650      	mov	r0, sl
 8002edc:	6921      	ldr	r1, [r4, #16]
 8002ede:	f7ff feb9 	bl	8002c54 <_free_r>
 8002ee2:	230c      	movs	r3, #12
 8002ee4:	f8ca 3000 	str.w	r3, [sl]
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	f04f 30ff 	mov.w	r0, #4294967295
 8002eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef2:	81a3      	strh	r3, [r4, #12]
 8002ef4:	e7e9      	b.n	8002eca <__ssputs_r+0x8a>
	...

08002ef8 <_svfiprintf_r>:
 8002ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002efc:	4698      	mov	r8, r3
 8002efe:	898b      	ldrh	r3, [r1, #12]
 8002f00:	4607      	mov	r7, r0
 8002f02:	061b      	lsls	r3, r3, #24
 8002f04:	460d      	mov	r5, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	b09d      	sub	sp, #116	@ 0x74
 8002f0a:	d510      	bpl.n	8002f2e <_svfiprintf_r+0x36>
 8002f0c:	690b      	ldr	r3, [r1, #16]
 8002f0e:	b973      	cbnz	r3, 8002f2e <_svfiprintf_r+0x36>
 8002f10:	2140      	movs	r1, #64	@ 0x40
 8002f12:	f7ff ff09 	bl	8002d28 <_malloc_r>
 8002f16:	6028      	str	r0, [r5, #0]
 8002f18:	6128      	str	r0, [r5, #16]
 8002f1a:	b930      	cbnz	r0, 8002f2a <_svfiprintf_r+0x32>
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	b01d      	add	sp, #116	@ 0x74
 8002f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f2a:	2340      	movs	r3, #64	@ 0x40
 8002f2c:	616b      	str	r3, [r5, #20]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f32:	2320      	movs	r3, #32
 8002f34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f38:	2330      	movs	r3, #48	@ 0x30
 8002f3a:	f04f 0901 	mov.w	r9, #1
 8002f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80030dc <_svfiprintf_r+0x1e4>
 8002f46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	469a      	mov	sl, r3
 8002f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f52:	b10a      	cbz	r2, 8002f58 <_svfiprintf_r+0x60>
 8002f54:	2a25      	cmp	r2, #37	@ 0x25
 8002f56:	d1f9      	bne.n	8002f4c <_svfiprintf_r+0x54>
 8002f58:	ebba 0b04 	subs.w	fp, sl, r4
 8002f5c:	d00b      	beq.n	8002f76 <_svfiprintf_r+0x7e>
 8002f5e:	465b      	mov	r3, fp
 8002f60:	4622      	mov	r2, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	4638      	mov	r0, r7
 8002f66:	f7ff ff6b 	bl	8002e40 <__ssputs_r>
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	f000 80a7 	beq.w	80030be <_svfiprintf_r+0x1c6>
 8002f70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f72:	445a      	add	r2, fp
 8002f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f76:	f89a 3000 	ldrb.w	r3, [sl]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 809f 	beq.w	80030be <_svfiprintf_r+0x1c6>
 8002f80:	2300      	movs	r3, #0
 8002f82:	f04f 32ff 	mov.w	r2, #4294967295
 8002f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f8a:	f10a 0a01 	add.w	sl, sl, #1
 8002f8e:	9304      	str	r3, [sp, #16]
 8002f90:	9307      	str	r3, [sp, #28]
 8002f92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f96:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f98:	4654      	mov	r4, sl
 8002f9a:	2205      	movs	r2, #5
 8002f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fa0:	484e      	ldr	r0, [pc, #312]	@ (80030dc <_svfiprintf_r+0x1e4>)
 8002fa2:	f000 fa61 	bl	8003468 <memchr>
 8002fa6:	9a04      	ldr	r2, [sp, #16]
 8002fa8:	b9d8      	cbnz	r0, 8002fe2 <_svfiprintf_r+0xea>
 8002faa:	06d0      	lsls	r0, r2, #27
 8002fac:	bf44      	itt	mi
 8002fae:	2320      	movmi	r3, #32
 8002fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fb4:	0711      	lsls	r1, r2, #28
 8002fb6:	bf44      	itt	mi
 8002fb8:	232b      	movmi	r3, #43	@ 0x2b
 8002fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8002fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fc4:	d015      	beq.n	8002ff2 <_svfiprintf_r+0xfa>
 8002fc6:	4654      	mov	r4, sl
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f04f 0c0a 	mov.w	ip, #10
 8002fce:	9a07      	ldr	r2, [sp, #28]
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fd6:	3b30      	subs	r3, #48	@ 0x30
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	d94b      	bls.n	8003074 <_svfiprintf_r+0x17c>
 8002fdc:	b1b0      	cbz	r0, 800300c <_svfiprintf_r+0x114>
 8002fde:	9207      	str	r2, [sp, #28]
 8002fe0:	e014      	b.n	800300c <_svfiprintf_r+0x114>
 8002fe2:	eba0 0308 	sub.w	r3, r0, r8
 8002fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8002fea:	4313      	orrs	r3, r2
 8002fec:	46a2      	mov	sl, r4
 8002fee:	9304      	str	r3, [sp, #16]
 8002ff0:	e7d2      	b.n	8002f98 <_svfiprintf_r+0xa0>
 8002ff2:	9b03      	ldr	r3, [sp, #12]
 8002ff4:	1d19      	adds	r1, r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	9103      	str	r1, [sp, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfbb      	ittet	lt
 8002ffe:	425b      	neglt	r3, r3
 8003000:	f042 0202 	orrlt.w	r2, r2, #2
 8003004:	9307      	strge	r3, [sp, #28]
 8003006:	9307      	strlt	r3, [sp, #28]
 8003008:	bfb8      	it	lt
 800300a:	9204      	strlt	r2, [sp, #16]
 800300c:	7823      	ldrb	r3, [r4, #0]
 800300e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003010:	d10a      	bne.n	8003028 <_svfiprintf_r+0x130>
 8003012:	7863      	ldrb	r3, [r4, #1]
 8003014:	2b2a      	cmp	r3, #42	@ 0x2a
 8003016:	d132      	bne.n	800307e <_svfiprintf_r+0x186>
 8003018:	9b03      	ldr	r3, [sp, #12]
 800301a:	3402      	adds	r4, #2
 800301c:	1d1a      	adds	r2, r3, #4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	9203      	str	r2, [sp, #12]
 8003022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003026:	9305      	str	r3, [sp, #20]
 8003028:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80030e0 <_svfiprintf_r+0x1e8>
 800302c:	2203      	movs	r2, #3
 800302e:	4650      	mov	r0, sl
 8003030:	7821      	ldrb	r1, [r4, #0]
 8003032:	f000 fa19 	bl	8003468 <memchr>
 8003036:	b138      	cbz	r0, 8003048 <_svfiprintf_r+0x150>
 8003038:	2240      	movs	r2, #64	@ 0x40
 800303a:	9b04      	ldr	r3, [sp, #16]
 800303c:	eba0 000a 	sub.w	r0, r0, sl
 8003040:	4082      	lsls	r2, r0
 8003042:	4313      	orrs	r3, r2
 8003044:	3401      	adds	r4, #1
 8003046:	9304      	str	r3, [sp, #16]
 8003048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800304c:	2206      	movs	r2, #6
 800304e:	4825      	ldr	r0, [pc, #148]	@ (80030e4 <_svfiprintf_r+0x1ec>)
 8003050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003054:	f000 fa08 	bl	8003468 <memchr>
 8003058:	2800      	cmp	r0, #0
 800305a:	d036      	beq.n	80030ca <_svfiprintf_r+0x1d2>
 800305c:	4b22      	ldr	r3, [pc, #136]	@ (80030e8 <_svfiprintf_r+0x1f0>)
 800305e:	bb1b      	cbnz	r3, 80030a8 <_svfiprintf_r+0x1b0>
 8003060:	9b03      	ldr	r3, [sp, #12]
 8003062:	3307      	adds	r3, #7
 8003064:	f023 0307 	bic.w	r3, r3, #7
 8003068:	3308      	adds	r3, #8
 800306a:	9303      	str	r3, [sp, #12]
 800306c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800306e:	4433      	add	r3, r6
 8003070:	9309      	str	r3, [sp, #36]	@ 0x24
 8003072:	e76a      	b.n	8002f4a <_svfiprintf_r+0x52>
 8003074:	460c      	mov	r4, r1
 8003076:	2001      	movs	r0, #1
 8003078:	fb0c 3202 	mla	r2, ip, r2, r3
 800307c:	e7a8      	b.n	8002fd0 <_svfiprintf_r+0xd8>
 800307e:	2300      	movs	r3, #0
 8003080:	f04f 0c0a 	mov.w	ip, #10
 8003084:	4619      	mov	r1, r3
 8003086:	3401      	adds	r4, #1
 8003088:	9305      	str	r3, [sp, #20]
 800308a:	4620      	mov	r0, r4
 800308c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003090:	3a30      	subs	r2, #48	@ 0x30
 8003092:	2a09      	cmp	r2, #9
 8003094:	d903      	bls.n	800309e <_svfiprintf_r+0x1a6>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0c6      	beq.n	8003028 <_svfiprintf_r+0x130>
 800309a:	9105      	str	r1, [sp, #20]
 800309c:	e7c4      	b.n	8003028 <_svfiprintf_r+0x130>
 800309e:	4604      	mov	r4, r0
 80030a0:	2301      	movs	r3, #1
 80030a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80030a6:	e7f0      	b.n	800308a <_svfiprintf_r+0x192>
 80030a8:	ab03      	add	r3, sp, #12
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	462a      	mov	r2, r5
 80030ae:	4638      	mov	r0, r7
 80030b0:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <_svfiprintf_r+0x1f4>)
 80030b2:	a904      	add	r1, sp, #16
 80030b4:	f3af 8000 	nop.w
 80030b8:	1c42      	adds	r2, r0, #1
 80030ba:	4606      	mov	r6, r0
 80030bc:	d1d6      	bne.n	800306c <_svfiprintf_r+0x174>
 80030be:	89ab      	ldrh	r3, [r5, #12]
 80030c0:	065b      	lsls	r3, r3, #25
 80030c2:	f53f af2d 	bmi.w	8002f20 <_svfiprintf_r+0x28>
 80030c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030c8:	e72c      	b.n	8002f24 <_svfiprintf_r+0x2c>
 80030ca:	ab03      	add	r3, sp, #12
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	462a      	mov	r2, r5
 80030d0:	4638      	mov	r0, r7
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <_svfiprintf_r+0x1f4>)
 80030d4:	a904      	add	r1, sp, #16
 80030d6:	f000 f87d 	bl	80031d4 <_printf_i>
 80030da:	e7ed      	b.n	80030b8 <_svfiprintf_r+0x1c0>
 80030dc:	08003592 	.word	0x08003592
 80030e0:	08003598 	.word	0x08003598
 80030e4:	0800359c 	.word	0x0800359c
 80030e8:	00000000 	.word	0x00000000
 80030ec:	08002e41 	.word	0x08002e41

080030f0 <_printf_common>:
 80030f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f4:	4616      	mov	r6, r2
 80030f6:	4698      	mov	r8, r3
 80030f8:	688a      	ldr	r2, [r1, #8]
 80030fa:	690b      	ldr	r3, [r1, #16]
 80030fc:	4607      	mov	r7, r0
 80030fe:	4293      	cmp	r3, r2
 8003100:	bfb8      	it	lt
 8003102:	4613      	movlt	r3, r2
 8003104:	6033      	str	r3, [r6, #0]
 8003106:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800310a:	460c      	mov	r4, r1
 800310c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003110:	b10a      	cbz	r2, 8003116 <_printf_common+0x26>
 8003112:	3301      	adds	r3, #1
 8003114:	6033      	str	r3, [r6, #0]
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	0699      	lsls	r1, r3, #26
 800311a:	bf42      	ittt	mi
 800311c:	6833      	ldrmi	r3, [r6, #0]
 800311e:	3302      	addmi	r3, #2
 8003120:	6033      	strmi	r3, [r6, #0]
 8003122:	6825      	ldr	r5, [r4, #0]
 8003124:	f015 0506 	ands.w	r5, r5, #6
 8003128:	d106      	bne.n	8003138 <_printf_common+0x48>
 800312a:	f104 0a19 	add.w	sl, r4, #25
 800312e:	68e3      	ldr	r3, [r4, #12]
 8003130:	6832      	ldr	r2, [r6, #0]
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	42ab      	cmp	r3, r5
 8003136:	dc2b      	bgt.n	8003190 <_printf_common+0xa0>
 8003138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800313c:	6822      	ldr	r2, [r4, #0]
 800313e:	3b00      	subs	r3, #0
 8003140:	bf18      	it	ne
 8003142:	2301      	movne	r3, #1
 8003144:	0692      	lsls	r2, r2, #26
 8003146:	d430      	bmi.n	80031aa <_printf_common+0xba>
 8003148:	4641      	mov	r1, r8
 800314a:	4638      	mov	r0, r7
 800314c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003150:	47c8      	blx	r9
 8003152:	3001      	adds	r0, #1
 8003154:	d023      	beq.n	800319e <_printf_common+0xae>
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	6922      	ldr	r2, [r4, #16]
 800315a:	f003 0306 	and.w	r3, r3, #6
 800315e:	2b04      	cmp	r3, #4
 8003160:	bf14      	ite	ne
 8003162:	2500      	movne	r5, #0
 8003164:	6833      	ldreq	r3, [r6, #0]
 8003166:	f04f 0600 	mov.w	r6, #0
 800316a:	bf08      	it	eq
 800316c:	68e5      	ldreq	r5, [r4, #12]
 800316e:	f104 041a 	add.w	r4, r4, #26
 8003172:	bf08      	it	eq
 8003174:	1aed      	subeq	r5, r5, r3
 8003176:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800317a:	bf08      	it	eq
 800317c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003180:	4293      	cmp	r3, r2
 8003182:	bfc4      	itt	gt
 8003184:	1a9b      	subgt	r3, r3, r2
 8003186:	18ed      	addgt	r5, r5, r3
 8003188:	42b5      	cmp	r5, r6
 800318a:	d11a      	bne.n	80031c2 <_printf_common+0xd2>
 800318c:	2000      	movs	r0, #0
 800318e:	e008      	b.n	80031a2 <_printf_common+0xb2>
 8003190:	2301      	movs	r3, #1
 8003192:	4652      	mov	r2, sl
 8003194:	4641      	mov	r1, r8
 8003196:	4638      	mov	r0, r7
 8003198:	47c8      	blx	r9
 800319a:	3001      	adds	r0, #1
 800319c:	d103      	bne.n	80031a6 <_printf_common+0xb6>
 800319e:	f04f 30ff 	mov.w	r0, #4294967295
 80031a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a6:	3501      	adds	r5, #1
 80031a8:	e7c1      	b.n	800312e <_printf_common+0x3e>
 80031aa:	2030      	movs	r0, #48	@ 0x30
 80031ac:	18e1      	adds	r1, r4, r3
 80031ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80031b8:	4422      	add	r2, r4
 80031ba:	3302      	adds	r3, #2
 80031bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80031c0:	e7c2      	b.n	8003148 <_printf_common+0x58>
 80031c2:	2301      	movs	r3, #1
 80031c4:	4622      	mov	r2, r4
 80031c6:	4641      	mov	r1, r8
 80031c8:	4638      	mov	r0, r7
 80031ca:	47c8      	blx	r9
 80031cc:	3001      	adds	r0, #1
 80031ce:	d0e6      	beq.n	800319e <_printf_common+0xae>
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7d9      	b.n	8003188 <_printf_common+0x98>

080031d4 <_printf_i>:
 80031d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031d8:	7e0f      	ldrb	r7, [r1, #24]
 80031da:	4691      	mov	r9, r2
 80031dc:	2f78      	cmp	r7, #120	@ 0x78
 80031de:	4680      	mov	r8, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	469a      	mov	sl, r3
 80031e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031ea:	d807      	bhi.n	80031fc <_printf_i+0x28>
 80031ec:	2f62      	cmp	r7, #98	@ 0x62
 80031ee:	d80a      	bhi.n	8003206 <_printf_i+0x32>
 80031f0:	2f00      	cmp	r7, #0
 80031f2:	f000 80d3 	beq.w	800339c <_printf_i+0x1c8>
 80031f6:	2f58      	cmp	r7, #88	@ 0x58
 80031f8:	f000 80ba 	beq.w	8003370 <_printf_i+0x19c>
 80031fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003204:	e03a      	b.n	800327c <_printf_i+0xa8>
 8003206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800320a:	2b15      	cmp	r3, #21
 800320c:	d8f6      	bhi.n	80031fc <_printf_i+0x28>
 800320e:	a101      	add	r1, pc, #4	@ (adr r1, 8003214 <_printf_i+0x40>)
 8003210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003214:	0800326d 	.word	0x0800326d
 8003218:	08003281 	.word	0x08003281
 800321c:	080031fd 	.word	0x080031fd
 8003220:	080031fd 	.word	0x080031fd
 8003224:	080031fd 	.word	0x080031fd
 8003228:	080031fd 	.word	0x080031fd
 800322c:	08003281 	.word	0x08003281
 8003230:	080031fd 	.word	0x080031fd
 8003234:	080031fd 	.word	0x080031fd
 8003238:	080031fd 	.word	0x080031fd
 800323c:	080031fd 	.word	0x080031fd
 8003240:	08003383 	.word	0x08003383
 8003244:	080032ab 	.word	0x080032ab
 8003248:	0800333d 	.word	0x0800333d
 800324c:	080031fd 	.word	0x080031fd
 8003250:	080031fd 	.word	0x080031fd
 8003254:	080033a5 	.word	0x080033a5
 8003258:	080031fd 	.word	0x080031fd
 800325c:	080032ab 	.word	0x080032ab
 8003260:	080031fd 	.word	0x080031fd
 8003264:	080031fd 	.word	0x080031fd
 8003268:	08003345 	.word	0x08003345
 800326c:	6833      	ldr	r3, [r6, #0]
 800326e:	1d1a      	adds	r2, r3, #4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6032      	str	r2, [r6, #0]
 8003274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800327c:	2301      	movs	r3, #1
 800327e:	e09e      	b.n	80033be <_printf_i+0x1ea>
 8003280:	6833      	ldr	r3, [r6, #0]
 8003282:	6820      	ldr	r0, [r4, #0]
 8003284:	1d19      	adds	r1, r3, #4
 8003286:	6031      	str	r1, [r6, #0]
 8003288:	0606      	lsls	r6, r0, #24
 800328a:	d501      	bpl.n	8003290 <_printf_i+0xbc>
 800328c:	681d      	ldr	r5, [r3, #0]
 800328e:	e003      	b.n	8003298 <_printf_i+0xc4>
 8003290:	0645      	lsls	r5, r0, #25
 8003292:	d5fb      	bpl.n	800328c <_printf_i+0xb8>
 8003294:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003298:	2d00      	cmp	r5, #0
 800329a:	da03      	bge.n	80032a4 <_printf_i+0xd0>
 800329c:	232d      	movs	r3, #45	@ 0x2d
 800329e:	426d      	negs	r5, r5
 80032a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032a4:	230a      	movs	r3, #10
 80032a6:	4859      	ldr	r0, [pc, #356]	@ (800340c <_printf_i+0x238>)
 80032a8:	e011      	b.n	80032ce <_printf_i+0xfa>
 80032aa:	6821      	ldr	r1, [r4, #0]
 80032ac:	6833      	ldr	r3, [r6, #0]
 80032ae:	0608      	lsls	r0, r1, #24
 80032b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80032b4:	d402      	bmi.n	80032bc <_printf_i+0xe8>
 80032b6:	0649      	lsls	r1, r1, #25
 80032b8:	bf48      	it	mi
 80032ba:	b2ad      	uxthmi	r5, r5
 80032bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80032be:	6033      	str	r3, [r6, #0]
 80032c0:	bf14      	ite	ne
 80032c2:	230a      	movne	r3, #10
 80032c4:	2308      	moveq	r3, #8
 80032c6:	4851      	ldr	r0, [pc, #324]	@ (800340c <_printf_i+0x238>)
 80032c8:	2100      	movs	r1, #0
 80032ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80032ce:	6866      	ldr	r6, [r4, #4]
 80032d0:	2e00      	cmp	r6, #0
 80032d2:	bfa8      	it	ge
 80032d4:	6821      	ldrge	r1, [r4, #0]
 80032d6:	60a6      	str	r6, [r4, #8]
 80032d8:	bfa4      	itt	ge
 80032da:	f021 0104 	bicge.w	r1, r1, #4
 80032de:	6021      	strge	r1, [r4, #0]
 80032e0:	b90d      	cbnz	r5, 80032e6 <_printf_i+0x112>
 80032e2:	2e00      	cmp	r6, #0
 80032e4:	d04b      	beq.n	800337e <_printf_i+0x1aa>
 80032e6:	4616      	mov	r6, r2
 80032e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80032ec:	fb03 5711 	mls	r7, r3, r1, r5
 80032f0:	5dc7      	ldrb	r7, [r0, r7]
 80032f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032f6:	462f      	mov	r7, r5
 80032f8:	42bb      	cmp	r3, r7
 80032fa:	460d      	mov	r5, r1
 80032fc:	d9f4      	bls.n	80032e8 <_printf_i+0x114>
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d10b      	bne.n	800331a <_printf_i+0x146>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	07df      	lsls	r7, r3, #31
 8003306:	d508      	bpl.n	800331a <_printf_i+0x146>
 8003308:	6923      	ldr	r3, [r4, #16]
 800330a:	6861      	ldr	r1, [r4, #4]
 800330c:	4299      	cmp	r1, r3
 800330e:	bfde      	ittt	le
 8003310:	2330      	movle	r3, #48	@ 0x30
 8003312:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003316:	f106 36ff 	addle.w	r6, r6, #4294967295
 800331a:	1b92      	subs	r2, r2, r6
 800331c:	6122      	str	r2, [r4, #16]
 800331e:	464b      	mov	r3, r9
 8003320:	4621      	mov	r1, r4
 8003322:	4640      	mov	r0, r8
 8003324:	f8cd a000 	str.w	sl, [sp]
 8003328:	aa03      	add	r2, sp, #12
 800332a:	f7ff fee1 	bl	80030f0 <_printf_common>
 800332e:	3001      	adds	r0, #1
 8003330:	d14a      	bne.n	80033c8 <_printf_i+0x1f4>
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
 8003336:	b004      	add	sp, #16
 8003338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	f043 0320 	orr.w	r3, r3, #32
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	2778      	movs	r7, #120	@ 0x78
 8003346:	4832      	ldr	r0, [pc, #200]	@ (8003410 <_printf_i+0x23c>)
 8003348:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	6831      	ldr	r1, [r6, #0]
 8003350:	061f      	lsls	r7, r3, #24
 8003352:	f851 5b04 	ldr.w	r5, [r1], #4
 8003356:	d402      	bmi.n	800335e <_printf_i+0x18a>
 8003358:	065f      	lsls	r7, r3, #25
 800335a:	bf48      	it	mi
 800335c:	b2ad      	uxthmi	r5, r5
 800335e:	6031      	str	r1, [r6, #0]
 8003360:	07d9      	lsls	r1, r3, #31
 8003362:	bf44      	itt	mi
 8003364:	f043 0320 	orrmi.w	r3, r3, #32
 8003368:	6023      	strmi	r3, [r4, #0]
 800336a:	b11d      	cbz	r5, 8003374 <_printf_i+0x1a0>
 800336c:	2310      	movs	r3, #16
 800336e:	e7ab      	b.n	80032c8 <_printf_i+0xf4>
 8003370:	4826      	ldr	r0, [pc, #152]	@ (800340c <_printf_i+0x238>)
 8003372:	e7e9      	b.n	8003348 <_printf_i+0x174>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	f023 0320 	bic.w	r3, r3, #32
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	e7f6      	b.n	800336c <_printf_i+0x198>
 800337e:	4616      	mov	r6, r2
 8003380:	e7bd      	b.n	80032fe <_printf_i+0x12a>
 8003382:	6833      	ldr	r3, [r6, #0]
 8003384:	6825      	ldr	r5, [r4, #0]
 8003386:	1d18      	adds	r0, r3, #4
 8003388:	6961      	ldr	r1, [r4, #20]
 800338a:	6030      	str	r0, [r6, #0]
 800338c:	062e      	lsls	r6, r5, #24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	d501      	bpl.n	8003396 <_printf_i+0x1c2>
 8003392:	6019      	str	r1, [r3, #0]
 8003394:	e002      	b.n	800339c <_printf_i+0x1c8>
 8003396:	0668      	lsls	r0, r5, #25
 8003398:	d5fb      	bpl.n	8003392 <_printf_i+0x1be>
 800339a:	8019      	strh	r1, [r3, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	4616      	mov	r6, r2
 80033a0:	6123      	str	r3, [r4, #16]
 80033a2:	e7bc      	b.n	800331e <_printf_i+0x14a>
 80033a4:	6833      	ldr	r3, [r6, #0]
 80033a6:	2100      	movs	r1, #0
 80033a8:	1d1a      	adds	r2, r3, #4
 80033aa:	6032      	str	r2, [r6, #0]
 80033ac:	681e      	ldr	r6, [r3, #0]
 80033ae:	6862      	ldr	r2, [r4, #4]
 80033b0:	4630      	mov	r0, r6
 80033b2:	f000 f859 	bl	8003468 <memchr>
 80033b6:	b108      	cbz	r0, 80033bc <_printf_i+0x1e8>
 80033b8:	1b80      	subs	r0, r0, r6
 80033ba:	6060      	str	r0, [r4, #4]
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	6123      	str	r3, [r4, #16]
 80033c0:	2300      	movs	r3, #0
 80033c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033c6:	e7aa      	b.n	800331e <_printf_i+0x14a>
 80033c8:	4632      	mov	r2, r6
 80033ca:	4649      	mov	r1, r9
 80033cc:	4640      	mov	r0, r8
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	47d0      	blx	sl
 80033d2:	3001      	adds	r0, #1
 80033d4:	d0ad      	beq.n	8003332 <_printf_i+0x15e>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	079b      	lsls	r3, r3, #30
 80033da:	d413      	bmi.n	8003404 <_printf_i+0x230>
 80033dc:	68e0      	ldr	r0, [r4, #12]
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	4298      	cmp	r0, r3
 80033e2:	bfb8      	it	lt
 80033e4:	4618      	movlt	r0, r3
 80033e6:	e7a6      	b.n	8003336 <_printf_i+0x162>
 80033e8:	2301      	movs	r3, #1
 80033ea:	4632      	mov	r2, r6
 80033ec:	4649      	mov	r1, r9
 80033ee:	4640      	mov	r0, r8
 80033f0:	47d0      	blx	sl
 80033f2:	3001      	adds	r0, #1
 80033f4:	d09d      	beq.n	8003332 <_printf_i+0x15e>
 80033f6:	3501      	adds	r5, #1
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	9903      	ldr	r1, [sp, #12]
 80033fc:	1a5b      	subs	r3, r3, r1
 80033fe:	42ab      	cmp	r3, r5
 8003400:	dcf2      	bgt.n	80033e8 <_printf_i+0x214>
 8003402:	e7eb      	b.n	80033dc <_printf_i+0x208>
 8003404:	2500      	movs	r5, #0
 8003406:	f104 0619 	add.w	r6, r4, #25
 800340a:	e7f5      	b.n	80033f8 <_printf_i+0x224>
 800340c:	080035a3 	.word	0x080035a3
 8003410:	080035b4 	.word	0x080035b4

08003414 <memmove>:
 8003414:	4288      	cmp	r0, r1
 8003416:	b510      	push	{r4, lr}
 8003418:	eb01 0402 	add.w	r4, r1, r2
 800341c:	d902      	bls.n	8003424 <memmove+0x10>
 800341e:	4284      	cmp	r4, r0
 8003420:	4623      	mov	r3, r4
 8003422:	d807      	bhi.n	8003434 <memmove+0x20>
 8003424:	1e43      	subs	r3, r0, #1
 8003426:	42a1      	cmp	r1, r4
 8003428:	d008      	beq.n	800343c <memmove+0x28>
 800342a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800342e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003432:	e7f8      	b.n	8003426 <memmove+0x12>
 8003434:	4601      	mov	r1, r0
 8003436:	4402      	add	r2, r0
 8003438:	428a      	cmp	r2, r1
 800343a:	d100      	bne.n	800343e <memmove+0x2a>
 800343c:	bd10      	pop	{r4, pc}
 800343e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003446:	e7f7      	b.n	8003438 <memmove+0x24>

08003448 <_sbrk_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	2300      	movs	r3, #0
 800344c:	4d05      	ldr	r5, [pc, #20]	@ (8003464 <_sbrk_r+0x1c>)
 800344e:	4604      	mov	r4, r0
 8003450:	4608      	mov	r0, r1
 8003452:	602b      	str	r3, [r5, #0]
 8003454:	f7fd f9ac 	bl	80007b0 <_sbrk>
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d102      	bne.n	8003462 <_sbrk_r+0x1a>
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	b103      	cbz	r3, 8003462 <_sbrk_r+0x1a>
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	bd38      	pop	{r3, r4, r5, pc}
 8003464:	20000264 	.word	0x20000264

08003468 <memchr>:
 8003468:	4603      	mov	r3, r0
 800346a:	b510      	push	{r4, lr}
 800346c:	b2c9      	uxtb	r1, r1
 800346e:	4402      	add	r2, r0
 8003470:	4293      	cmp	r3, r2
 8003472:	4618      	mov	r0, r3
 8003474:	d101      	bne.n	800347a <memchr+0x12>
 8003476:	2000      	movs	r0, #0
 8003478:	e003      	b.n	8003482 <memchr+0x1a>
 800347a:	7804      	ldrb	r4, [r0, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	428c      	cmp	r4, r1
 8003480:	d1f6      	bne.n	8003470 <memchr+0x8>
 8003482:	bd10      	pop	{r4, pc}

08003484 <memcpy>:
 8003484:	440a      	add	r2, r1
 8003486:	4291      	cmp	r1, r2
 8003488:	f100 33ff 	add.w	r3, r0, #4294967295
 800348c:	d100      	bne.n	8003490 <memcpy+0xc>
 800348e:	4770      	bx	lr
 8003490:	b510      	push	{r4, lr}
 8003492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003496:	4291      	cmp	r1, r2
 8003498:	f803 4f01 	strb.w	r4, [r3, #1]!
 800349c:	d1f9      	bne.n	8003492 <memcpy+0xe>
 800349e:	bd10      	pop	{r4, pc}

080034a0 <_realloc_r>:
 80034a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a4:	4680      	mov	r8, r0
 80034a6:	4615      	mov	r5, r2
 80034a8:	460c      	mov	r4, r1
 80034aa:	b921      	cbnz	r1, 80034b6 <_realloc_r+0x16>
 80034ac:	4611      	mov	r1, r2
 80034ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034b2:	f7ff bc39 	b.w	8002d28 <_malloc_r>
 80034b6:	b92a      	cbnz	r2, 80034c4 <_realloc_r+0x24>
 80034b8:	f7ff fbcc 	bl	8002c54 <_free_r>
 80034bc:	2400      	movs	r4, #0
 80034be:	4620      	mov	r0, r4
 80034c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c4:	f000 f81a 	bl	80034fc <_malloc_usable_size_r>
 80034c8:	4285      	cmp	r5, r0
 80034ca:	4606      	mov	r6, r0
 80034cc:	d802      	bhi.n	80034d4 <_realloc_r+0x34>
 80034ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80034d2:	d8f4      	bhi.n	80034be <_realloc_r+0x1e>
 80034d4:	4629      	mov	r1, r5
 80034d6:	4640      	mov	r0, r8
 80034d8:	f7ff fc26 	bl	8002d28 <_malloc_r>
 80034dc:	4607      	mov	r7, r0
 80034de:	2800      	cmp	r0, #0
 80034e0:	d0ec      	beq.n	80034bc <_realloc_r+0x1c>
 80034e2:	42b5      	cmp	r5, r6
 80034e4:	462a      	mov	r2, r5
 80034e6:	4621      	mov	r1, r4
 80034e8:	bf28      	it	cs
 80034ea:	4632      	movcs	r2, r6
 80034ec:	f7ff ffca 	bl	8003484 <memcpy>
 80034f0:	4621      	mov	r1, r4
 80034f2:	4640      	mov	r0, r8
 80034f4:	f7ff fbae 	bl	8002c54 <_free_r>
 80034f8:	463c      	mov	r4, r7
 80034fa:	e7e0      	b.n	80034be <_realloc_r+0x1e>

080034fc <_malloc_usable_size_r>:
 80034fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003500:	1f18      	subs	r0, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	bfbc      	itt	lt
 8003506:	580b      	ldrlt	r3, [r1, r0]
 8003508:	18c0      	addlt	r0, r0, r3
 800350a:	4770      	bx	lr

0800350c <_init>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	bf00      	nop
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr

08003518 <_fini>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr
