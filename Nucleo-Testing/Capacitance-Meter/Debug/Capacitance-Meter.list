
Capacitance-Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000356c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800362c  0800362c  0000462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e0  080036e0  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  080036e0  080036e0  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036e0  080036e0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e0  080036e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036e4  080036e4  000046e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080036e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000060  08003748  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08003748  000052e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085e3  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165f  00000000  00000000  0000d66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000055e  00000000  00000000  0000f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000faf6  00000000  00000000  0000f926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c33  00000000  00000000  0001f41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fc6f  00000000  00000000  0002904f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00088cbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c80  00000000  00000000  00088d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0008a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003614 	.word	0x08003614

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003614 	.word	0x08003614

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 fb6a 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f809 	bl	8000436 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f000 f8f0 	bl	8000608 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000428:	f000 f8be 	bl	80005a8 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800042c:	f000 f860 	bl	80004f0 <MX_ADC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  
    Time_Constant_Capacitance_Measurement();
 8000430:	f000 f94c 	bl	80006cc <Time_Constant_Capacitance_Measurement>
 8000434:	e7fc      	b.n	8000430 <main+0x18>

08000436 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000436:	b590      	push	{r4, r7, lr}
 8000438:	b095      	sub	sp, #84	@ 0x54
 800043a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043c:	2420      	movs	r4, #32
 800043e:	193b      	adds	r3, r7, r4
 8000440:	0018      	movs	r0, r3
 8000442:	2330      	movs	r3, #48	@ 0x30
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f002 fc66 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	2310      	movs	r3, #16
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	0018      	movs	r0, r3
 8000452:	2310      	movs	r3, #16
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f002 fc5e 	bl	8002d18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	003b      	movs	r3, r7
 800045e:	0018      	movs	r0, r3
 8000460:	2310      	movs	r3, #16
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fc57 	bl	8002d18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800046a:	0021      	movs	r1, r4
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2212      	movs	r2, #18
 8000470:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2201      	movs	r2, #1
 8000476:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2201      	movs	r2, #1
 800047c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2210      	movs	r2, #16
 8000482:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2210      	movs	r2, #16
 8000488:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	187b      	adds	r3, r7, r1
 8000492:	0018      	movs	r0, r3
 8000494:	f001 fa94 	bl	80019c0 <HAL_RCC_OscConfig>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800049c:	f000 f9ee 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	2110      	movs	r1, #16
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2207      	movs	r2, #7
 80004a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2100      	movs	r1, #0
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fd98 	bl	8001ff4 <HAL_RCC_ClockConfig>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004c8:	f000 f9d8 	bl	800087c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d8:	003b      	movs	r3, r7
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fece 	bl	800227c <HAL_RCCEx_PeriphCLKConfig>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004e4:	f000 f9ca 	bl	800087c <Error_Handler>
  }
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b015      	add	sp, #84	@ 0x54
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	0018      	movs	r0, r3
 80004fa:	230c      	movs	r3, #12
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 fc0a 	bl	8002d18 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000506:	4a27      	ldr	r2, [pc, #156]	@ (80005a4 <MX_ADC_Init+0xb4>)
 8000508:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_ADC_Init+0xb0>)
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_ADC_Init+0xb0>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_ADC_Init+0xb0>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000536:	2200      	movs	r2, #0
 8000538:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <MX_ADC_Init+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000542:	22c2      	movs	r2, #194	@ 0xc2
 8000544:	32ff      	adds	r2, #255	@ 0xff
 8000546:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000548:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <MX_ADC_Init+0xb0>)
 800054a:	2200      	movs	r2, #0
 800054c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800054e:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000550:	2224      	movs	r2, #36	@ 0x24
 8000552:	2100      	movs	r1, #0
 8000554:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000556:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000558:	2201      	movs	r2, #1
 800055a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800055c:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <MX_ADC_Init+0xb0>)
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fb2c 	bl	8000bbc <HAL_ADC_Init>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000568:	f000 f988 	bl	800087c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2207      	movs	r2, #7
 8000570:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	0152      	lsls	r2, r2, #5
 8000578:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2280      	movs	r2, #128	@ 0x80
 800057e:	0552      	lsls	r2, r2, #21
 8000580:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000582:	1d3a      	adds	r2, r7, #4
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <MX_ADC_Init+0xb0>)
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fd8f 	bl	80010ac <HAL_ADC_ConfigChannel>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000592:	f000 f973 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b004      	add	sp, #16
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	2000007c 	.word	0x2000007c
 80005a4:	40012400 	.word	0x40012400

080005a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	@ (8000604 <MX_USART1_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005b4:	22e1      	movs	r2, #225	@ 0xe1
 80005b6:	0252      	lsls	r2, r2, #9
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ea:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 ff13 	bl	8002418 <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f941 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000bc 	.word	0x200000bc
 8000604:	40013800 	.word	0x40013800

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b089      	sub	sp, #36	@ 0x24
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	240c      	movs	r4, #12
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2314      	movs	r3, #20
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f002 fb7d 	bl	8002d18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <MX_GPIO_Init+0xbc>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <MX_GPIO_Init+0xbc>)
 8000624:	2180      	movs	r1, #128	@ 0x80
 8000626:	0289      	lsls	r1, r1, #10
 8000628:	430a      	orrs	r2, r1
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <MX_GPIO_Init+0xbc>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	@ 0x80
 8000632:	029b      	lsls	r3, r3, #10
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <MX_GPIO_Init+0xbc>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <MX_GPIO_Init+0xbc>)
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	02c9      	lsls	r1, r1, #11
 8000644:	430a      	orrs	r2, r1
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <MX_GPIO_Init+0xbc>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	@ 0x80
 800064e:	02db      	lsls	r3, r3, #11
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TogglePower_GPIO_Port, TogglePower_Pin, GPIO_PIN_RESET);
 8000656:	2390      	movs	r3, #144	@ 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2200      	movs	r2, #0
 800065c:	2101      	movs	r1, #1
 800065e:	0018      	movs	r0, r3
 8000660:	f001 f990 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_GPIO_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	0018      	movs	r0, r3
 800066c:	f001 f98a 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TogglePower_Pin */
  GPIO_InitStruct.Pin = TogglePower_Pin;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2201      	movs	r2, #1
 8000674:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2201      	movs	r2, #1
 800067a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TogglePower_GPIO_Port, &GPIO_InitStruct);
 8000688:	193a      	adds	r2, r7, r4
 800068a:	2390      	movs	r3, #144	@ 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f001 f80f 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2208      	movs	r2, #8
 800069c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2201      	movs	r2, #1
 80006a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	4a05      	ldr	r2, [pc, #20]	@ (80006c8 <MX_GPIO_Init+0xc0>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f000 fffc 	bl	80016b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b009      	add	sp, #36	@ 0x24
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000400 	.word	0x48000400

080006cc <Time_Constant_Capacitance_Measurement>:
int itersMax = 10;
uint32_t adcValues[10] = {0}; 
uint32_t times[10] = {0};

// Output in nC
int Time_Constant_Capacitance_Measurement(void) {
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	4c5e      	ldr	r4, [pc, #376]	@ (8000848 <Time_Constant_Capacitance_Measurement+0x17c>)
 80006d0:	44a5      	add	sp, r4
 80006d2:	af02      	add	r7, sp, #8
  // First charge for 0.1s
  // Record for 1s and output over uart

  char buffer[100];
  snprintf(buffer, sizeof(buffer), "Capacitance Measurement... %lu\r\n", HAL_GetTick());
 80006d4:	f000 fa68 	bl	8000ba8 <HAL_GetTick>
 80006d8:	0003      	movs	r3, r0
 80006da:	4a5c      	ldr	r2, [pc, #368]	@ (800084c <Time_Constant_Capacitance_Measurement+0x180>)
 80006dc:	24fa      	movs	r4, #250	@ 0xfa
 80006de:	00e4      	lsls	r4, r4, #3
 80006e0:	1938      	adds	r0, r7, r4
 80006e2:	2164      	movs	r1, #100	@ 0x64
 80006e4:	f002 fae4 	bl	8002cb0 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fd0c 	bl	8000108 <strlen>
 80006f0:	0003      	movs	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	2301      	movs	r3, #1
 80006f6:	425b      	negs	r3, r3
 80006f8:	1939      	adds	r1, r7, r4
 80006fa:	4855      	ldr	r0, [pc, #340]	@ (8000850 <Time_Constant_Capacitance_Measurement+0x184>)
 80006fc:	f001 fee0 	bl	80024c0 <HAL_UART_Transmit>

  if (HAL_GetTick() < 1000){
 8000700:	f000 fa52 	bl	8000ba8 <HAL_GetTick>
 8000704:	0002      	movs	r2, r0
 8000706:	23fa      	movs	r3, #250	@ 0xfa
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	429a      	cmp	r2, r3
 800070c:	d207      	bcs.n	800071e <Time_Constant_Capacitance_Measurement+0x52>
    HAL_GPIO_WritePin(TogglePower_GPIO_Port, TogglePower_Pin, GPIO_PIN_RESET);
 800070e:	2390      	movs	r3, #144	@ 0x90
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f001 f934 	bl	8001984 <HAL_GPIO_WritePin>
 800071c:	e02b      	b.n	8000776 <Time_Constant_Capacitance_Measurement+0xaa>
  } else {
    HAL_GPIO_WritePin(TogglePower_GPIO_Port, TogglePower_Pin, GPIO_PIN_SET);
 800071e:	2390      	movs	r3, #144	@ 0x90
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	2201      	movs	r2, #1
 8000724:	2101      	movs	r1, #1
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f92c 	bl	8001984 <HAL_GPIO_WritePin>

    if (HAL_GetTick() < 1005){
 800072c:	f000 fa3c 	bl	8000ba8 <HAL_GetTick>
 8000730:	0002      	movs	r2, r0
 8000732:	23fb      	movs	r3, #251	@ 0xfb
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	429a      	cmp	r2, r3
 8000738:	d81d      	bhi.n	8000776 <Time_Constant_Capacitance_Measurement+0xaa>
      char output[100] = "Discharge Begin...\r\n";
 800073a:	4b46      	ldr	r3, [pc, #280]	@ (8000854 <Time_Constant_Capacitance_Measurement+0x188>)
 800073c:	4a46      	ldr	r2, [pc, #280]	@ (8000858 <Time_Constant_Capacitance_Measurement+0x18c>)
 800073e:	189b      	adds	r3, r3, r2
 8000740:	19dc      	adds	r4, r3, r7
 8000742:	4b46      	ldr	r3, [pc, #280]	@ (800085c <Time_Constant_Capacitance_Measurement+0x190>)
 8000744:	0020      	movs	r0, r4
 8000746:	0019      	movs	r1, r3
 8000748:	2315      	movs	r3, #21
 800074a:	001a      	movs	r2, r3
 800074c:	f002 fb18 	bl	8002d80 <memcpy>
 8000750:	2315      	movs	r3, #21
 8000752:	18e3      	adds	r3, r4, r3
 8000754:	224f      	movs	r2, #79	@ 0x4f
 8000756:	2100      	movs	r1, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fadd 	bl	8002d18 <memset>
      HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), HAL_MAX_DELAY);
 800075e:	003b      	movs	r3, r7
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fcd1 	bl	8000108 <strlen>
 8000766:	0003      	movs	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	2301      	movs	r3, #1
 800076c:	425b      	negs	r3, r3
 800076e:	0039      	movs	r1, r7
 8000770:	4837      	ldr	r0, [pc, #220]	@ (8000850 <Time_Constant_Capacitance_Measurement+0x184>)
 8000772:	f001 fea5 	bl	80024c0 <HAL_UART_Transmit>
    }
  }

  iters++;
 8000776:	4b3a      	ldr	r3, [pc, #232]	@ (8000860 <Time_Constant_Capacitance_Measurement+0x194>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	4b38      	ldr	r3, [pc, #224]	@ (8000860 <Time_Constant_Capacitance_Measurement+0x194>)
 800077e:	601a      	str	r2, [r3, #0]
  if (iters % itersMax == 0){
 8000780:	4b37      	ldr	r3, [pc, #220]	@ (8000860 <Time_Constant_Capacitance_Measurement+0x194>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b37      	ldr	r3, [pc, #220]	@ (8000864 <Time_Constant_Capacitance_Measurement+0x198>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	0019      	movs	r1, r3
 800078a:	0010      	movs	r0, r2
 800078c:	f7ff fe3e 	bl	800040c <__aeabi_idivmod>
 8000790:	1e0b      	subs	r3, r1, #0
 8000792:	d130      	bne.n	80007f6 <Time_Constant_Capacitance_Measurement+0x12a>
    char buffer[2000];
    for (int i = 0; i < 1; i++){
 8000794:	2300      	movs	r3, #0
 8000796:	4a34      	ldr	r2, [pc, #208]	@ (8000868 <Time_Constant_Capacitance_Measurement+0x19c>)
 8000798:	18ba      	adds	r2, r7, r2
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	e017      	b.n	80007ce <Time_Constant_Capacitance_Measurement+0x102>
      snprintf(buffer, sizeof(buffer), "%lu,%lu\r\n", times[i], adcValues[i]);
 800079e:	4b33      	ldr	r3, [pc, #204]	@ (800086c <Time_Constant_Capacitance_Measurement+0x1a0>)
 80007a0:	4d31      	ldr	r5, [pc, #196]	@ (8000868 <Time_Constant_Capacitance_Measurement+0x19c>)
 80007a2:	197a      	adds	r2, r7, r5
 80007a4:	6812      	ldr	r2, [r2, #0]
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	58d4      	ldr	r4, [r2, r3]
 80007aa:	4b31      	ldr	r3, [pc, #196]	@ (8000870 <Time_Constant_Capacitance_Measurement+0x1a4>)
 80007ac:	197a      	adds	r2, r7, r5
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	58d3      	ldr	r3, [r2, r3]
 80007b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000874 <Time_Constant_Capacitance_Measurement+0x1a8>)
 80007b6:	21fa      	movs	r1, #250	@ 0xfa
 80007b8:	00c9      	lsls	r1, r1, #3
 80007ba:	0038      	movs	r0, r7
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	0023      	movs	r3, r4
 80007c0:	f002 fa76 	bl	8002cb0 <sniprintf>
    for (int i = 0; i < 1; i++){
 80007c4:	197b      	adds	r3, r7, r5
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	197a      	adds	r2, r7, r5
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <Time_Constant_Capacitance_Measurement+0x19c>)
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dde2      	ble.n	800079e <Time_Constant_Capacitance_Measurement+0xd2>
    }
    iters = 0;
 80007d8:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <Time_Constant_Capacitance_Measurement+0x194>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80007de:	003b      	movs	r3, r7
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff fc91 	bl	8000108 <strlen>
 80007e6:	0003      	movs	r3, r0
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	2301      	movs	r3, #1
 80007ec:	425b      	negs	r3, r3
 80007ee:	0039      	movs	r1, r7
 80007f0:	4817      	ldr	r0, [pc, #92]	@ (8000850 <Time_Constant_Capacitance_Measurement+0x184>)
 80007f2:	f001 fe65 	bl	80024c0 <HAL_UART_Transmit>
  }

  HAL_ADC_Start(&hadc);
 80007f6:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <Time_Constant_Capacitance_Measurement+0x1ac>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fb1f 	bl	8000e3c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80007fe:	2301      	movs	r3, #1
 8000800:	425a      	negs	r2, r3
 8000802:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <Time_Constant_Capacitance_Measurement+0x1ac>)
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fbac 	bl	8000f64 <HAL_ADC_PollForConversion>
  adcValues[iters - 1] = HAL_ADC_GetValue(&hadc);
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <Time_Constant_Capacitance_Measurement+0x194>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1e5c      	subs	r4, r3, #1
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <Time_Constant_Capacitance_Measurement+0x1ac>)
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fc3d 	bl	8001094 <HAL_ADC_GetValue>
 800081a:	0001      	movs	r1, r0
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <Time_Constant_Capacitance_Measurement+0x1a4>)
 800081e:	00a2      	lsls	r2, r4, #2
 8000820:	50d1      	str	r1, [r2, r3]
  HAL_ADC_Stop(&hadc);
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <Time_Constant_Capacitance_Measurement+0x1ac>)
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fb5d 	bl	8000ee4 <HAL_ADC_Stop>

  times[iters - 1] = HAL_GetTick(); // Time since start of measurement
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <Time_Constant_Capacitance_Measurement+0x194>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1e5c      	subs	r4, r3, #1
 8000830:	f000 f9ba 	bl	8000ba8 <HAL_GetTick>
 8000834:	0001      	movs	r1, r0
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <Time_Constant_Capacitance_Measurement+0x1a0>)
 8000838:	00a2      	lsls	r2, r4, #2
 800083a:	50d1      	str	r1, [r2, r3]
}
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	0018      	movs	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <Time_Constant_Capacitance_Measurement+0x18c>)
 8000844:	449d      	add	sp, r3
 8000846:	bdb0      	pop	{r4, r5, r7, pc}
 8000848:	fffff7c0 	.word	0xfffff7c0
 800084c:	0800362c 	.word	0x0800362c
 8000850:	200000bc 	.word	0x200000bc
 8000854:	fffff7c8 	.word	0xfffff7c8
 8000858:	00000838 	.word	0x00000838
 800085c:	0800365c 	.word	0x0800365c
 8000860:	20000144 	.word	0x20000144
 8000864:	20000000 	.word	0x20000000
 8000868:	00000834 	.word	0x00000834
 800086c:	20000170 	.word	0x20000170
 8000870:	20000148 	.word	0x20000148
 8000874:	08003650 	.word	0x08003650
 8000878:	2000007c 	.word	0x2000007c

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_MspInit+0x44>)
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <HAL_MspInit+0x44>)
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	619a      	str	r2, [r3, #24]
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	2201      	movs	r2, #1
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_MspInit+0x44>)
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <HAL_MspInit+0x44>)
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	0549      	lsls	r1, r1, #21
 80008b0:	430a      	orrs	r2, r1
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <HAL_MspInit+0x44>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	055b      	lsls	r3, r3, #21
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08b      	sub	sp, #44	@ 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	2414      	movs	r4, #20
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	2314      	movs	r3, #20
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f002 fa18 	bl	8002d18 <memset>
  if(hadc->Instance==ADC1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <HAL_ADC_MspInit+0x84>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d12b      	bne.n	800094a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <HAL_ADC_MspInit+0x88>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <HAL_ADC_MspInit+0x88>)
 80008f8:	2180      	movs	r1, #128	@ 0x80
 80008fa:	0089      	lsls	r1, r1, #2
 80008fc:	430a      	orrs	r2, r1
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <HAL_ADC_MspInit+0x88>)
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_ADC_MspInit+0x88>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <HAL_ADC_MspInit+0x88>)
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	0289      	lsls	r1, r1, #10
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_ADC_MspInit+0x88>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2280      	movs	r2, #128	@ 0x80
 800092e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2203      	movs	r2, #3
 8000934:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	193a      	adds	r2, r7, r4
 800093e:	2390      	movs	r3, #144	@ 0x90
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 feb5 	bl	80016b4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b00b      	add	sp, #44	@ 0x2c
 8000950:	bd90      	pop	{r4, r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	40012400 	.word	0x40012400
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b08b      	sub	sp, #44	@ 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	2414      	movs	r4, #20
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	2314      	movs	r3, #20
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f002 f9d2 	bl	8002d18 <memset>
  if(huart->Instance==USART1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <HAL_UART_MspInit+0x90>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d132      	bne.n	80009e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <HAL_UART_MspInit+0x94>)
 8000980:	699a      	ldr	r2, [r3, #24]
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <HAL_UART_MspInit+0x94>)
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	01c9      	lsls	r1, r1, #7
 8000988:	430a      	orrs	r2, r1
 800098a:	619a      	str	r2, [r3, #24]
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <HAL_UART_MspInit+0x94>)
 800098e:	699a      	ldr	r2, [r3, #24]
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	01db      	lsls	r3, r3, #7
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_UART_MspInit+0x94>)
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_UART_MspInit+0x94>)
 80009a0:	2180      	movs	r1, #128	@ 0x80
 80009a2:	0289      	lsls	r1, r1, #10
 80009a4:	430a      	orrs	r2, r1
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_MspInit+0x94>)
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	2380      	movs	r3, #128	@ 0x80
 80009ae:	029b      	lsls	r3, r3, #10
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2202      	movs	r2, #2
 80009c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2203      	movs	r2, #3
 80009ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2201      	movs	r2, #1
 80009d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	187a      	adds	r2, r7, r1
 80009d8:	2390      	movs	r3, #144	@ 0x90
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 fe68 	bl	80016b4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b00b      	add	sp, #44	@ 0x2c
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	40013800 	.word	0x40013800
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f8b2 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a30:	4a14      	ldr	r2, [pc, #80]	@ (8000a84 <_sbrk+0x5c>)
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <_sbrk+0x60>)
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <_sbrk+0x64>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <_sbrk+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	18d3      	adds	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d207      	bcs.n	8000a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a58:	f002 f966 	bl	8002d28 <__errno>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	425b      	negs	r3, r3
 8000a66:	e009      	b.n	8000a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	18d2      	adds	r2, r2, r3
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <_sbrk+0x64>)
 8000a78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b006      	add	sp, #24
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20001000 	.word	0x20001000
 8000a88:	00000400 	.word	0x00000400
 8000a8c:	20000198 	.word	0x20000198
 8000a90:	200002e8 	.word	0x200002e8

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fff6 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f002 f931 	bl	8002d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad2:	f7ff fca1 	bl	8000418 <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ae4:	080036e8 	.word	0x080036e8
  ldr r2, =_sbss
 8000ae8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000aec:	200002e8 	.word	0x200002e8

08000af0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_IRQHandler>
	...

08000af4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <HAL_Init+0x24>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_Init+0x24>)
 8000afe:	2110      	movs	r1, #16
 8000b00:	430a      	orrs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f809 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0a:	f7ff febd 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	40022000 	.word	0x40022000

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <HAL_InitTick+0x5c>)
 8000b26:	681c      	ldr	r4, [r3, #0]
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_InitTick+0x60>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	23fa      	movs	r3, #250	@ 0xfa
 8000b30:	0098      	lsls	r0, r3, #2
 8000b32:	f7ff fafb 	bl	800012c <__udivsi3>
 8000b36:	0003      	movs	r3, r0
 8000b38:	0019      	movs	r1, r3
 8000b3a:	0020      	movs	r0, r4
 8000b3c:	f7ff faf6 	bl	800012c <__udivsi3>
 8000b40:	0003      	movs	r3, r0
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fda9 	bl	800169a <HAL_SYSTICK_Config>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e00f      	b.n	8000b70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d80b      	bhi.n	8000b6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fd86 	bl	8001670 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_InitTick+0x64>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b003      	add	sp, #12
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	2000000c 	.word	0x2000000c
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_IncTick+0x1c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <HAL_IncTick+0x20>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	18d2      	adds	r2, r2, r3
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <HAL_IncTick+0x20>)
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	2000019c 	.word	0x2000019c

08000ba8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b02      	ldr	r3, [pc, #8]	@ (8000bb8 <HAL_GetTick+0x10>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	2000019c 	.word	0x2000019c

08000bbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e125      	b.n	8000e26 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10a      	bne.n	8000bf8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2234      	movs	r2, #52	@ 0x34
 8000bec:	2100      	movs	r1, #0
 8000bee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fe6c 	bl	80008d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d000      	beq.n	8000c04 <HAL_ADC_Init+0x48>
 8000c02:	e103      	b.n	8000e0c <HAL_ADC_Init+0x250>
 8000c04:	230f      	movs	r3, #15
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d000      	beq.n	8000c10 <HAL_ADC_Init+0x54>
 8000c0e:	e0fd      	b.n	8000e0c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2204      	movs	r2, #4
 8000c18:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c1a:	d000      	beq.n	8000c1e <HAL_ADC_Init+0x62>
 8000c1c:	e0f6      	b.n	8000e0c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c22:	4a83      	ldr	r2, [pc, #524]	@ (8000e30 <HAL_ADC_Init+0x274>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	2202      	movs	r2, #2
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2203      	movs	r2, #3
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d112      	bne.n	8000c62 <HAL_ADC_Init+0xa6>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2201      	movs	r2, #1
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d009      	beq.n	8000c5e <HAL_ADC_Init+0xa2>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	401a      	ands	r2, r3
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Init+0xa6>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <HAL_ADC_Init+0xa8>
 8000c62:	2300      	movs	r3, #0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d116      	bne.n	8000c96 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	2218      	movs	r2, #24
 8000c70:	4393      	bics	r3, r2
 8000c72:	0019      	movs	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	0899      	lsrs	r1, r3, #2
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4964      	ldr	r1, [pc, #400]	@ (8000e34 <HAL_ADC_Init+0x278>)
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7e1b      	ldrb	r3, [r3, #24]
 8000caa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7e5b      	ldrb	r3, [r3, #25]
 8000cb0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7e9b      	ldrb	r3, [r3, #26]
 8000cb8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d002      	beq.n	8000cca <HAL_ADC_Init+0x10e>
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	e000      	b.n	8000ccc <HAL_ADC_Init+0x110>
 8000cca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ccc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cd2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d101      	bne.n	8000ce0 <HAL_ADC_Init+0x124>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e000      	b.n	8000ce2 <HAL_ADC_Init+0x126>
 8000ce0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000ce2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2124      	movs	r1, #36	@ 0x24
 8000ce8:	5c5b      	ldrb	r3, [r3, r1]
 8000cea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7edb      	ldrb	r3, [r3, #27]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d115      	bne.n	8000d28 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7e9b      	ldrb	r3, [r3, #26]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d105      	bne.n	8000d10 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2280      	movs	r2, #128	@ 0x80
 8000d08:	0252      	lsls	r2, r2, #9
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	e00b      	b.n	8000d28 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d14:	2220      	movs	r2, #32
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d20:	2201      	movs	r2, #1
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69da      	ldr	r2, [r3, #28]
 8000d2c:	23c2      	movs	r3, #194	@ 0xc2
 8000d2e:	33ff      	adds	r3, #255	@ 0xff
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d007      	beq.n	8000d44 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68d9      	ldr	r1, [r3, #12]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	055b      	lsls	r3, r3, #21
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d01b      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d017      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d013      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d00f      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d00b      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d007      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8c:	2b06      	cmp	r3, #6
 8000d8e:	d003      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d94:	2b07      	cmp	r3, #7
 8000d96:	d112      	bne.n	8000dbe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2107      	movs	r1, #7
 8000da4:	438a      	bics	r2, r1
 8000da6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6959      	ldr	r1, [r3, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db2:	2207      	movs	r2, #7
 8000db4:	401a      	ands	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <HAL_ADC_Init+0x27c>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10b      	bne.n	8000de6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dd8:	2203      	movs	r2, #3
 8000dda:	4393      	bics	r3, r2
 8000ddc:	2201      	movs	r2, #1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000de4:	e01c      	b.n	8000e20 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dea:	2212      	movs	r2, #18
 8000dec:	4393      	bics	r3, r2
 8000dee:	2210      	movs	r2, #16
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e0a:	e009      	b.n	8000e20 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e10:	2210      	movs	r2, #16
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e20:	230f      	movs	r3, #15
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	fffffefd 	.word	0xfffffefd
 8000e34:	fffe0219 	.word	0xfffe0219
 8000e38:	833fffe7 	.word	0x833fffe7

08000e3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e44:	230f      	movs	r3, #15
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2204      	movs	r2, #4
 8000e54:	4013      	ands	r3, r2
 8000e56:	d138      	bne.n	8000eca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2234      	movs	r2, #52	@ 0x34
 8000e5c:	5c9b      	ldrb	r3, [r3, r2]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <HAL_ADC_Start+0x2a>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e038      	b.n	8000ed8 <HAL_ADC_Start+0x9c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2234      	movs	r2, #52	@ 0x34
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7e5b      	ldrb	r3, [r3, #25]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d007      	beq.n	8000e86 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e76:	230f      	movs	r3, #15
 8000e78:	18fc      	adds	r4, r7, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f000 fa23 	bl	80012c8 <ADC_Enable>
 8000e82:	0003      	movs	r3, r0
 8000e84:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e86:	230f      	movs	r3, #15
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d120      	bne.n	8000ed2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <HAL_ADC_Start+0xa4>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2234      	movs	r2, #52	@ 0x34
 8000eac:	2100      	movs	r1, #0
 8000eae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	221c      	movs	r2, #28
 8000eb6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e003      	b.n	8000ed2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000eca:	230f      	movs	r3, #15
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b005      	add	sp, #20
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	fffff0fe 	.word	0xfffff0fe

08000ee4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eec:	230f      	movs	r3, #15
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2234      	movs	r2, #52	@ 0x34
 8000ef8:	5c9b      	ldrb	r3, [r3, r2]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <HAL_ADC_Stop+0x1e>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e029      	b.n	8000f56 <HAL_ADC_Stop+0x72>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2234      	movs	r2, #52	@ 0x34
 8000f06:	2101      	movs	r1, #1
 8000f08:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000f0a:	250f      	movs	r5, #15
 8000f0c:	197c      	adds	r4, r7, r5
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 face 	bl	80014b2 <ADC_ConversionStop>
 8000f16:	0003      	movs	r3, r0
 8000f18:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000f1a:	197b      	adds	r3, r7, r5
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d112      	bne.n	8000f48 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000f22:	197c      	adds	r4, r7, r5
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 fa52 	bl	80013d0 <ADC_Disable>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000f30:	197b      	adds	r3, r7, r5
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d107      	bne.n	8000f48 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f3c:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <HAL_ADC_Stop+0x7c>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2201      	movs	r2, #1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2234      	movs	r2, #52	@ 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	fffffefe 	.word	0xfffffefe

08000f64 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d102      	bne.n	8000f7c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f76:	2308      	movs	r3, #8
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	e014      	b.n	8000fa6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2201      	movs	r2, #1
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10b      	bne.n	8000fa2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f8e:	2220      	movs	r2, #32
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2234      	movs	r2, #52	@ 0x34
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e071      	b.n	8001086 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fa6:	f7ff fdff 	bl	8000ba8 <HAL_GetTick>
 8000faa:	0003      	movs	r3, r0
 8000fac:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fae:	e01f      	b.n	8000ff0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	d01c      	beq.n	8000ff0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <HAL_ADC_PollForConversion+0x68>
 8000fbc:	f7ff fdf4 	bl	8000ba8 <HAL_GetTick>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d211      	bcs.n	8000ff0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d10b      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fdc:	2204      	movs	r2, #4
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2234      	movs	r2, #52	@ 0x34
 8000fe8:	2100      	movs	r1, #0
 8000fea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e04a      	b.n	8001086 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d0d9      	beq.n	8000fb0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	23c0      	movs	r3, #192	@ 0xc0
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	4013      	ands	r3, r2
 8001016:	d12d      	bne.n	8001074 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800101c:	2b00      	cmp	r3, #0
 800101e:	d129      	bne.n	8001074 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2208      	movs	r2, #8
 8001028:	4013      	ands	r3, r2
 800102a:	2b08      	cmp	r3, #8
 800102c:	d122      	bne.n	8001074 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2204      	movs	r2, #4
 8001036:	4013      	ands	r3, r2
 8001038:	d110      	bne.n	800105c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	210c      	movs	r1, #12
 8001046:	438a      	bics	r2, r1
 8001048:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104e:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <HAL_ADC_PollForConversion+0x12c>)
 8001050:	4013      	ands	r3, r2
 8001052:	2201      	movs	r2, #1
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
 800105a:	e00b      	b.n	8001074 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001060:	2220      	movs	r2, #32
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800106c:	2201      	movs	r2, #1
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7e1b      	ldrb	r3, [r3, #24]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d103      	bne.n	8001084 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	220c      	movs	r2, #12
 8001082:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	fffffefe 	.word	0xfffffefe

08001094 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b6:	230f      	movs	r3, #15
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	055b      	lsls	r3, r3, #21
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d011      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0x46>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d00d      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0x46>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d009      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0x46>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d005      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0x46>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d001      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0x46>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2234      	movs	r2, #52	@ 0x34
 80010f6:	5c9b      	ldrb	r3, [r3, r2]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x54>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e0d0      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x1f6>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2234      	movs	r2, #52	@ 0x34
 8001104:	2101      	movs	r1, #1
 8001106:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2204      	movs	r2, #4
 8001110:	4013      	ands	r3, r2
 8001112:	d000      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x6a>
 8001114:	e0b4      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a64      	ldr	r2, [pc, #400]	@ (80012ac <HAL_ADC_ConfigChannel+0x200>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d100      	bne.n	8001122 <HAL_ADC_ConfigChannel+0x76>
 8001120:	e082      	b.n	8001228 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2201      	movs	r2, #1
 800112e:	409a      	lsls	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	055b      	lsls	r3, r3, #21
 8001140:	429a      	cmp	r2, r3
 8001142:	d037      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001148:	2b01      	cmp	r3, #1
 800114a:	d033      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001150:	2b02      	cmp	r3, #2
 8001152:	d02f      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001158:	2b03      	cmp	r3, #3
 800115a:	d02b      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001160:	2b04      	cmp	r3, #4
 8001162:	d027      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	2b05      	cmp	r3, #5
 800116a:	d023      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001170:	2b06      	cmp	r3, #6
 8001172:	d01f      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001178:	2b07      	cmp	r3, #7
 800117a:	d01b      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	2107      	movs	r1, #7
 8001188:	400b      	ands	r3, r1
 800118a:	429a      	cmp	r2, r3
 800118c:	d012      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2107      	movs	r1, #7
 800119a:	438a      	bics	r2, r1
 800119c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6959      	ldr	r1, [r3, #20]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2207      	movs	r2, #7
 80011aa:	401a      	ands	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b10      	cmp	r3, #16
 80011ba:	d007      	beq.n	80011cc <HAL_ADC_ConfigChannel+0x120>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b11      	cmp	r3, #17
 80011c2:	d003      	beq.n	80011cc <HAL_ADC_ConfigChannel+0x120>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b12      	cmp	r3, #18
 80011ca:	d163      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011cc:	4b38      	ldr	r3, [pc, #224]	@ (80012b0 <HAL_ADC_ConfigChannel+0x204>)
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b10      	cmp	r3, #16
 80011d6:	d009      	beq.n	80011ec <HAL_ADC_ConfigChannel+0x140>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b11      	cmp	r3, #17
 80011de:	d102      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x13a>
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	03db      	lsls	r3, r3, #15
 80011e4:	e004      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x144>
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	045b      	lsls	r3, r3, #17
 80011ea:	e001      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x144>
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	041b      	lsls	r3, r3, #16
 80011f0:	4a2f      	ldr	r2, [pc, #188]	@ (80012b0 <HAL_ADC_ConfigChannel+0x204>)
 80011f2:	430b      	orrs	r3, r1
 80011f4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d14a      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011fe:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <HAL_ADC_ConfigChannel+0x208>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	492d      	ldr	r1, [pc, #180]	@ (80012b8 <HAL_ADC_ConfigChannel+0x20c>)
 8001204:	0018      	movs	r0, r3
 8001206:	f7fe ff91 	bl	800012c <__udivsi3>
 800120a:	0003      	movs	r3, r0
 800120c:	001a      	movs	r2, r3
 800120e:	0013      	movs	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	189b      	adds	r3, r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001218:	e002      	b.n	8001220 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3b01      	subs	r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f9      	bne.n	800121a <HAL_ADC_ConfigChannel+0x16e>
 8001226:	e035      	b.n	8001294 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2101      	movs	r1, #1
 8001234:	4099      	lsls	r1, r3
 8001236:	000b      	movs	r3, r1
 8001238:	43d9      	mvns	r1, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	400a      	ands	r2, r1
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d007      	beq.n	800125a <HAL_ADC_ConfigChannel+0x1ae>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b11      	cmp	r3, #17
 8001250:	d003      	beq.n	800125a <HAL_ADC_ConfigChannel+0x1ae>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b12      	cmp	r3, #18
 8001258:	d11c      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_ADC_ConfigChannel+0x204>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b10      	cmp	r3, #16
 8001264:	d007      	beq.n	8001276 <HAL_ADC_ConfigChannel+0x1ca>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b11      	cmp	r3, #17
 800126c:	d101      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x1c6>
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_ADC_ConfigChannel+0x210>)
 8001270:	e002      	b.n	8001278 <HAL_ADC_ConfigChannel+0x1cc>
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_ADC_ConfigChannel+0x214>)
 8001274:	e000      	b.n	8001278 <HAL_ADC_ConfigChannel+0x1cc>
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_ADC_ConfigChannel+0x218>)
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <HAL_ADC_ConfigChannel+0x204>)
 800127a:	400b      	ands	r3, r1
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e009      	b.n	8001294 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001284:	2220      	movs	r2, #32
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2234      	movs	r2, #52	@ 0x34
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	00001001 	.word	0x00001001
 80012b0:	40012708 	.word	0x40012708
 80012b4:	20000004 	.word	0x20000004
 80012b8:	000f4240 	.word	0x000f4240
 80012bc:	ffbfffff 	.word	0xffbfffff
 80012c0:	feffffff 	.word	0xfeffffff
 80012c4:	ff7fffff 	.word	0xff7fffff

080012c8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2203      	movs	r2, #3
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d112      	bne.n	800130c <ADC_Enable+0x44>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d009      	beq.n	8001308 <ADC_Enable+0x40>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	401a      	ands	r2, r3
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	429a      	cmp	r2, r3
 8001306:	d101      	bne.n	800130c <ADC_Enable+0x44>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <ADC_Enable+0x46>
 800130c:	2300      	movs	r3, #0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d152      	bne.n	80013b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a2a      	ldr	r2, [pc, #168]	@ (80013c4 <ADC_Enable+0xfc>)
 800131a:	4013      	ands	r3, r2
 800131c:	d00d      	beq.n	800133a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001322:	2210      	movs	r2, #16
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800132e:	2201      	movs	r2, #1
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e03f      	b.n	80013ba <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	430a      	orrs	r2, r1
 8001348:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <ADC_Enable+0x100>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	491f      	ldr	r1, [pc, #124]	@ (80013cc <ADC_Enable+0x104>)
 8001350:	0018      	movs	r0, r3
 8001352:	f7fe feeb 	bl	800012c <__udivsi3>
 8001356:	0003      	movs	r3, r0
 8001358:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800135a:	e002      	b.n	8001362 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3b01      	subs	r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f9      	bne.n	800135c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001368:	f7ff fc1e 	bl	8000ba8 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001370:	e01b      	b.n	80013aa <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001372:	f7ff fc19 	bl	8000ba8 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d914      	bls.n	80013aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2201      	movs	r2, #1
 8001388:	4013      	ands	r3, r2
 800138a:	2b01      	cmp	r3, #1
 800138c:	d00d      	beq.n	80013aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001392:	2210      	movs	r2, #16
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139e:	2201      	movs	r2, #1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e007      	b.n	80013ba <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d1dc      	bne.n	8001372 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b004      	add	sp, #16
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	80000017 	.word	0x80000017
 80013c8:	20000004 	.word	0x20000004
 80013cc:	000f4240 	.word	0x000f4240

080013d0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2203      	movs	r2, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d112      	bne.n	8001410 <ADC_Disable+0x40>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d009      	beq.n	800140c <ADC_Disable+0x3c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	2380      	movs	r3, #128	@ 0x80
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	401a      	ands	r2, r3
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	429a      	cmp	r2, r3
 800140a:	d101      	bne.n	8001410 <ADC_Disable+0x40>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <ADC_Disable+0x42>
 8001410:	2300      	movs	r3, #0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d048      	beq.n	80014a8 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2205      	movs	r2, #5
 800141e:	4013      	ands	r3, r2
 8001420:	2b01      	cmp	r3, #1
 8001422:	d110      	bne.n	8001446 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2102      	movs	r1, #2
 8001430:	430a      	orrs	r2, r1
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2203      	movs	r2, #3
 800143a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800143c:	f7ff fbb4 	bl	8000ba8 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001444:	e029      	b.n	800149a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144a:	2210      	movs	r2, #16
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001456:	2201      	movs	r2, #1
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e023      	b.n	80014aa <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001462:	f7ff fba1 	bl	8000ba8 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d914      	bls.n	800149a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2201      	movs	r2, #1
 8001478:	4013      	ands	r3, r2
 800147a:	2b01      	cmp	r3, #1
 800147c:	d10d      	bne.n	800149a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001482:	2210      	movs	r2, #16
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800148e:	2201      	movs	r2, #1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e007      	b.n	80014aa <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d0dc      	beq.n	8001462 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2204      	movs	r2, #4
 80014c6:	4013      	ands	r3, r2
 80014c8:	d03a      	beq.n	8001540 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2204      	movs	r2, #4
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d10d      	bne.n	80014f4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2202      	movs	r2, #2
 80014e0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014e2:	d107      	bne.n	80014f4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2110      	movs	r1, #16
 80014f0:	430a      	orrs	r2, r1
 80014f2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014f4:	f7ff fb58 	bl	8000ba8 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014fc:	e01a      	b.n	8001534 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014fe:	f7ff fb53 	bl	8000ba8 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d913      	bls.n	8001534 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2204      	movs	r2, #4
 8001514:	4013      	ands	r3, r2
 8001516:	d00d      	beq.n	8001534 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151c:	2210      	movs	r2, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001528:	2201      	movs	r2, #1
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e006      	b.n	8001542 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2204      	movs	r2, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d1de      	bne.n	80014fe <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b004      	add	sp, #16
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	0002      	movs	r2, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001560:	d828      	bhi.n	80015b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001562:	4a2f      	ldr	r2, [pc, #188]	@ (8001620 <__NVIC_SetPriority+0xd4>)
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	33c0      	adds	r3, #192	@ 0xc0
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	589b      	ldr	r3, [r3, r2]
 8001572:	1dfa      	adds	r2, r7, #7
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	0011      	movs	r1, r2
 8001578:	2203      	movs	r2, #3
 800157a:	400a      	ands	r2, r1
 800157c:	00d2      	lsls	r2, r2, #3
 800157e:	21ff      	movs	r1, #255	@ 0xff
 8001580:	4091      	lsls	r1, r2
 8001582:	000a      	movs	r2, r1
 8001584:	43d2      	mvns	r2, r2
 8001586:	401a      	ands	r2, r3
 8001588:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	22ff      	movs	r2, #255	@ 0xff
 8001590:	401a      	ands	r2, r3
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	0018      	movs	r0, r3
 8001598:	2303      	movs	r3, #3
 800159a:	4003      	ands	r3, r0
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a0:	481f      	ldr	r0, [pc, #124]	@ (8001620 <__NVIC_SetPriority+0xd4>)
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	430a      	orrs	r2, r1
 80015ac:	33c0      	adds	r3, #192	@ 0xc0
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015b2:	e031      	b.n	8001618 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <__NVIC_SetPriority+0xd8>)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	0019      	movs	r1, r3
 80015bc:	230f      	movs	r3, #15
 80015be:	400b      	ands	r3, r1
 80015c0:	3b08      	subs	r3, #8
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3306      	adds	r3, #6
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	3304      	adds	r3, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1dfa      	adds	r2, r7, #7
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	0011      	movs	r1, r2
 80015d4:	2203      	movs	r2, #3
 80015d6:	400a      	ands	r2, r1
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	21ff      	movs	r1, #255	@ 0xff
 80015dc:	4091      	lsls	r1, r2
 80015de:	000a      	movs	r2, r1
 80015e0:	43d2      	mvns	r2, r2
 80015e2:	401a      	ands	r2, r3
 80015e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	22ff      	movs	r2, #255	@ 0xff
 80015ec:	401a      	ands	r2, r3
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	0018      	movs	r0, r3
 80015f4:	2303      	movs	r3, #3
 80015f6:	4003      	ands	r3, r0
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <__NVIC_SetPriority+0xd8>)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	001c      	movs	r4, r3
 8001604:	230f      	movs	r3, #15
 8001606:	4023      	ands	r3, r4
 8001608:	3b08      	subs	r3, #8
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	430a      	orrs	r2, r1
 800160e:	3306      	adds	r3, #6
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	18c3      	adds	r3, r0, r3
 8001614:	3304      	adds	r3, #4
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	46c0      	nop			@ (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b003      	add	sp, #12
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	1e5a      	subs	r2, r3, #1
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	045b      	lsls	r3, r3, #17
 8001638:	429a      	cmp	r2, r3
 800163a:	d301      	bcc.n	8001640 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163c:	2301      	movs	r3, #1
 800163e:	e010      	b.n	8001662 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <SysTick_Config+0x44>)
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	3a01      	subs	r2, #1
 8001646:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001648:	2301      	movs	r3, #1
 800164a:	425b      	negs	r3, r3
 800164c:	2103      	movs	r1, #3
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff ff7c 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SysTick_Config+0x44>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <SysTick_Config+0x44>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	210f      	movs	r1, #15
 800167c:	187b      	adds	r3, r7, r1
 800167e:	1c02      	adds	r2, r0, #0
 8001680:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	187b      	adds	r3, r7, r1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff ff5d 	bl	800154c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b004      	add	sp, #16
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff ffbf 	bl	8001628 <SysTick_Config>
 80016aa:	0003      	movs	r3, r0
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b002      	add	sp, #8
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e149      	b.n	8001958 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4091      	lsls	r1, r2
 80016ce:	000a      	movs	r2, r1
 80016d0:	4013      	ands	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d100      	bne.n	80016dc <HAL_GPIO_Init+0x28>
 80016da:	e13a      	b.n	8001952 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d130      	bne.n	8001756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	409a      	lsls	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	43da      	mvns	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800172a:	2201      	movs	r2, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	2201      	movs	r2, #1
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	2b03      	cmp	r3, #3
 8001760:	d017      	beq.n	8001792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	4013      	ands	r3, r2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d123      	bne.n	80017e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	58d3      	ldr	r3, [r2, r3]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2207      	movs	r2, #7
 80017b0:	4013      	ands	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2107      	movs	r1, #7
 80017ca:	400b      	ands	r3, r1
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	6939      	ldr	r1, [r7, #16]
 80017e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	401a      	ands	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	23c0      	movs	r3, #192	@ 0xc0
 8001820:	029b      	lsls	r3, r3, #10
 8001822:	4013      	ands	r3, r2
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0x174>
 8001826:	e094      	b.n	8001952 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001828:	4b51      	ldr	r3, [pc, #324]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	4b50      	ldr	r3, [pc, #320]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 800182e:	2101      	movs	r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	619a      	str	r2, [r3, #24]
 8001834:	4b4e      	ldr	r3, [pc, #312]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001840:	4a4c      	ldr	r2, [pc, #304]	@ (8001974 <HAL_GPIO_Init+0x2c0>)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	589b      	ldr	r3, [r3, r2]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2203      	movs	r2, #3
 8001852:	4013      	ands	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	43da      	mvns	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	2390      	movs	r3, #144	@ 0x90
 8001868:	05db      	lsls	r3, r3, #23
 800186a:	429a      	cmp	r2, r3
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x1d6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a41      	ldr	r2, [pc, #260]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x1d2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a40      	ldr	r2, [pc, #256]	@ (800197c <HAL_GPIO_Init+0x2c8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x1ce>
 800187e:	2302      	movs	r3, #2
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 8001882:	2305      	movs	r3, #5
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 800188a:	2300      	movs	r3, #0
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	2103      	movs	r1, #3
 8001890:	400a      	ands	r2, r1
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4093      	lsls	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189c:	4935      	ldr	r1, [pc, #212]	@ (8001974 <HAL_GPIO_Init+0x2c0>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018aa:	4b35      	ldr	r3, [pc, #212]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43da      	mvns	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	2380      	movs	r3, #128	@ 0x80
 80018c0:	035b      	lsls	r3, r3, #13
 80018c2:	4013      	ands	r3, r2
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	039b      	lsls	r3, r3, #14
 80018ec:	4013      	ands	r3, r2
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f8:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	4013      	ands	r3, r2
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001922:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43da      	mvns	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	025b      	lsls	r3, r3, #9
 8001940:	4013      	ands	r3, r2
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	40da      	lsrs	r2, r3
 8001960:	1e13      	subs	r3, r2, #0
 8001962:	d000      	beq.n	8001966 <HAL_GPIO_Init+0x2b2>
 8001964:	e6ae      	b.n	80016c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b006      	add	sp, #24
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	48000400 	.word	0x48000400
 800197c:	48000800 	.word	0x48000800
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	0008      	movs	r0, r1
 800198e:	0011      	movs	r1, r2
 8001990:	1cbb      	adds	r3, r7, #2
 8001992:	1c02      	adds	r2, r0, #0
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	1c7b      	adds	r3, r7, #1
 8001998:	1c0a      	adds	r2, r1, #0
 800199a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800199c:	1c7b      	adds	r3, r7, #1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a4:	1cbb      	adds	r3, r7, #2
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ac:	e003      	b.n	80019b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ae:	1cbb      	adds	r3, r7, #2
 80019b0:	881a      	ldrh	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e301      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2201      	movs	r2, #1
 80019d8:	4013      	ands	r3, r2
 80019da:	d100      	bne.n	80019de <HAL_RCC_OscConfig+0x1e>
 80019dc:	e08d      	b.n	8001afa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019de:	4bc3      	ldr	r3, [pc, #780]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	220c      	movs	r2, #12
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00e      	beq.n	8001a08 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ea:	4bc0      	ldr	r3, [pc, #768]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	220c      	movs	r2, #12
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x64>
 80019f6:	4bbd      	ldr	r3, [pc, #756]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	401a      	ands	r2, r3
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d10d      	bne.n	8001a24 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	4bb8      	ldr	r3, [pc, #736]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
 8001a12:	d100      	bne.n	8001a16 <HAL_RCC_OscConfig+0x56>
 8001a14:	e070      	b.n	8001af8 <HAL_RCC_OscConfig+0x138>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d000      	beq.n	8001a20 <HAL_RCC_OscConfig+0x60>
 8001a1e:	e06b      	b.n	8001af8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e2d8      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_OscConfig+0x7c>
 8001a2c:	4baf      	ldr	r3, [pc, #700]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4bae      	ldr	r3, [pc, #696]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a32:	2180      	movs	r1, #128	@ 0x80
 8001a34:	0249      	lsls	r1, r1, #9
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e02f      	b.n	8001a9c <HAL_RCC_OscConfig+0xdc>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x9e>
 8001a44:	4ba9      	ldr	r3, [pc, #676]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4ba8      	ldr	r3, [pc, #672]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	49a9      	ldr	r1, [pc, #676]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4ba6      	ldr	r3, [pc, #664]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4ba5      	ldr	r3, [pc, #660]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a56:	49a7      	ldr	r1, [pc, #668]	@ (8001cf4 <HAL_RCC_OscConfig+0x334>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e01e      	b.n	8001a9c <HAL_RCC_OscConfig+0xdc>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d10e      	bne.n	8001a84 <HAL_RCC_OscConfig+0xc4>
 8001a66:	4ba1      	ldr	r3, [pc, #644]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4ba0      	ldr	r3, [pc, #640]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	02c9      	lsls	r1, r1, #11
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	4b9d      	ldr	r3, [pc, #628]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b9c      	ldr	r3, [pc, #624]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	2180      	movs	r1, #128	@ 0x80
 8001a7c:	0249      	lsls	r1, r1, #9
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xdc>
 8001a84:	4b99      	ldr	r3, [pc, #612]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b98      	ldr	r3, [pc, #608]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	4999      	ldr	r1, [pc, #612]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	4b96      	ldr	r3, [pc, #600]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b95      	ldr	r3, [pc, #596]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001a96:	4997      	ldr	r1, [pc, #604]	@ (8001cf4 <HAL_RCC_OscConfig+0x334>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d014      	beq.n	8001ace <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f880 	bl	8000ba8 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aae:	f7ff f87b 	bl	8000ba8 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b64      	cmp	r3, #100	@ 0x64
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e28a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac0:	4b8a      	ldr	r3, [pc, #552]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0xee>
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff f86b 	bl	8000ba8 <HAL_GetTick>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f866 	bl	8000ba8 <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	@ 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e275      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b80      	ldr	r3, [pc, #512]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	029b      	lsls	r3, r3, #10
 8001af2:	4013      	ands	r3, r2
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x118>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2202      	movs	r2, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	d100      	bne.n	8001b06 <HAL_RCC_OscConfig+0x146>
 8001b04:	e069      	b.n	8001bda <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b06:	4b79      	ldr	r3, [pc, #484]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d00b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b10:	4b76      	ldr	r3, [pc, #472]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	220c      	movs	r2, #12
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d11c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x196>
 8001b1c:	4b73      	ldr	r3, [pc, #460]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	025b      	lsls	r3, r3, #9
 8001b24:	4013      	ands	r3, r2
 8001b26:	d116      	bne.n	8001b56 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b28:	4b70      	ldr	r3, [pc, #448]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x17e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e24b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	22f8      	movs	r2, #248	@ 0xf8
 8001b44:	4393      	bics	r3, r2
 8001b46:	0019      	movs	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	00da      	lsls	r2, r3, #3
 8001b4e:	4b67      	ldr	r3, [pc, #412]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b54:	e041      	b.n	8001bda <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d024      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5e:	4b63      	ldr	r3, [pc, #396]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b62      	ldr	r3, [pc, #392]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f81d 	bl	8000ba8 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff f818 	bl	8000ba8 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e227      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d0f1      	beq.n	8001b74 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b56      	ldr	r3, [pc, #344]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	22f8      	movs	r2, #248	@ 0xf8
 8001b96:	4393      	bics	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00da      	lsls	r2, r3, #3
 8001ba0:	4b52      	ldr	r3, [pc, #328]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e018      	b.n	8001bda <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba8:	4b50      	ldr	r3, [pc, #320]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b4f      	ldr	r3, [pc, #316]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	438a      	bics	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe fff8 	bl	8000ba8 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7fe fff3 	bl	8000ba8 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e202      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd0:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d1f1      	bne.n	8001bbe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2208      	movs	r2, #8
 8001be0:	4013      	ands	r3, r2
 8001be2:	d036      	beq.n	8001c52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d019      	beq.n	8001c20 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bec:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe ffd6 	bl	8000ba8 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c02:	f7fe ffd1 	bl	8000ba8 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1e0      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c14:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d0f1      	beq.n	8001c02 <HAL_RCC_OscConfig+0x242>
 8001c1e:	e018      	b.n	8001c52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c20:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c24:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	438a      	bics	r2, r1
 8001c2a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2c:	f7fe ffbc 	bl	8000ba8 <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c36:	f7fe ffb7 	bl	8000ba8 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1c6      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d1f1      	bne.n	8001c36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2204      	movs	r2, #4
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d100      	bne.n	8001c5e <HAL_RCC_OscConfig+0x29e>
 8001c5c:	e0b4      	b.n	8001dc8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5e:	201f      	movs	r0, #31
 8001c60:	183b      	adds	r3, r7, r0
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	055b      	lsls	r3, r3, #21
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d110      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	0549      	lsls	r1, r1, #21
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	61da      	str	r2, [r3, #28]
 8001c80:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001c82:	69da      	ldr	r2, [r3, #28]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	055b      	lsls	r3, r3, #21
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c8e:	183b      	adds	r3, r7, r0
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d11a      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	2180      	movs	r1, #128	@ 0x80
 8001ca8:	0049      	lsls	r1, r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7fe ff7b 	bl	8000ba8 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb8:	f7fe ff76 	bl	8000ba8 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	@ 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e185      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x33c>
 8001cde:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	4b02      	ldr	r3, [pc, #8]	@ (8001cec <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	621a      	str	r2, [r3, #32]
 8001cea:	e035      	b.n	8001d58 <HAL_RCC_OscConfig+0x398>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	fffeffff 	.word	0xfffeffff
 8001cf4:	fffbffff 	.word	0xfffbffff
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x35e>
 8001d04:	4bb6      	ldr	r3, [pc, #728]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	4bb5      	ldr	r3, [pc, #724]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	621a      	str	r2, [r3, #32]
 8001d10:	4bb3      	ldr	r3, [pc, #716]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	4bb2      	ldr	r3, [pc, #712]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d16:	2104      	movs	r1, #4
 8001d18:	438a      	bics	r2, r1
 8001d1a:	621a      	str	r2, [r3, #32]
 8001d1c:	e01c      	b.n	8001d58 <HAL_RCC_OscConfig+0x398>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x380>
 8001d26:	4bae      	ldr	r3, [pc, #696]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d28:	6a1a      	ldr	r2, [r3, #32]
 8001d2a:	4bad      	ldr	r3, [pc, #692]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	621a      	str	r2, [r3, #32]
 8001d32:	4bab      	ldr	r3, [pc, #684]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d34:	6a1a      	ldr	r2, [r3, #32]
 8001d36:	4baa      	ldr	r3, [pc, #680]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	621a      	str	r2, [r3, #32]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0x398>
 8001d40:	4ba7      	ldr	r3, [pc, #668]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	4ba6      	ldr	r3, [pc, #664]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	438a      	bics	r2, r1
 8001d4a:	621a      	str	r2, [r3, #32]
 8001d4c:	4ba4      	ldr	r3, [pc, #656]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	4ba3      	ldr	r3, [pc, #652]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d52:	2104      	movs	r1, #4
 8001d54:	438a      	bics	r2, r1
 8001d56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d014      	beq.n	8001d8a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7fe ff22 	bl	8000ba8 <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	e009      	b.n	8001d7e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe ff1d 	bl	8000ba8 <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	4a9b      	ldr	r2, [pc, #620]	@ (8001fe4 <HAL_RCC_OscConfig+0x624>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e12b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7e:	4b98      	ldr	r3, [pc, #608]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3aa>
 8001d88:	e013      	b.n	8001db2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe ff0d 	bl	8000ba8 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d92:	e009      	b.n	8001da8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7fe ff08 	bl	8000ba8 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a91      	ldr	r2, [pc, #580]	@ (8001fe4 <HAL_RCC_OscConfig+0x624>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e116      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	4b8d      	ldr	r3, [pc, #564]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db2:	231f      	movs	r3, #31
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbc:	4b88      	ldr	r3, [pc, #544]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001dbe:	69da      	ldr	r2, [r3, #28]
 8001dc0:	4b87      	ldr	r3, [pc, #540]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	4989      	ldr	r1, [pc, #548]	@ (8001fe8 <HAL_RCC_OscConfig+0x628>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d12a      	bne.n	8001e30 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dda:	4b81      	ldr	r3, [pc, #516]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dde:	4b80      	ldr	r3, [pc, #512]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001de0:	2104      	movs	r1, #4
 8001de2:	430a      	orrs	r2, r1
 8001de4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001de6:	4b7e      	ldr	r3, [pc, #504]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dea:	4b7d      	ldr	r3, [pc, #500]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7fe fed9 	bl	8000ba8 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dfc:	f7fe fed4 	bl	8000ba8 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0e3      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e0e:	4b74      	ldr	r3, [pc, #464]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d0f1      	beq.n	8001dfc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e18:	4b71      	ldr	r3, [pc, #452]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e1c:	22f8      	movs	r2, #248	@ 0xf8
 8001e1e:	4393      	bics	r3, r2
 8001e20:	0019      	movs	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	00da      	lsls	r2, r3, #3
 8001e28:	4b6d      	ldr	r3, [pc, #436]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e2e:	e034      	b.n	8001e9a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	3305      	adds	r3, #5
 8001e36:	d111      	bne.n	8001e5c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e38:	4b69      	ldr	r3, [pc, #420]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e3c:	4b68      	ldr	r3, [pc, #416]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	2104      	movs	r1, #4
 8001e40:	438a      	bics	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e44:	4b66      	ldr	r3, [pc, #408]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e48:	22f8      	movs	r2, #248	@ 0xf8
 8001e4a:	4393      	bics	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	00da      	lsls	r2, r3, #3
 8001e54:	4b62      	ldr	r3, [pc, #392]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e5a:	e01e      	b.n	8001e9a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e5c:	4b60      	ldr	r3, [pc, #384]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e60:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e62:	2104      	movs	r1, #4
 8001e64:	430a      	orrs	r2, r1
 8001e66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e68:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7fe fe98 	bl	8000ba8 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e7e:	f7fe fe93 	bl	8000ba8 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0a2      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e90:	4b53      	ldr	r3, [pc, #332]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f1      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d100      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4e4>
 8001ea2:	e097      	b.n	8001fd4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea4:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	220c      	movs	r2, #12
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d100      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4f2>
 8001eb0:	e06b      	b.n	8001f8a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d14c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b49      	ldr	r3, [pc, #292]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b48      	ldr	r3, [pc, #288]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001ec0:	494a      	ldr	r1, [pc, #296]	@ (8001fec <HAL_RCC_OscConfig+0x62c>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fe6f 	bl	8000ba8 <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7fe fe6a 	bl	8000ba8 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e079      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	049b      	lsls	r3, r3, #18
 8001eea:	4013      	ands	r3, r2
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eee:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001efc:	4b38      	ldr	r3, [pc, #224]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f02:	4b37      	ldr	r3, [pc, #220]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff0 <HAL_RCC_OscConfig+0x630>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	431a      	orrs	r2, r3
 8001f16:	4b32      	ldr	r3, [pc, #200]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b30      	ldr	r3, [pc, #192]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f22:	2180      	movs	r1, #128	@ 0x80
 8001f24:	0449      	lsls	r1, r1, #17
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fe3d 	bl	8000ba8 <HAL_GetTick>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe fe38 	bl	8000ba8 <HAL_GetTick>
 8001f38:	0002      	movs	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e047      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f46:	4b26      	ldr	r3, [pc, #152]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	049b      	lsls	r3, r3, #18
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x574>
 8001f52:	e03f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b22      	ldr	r3, [pc, #136]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f5a:	4924      	ldr	r1, [pc, #144]	@ (8001fec <HAL_RCC_OscConfig+0x62c>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe fe22 	bl	8000ba8 <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7fe fe1d 	bl	8000ba8 <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e02c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	049b      	lsls	r3, r3, #18
 8001f84:	4013      	ands	r3, r2
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5aa>
 8001f88:	e024      	b.n	8001fd4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e01f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <HAL_RCC_OscConfig+0x620>)
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	025b      	lsls	r3, r3, #9
 8001fa8:	401a      	ands	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	23f0      	movs	r3, #240	@ 0xf0
 8001fc4:	039b      	lsls	r3, r3, #14
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b008      	add	sp, #32
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	00001388 	.word	0x00001388
 8001fe8:	efffffff 	.word	0xefffffff
 8001fec:	feffffff 	.word	0xfeffffff
 8001ff0:	ffc2ffff 	.word	0xffc2ffff

08001ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0b3      	b.n	8002170 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b5b      	ldr	r3, [pc, #364]	@ (8002178 <HAL_RCC_ClockConfig+0x184>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d911      	bls.n	800203a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b58      	ldr	r3, [pc, #352]	@ (8002178 <HAL_RCC_ClockConfig+0x184>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	4393      	bics	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	4b55      	ldr	r3, [pc, #340]	@ (8002178 <HAL_RCC_ClockConfig+0x184>)
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002028:	4b53      	ldr	r3, [pc, #332]	@ (8002178 <HAL_RCC_ClockConfig+0x184>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	4013      	ands	r3, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e09a      	b.n	8002170 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2202      	movs	r2, #2
 8002040:	4013      	ands	r3, r2
 8002042:	d015      	beq.n	8002070 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2204      	movs	r2, #4
 800204a:	4013      	ands	r3, r2
 800204c:	d006      	beq.n	800205c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800204e:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4b4a      	ldr	r3, [pc, #296]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 8002054:	21e0      	movs	r1, #224	@ 0xe0
 8002056:	00c9      	lsls	r1, r1, #3
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	22f0      	movs	r2, #240	@ 0xf0
 8002062:	4393      	bics	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	4b44      	ldr	r3, [pc, #272]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
 8002078:	d040      	beq.n	80020fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b3e      	ldr	r3, [pc, #248]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	@ 0x80
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	4013      	ands	r3, r2
 800208c:	d114      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e06e      	b.n	8002170 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b38      	ldr	r3, [pc, #224]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	049b      	lsls	r3, r3, #18
 80020a2:	4013      	ands	r3, r2
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e062      	b.n	8002170 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b34      	ldr	r3, [pc, #208]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e05b      	b.n	8002170 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b8:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2203      	movs	r2, #3
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7fe fd6c 	bl	8000ba8 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d4:	e009      	b.n	80020ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7fe fd67 	bl	8000ba8 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4a27      	ldr	r2, [pc, #156]	@ (8002180 <HAL_RCC_ClockConfig+0x18c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e042      	b.n	8002170 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	220c      	movs	r2, #12
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1ec      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_RCC_ClockConfig+0x184>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2201      	movs	r2, #1
 8002102:	4013      	ands	r3, r2
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d211      	bcs.n	800212e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_RCC_ClockConfig+0x184>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2201      	movs	r2, #1
 8002110:	4393      	bics	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <HAL_RCC_ClockConfig+0x184>)
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_RCC_ClockConfig+0x184>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2201      	movs	r2, #1
 8002122:	4013      	ands	r3, r2
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e020      	b.n	8002170 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2204      	movs	r2, #4
 8002134:	4013      	ands	r3, r2
 8002136:	d009      	beq.n	800214c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b10      	ldr	r3, [pc, #64]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a11      	ldr	r2, [pc, #68]	@ (8002184 <HAL_RCC_ClockConfig+0x190>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800214c:	f000 f820 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002150:	0001      	movs	r1, r0
 8002152:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_RCC_ClockConfig+0x188>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	220f      	movs	r2, #15
 800215a:	4013      	ands	r3, r2
 800215c:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <HAL_RCC_ClockConfig+0x194>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	000a      	movs	r2, r1
 8002162:	40da      	lsrs	r2, r3
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_RCC_ClockConfig+0x198>)
 8002166:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002168:	2003      	movs	r0, #3
 800216a:	f7fe fcd7 	bl	8000b1c <HAL_InitTick>
  
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	b004      	add	sp, #16
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	00001388 	.word	0x00001388
 8002184:	fffff8ff 	.word	0xfffff8ff
 8002188:	08003674 	.word	0x08003674
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	220c      	movs	r2, #12
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x36>
 80021be:	e02c      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021c2:	613b      	str	r3, [r7, #16]
      break;
 80021c4:	e02c      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	0c9b      	lsrs	r3, r3, #18
 80021ca:	220f      	movs	r2, #15
 80021cc:	4013      	ands	r3, r2
 80021ce:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021d4:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	220f      	movs	r2, #15
 80021da:	4013      	ands	r3, r2
 80021dc:	4a16      	ldr	r2, [pc, #88]	@ (8002238 <HAL_RCC_GetSysClockFreq+0xa8>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	4013      	ands	r3, r2
 80021ea:	d009      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	4810      	ldr	r0, [pc, #64]	@ (8002230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021f0:	f7fd ff9c 	bl	800012c <__udivsi3>
 80021f4:	0003      	movs	r3, r0
 80021f6:	001a      	movs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4353      	muls	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e009      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	000a      	movs	r2, r1
 8002204:	0152      	lsls	r2, r2, #5
 8002206:	1a52      	subs	r2, r2, r1
 8002208:	0193      	lsls	r3, r2, #6
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	185b      	adds	r3, r3, r1
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
      break;
 8002218:	e002      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800221a:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <HAL_RCC_GetSysClockFreq+0xa0>)
 800221c:	613b      	str	r3, [r7, #16]
      break;
 800221e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002220:	693b      	ldr	r3, [r7, #16]
}
 8002222:	0018      	movs	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	b006      	add	sp, #24
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	40021000 	.word	0x40021000
 8002230:	007a1200 	.word	0x007a1200
 8002234:	0800368c 	.word	0x0800368c
 8002238:	0800369c 	.word	0x0800369c

0800223c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002240:	4b02      	ldr	r3, [pc, #8]	@ (800224c <HAL_RCC_GetHCLKFreq+0x10>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	20000004 	.word	0x20000004

08002250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002254:	f7ff fff2 	bl	800223c <HAL_RCC_GetHCLKFreq>
 8002258:	0001      	movs	r1, r0
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	2207      	movs	r2, #7
 8002262:	4013      	ands	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	40d9      	lsrs	r1, r3
 800226a:	000b      	movs	r3, r1
}    
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	40021000 	.word	0x40021000
 8002278:	08003684 	.word	0x08003684

0800227c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	025b      	lsls	r3, r3, #9
 8002294:	4013      	ands	r3, r2
 8002296:	d100      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002298:	e08e      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2017      	movs	r0, #23
 800229c:	183b      	adds	r3, r7, r0
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b57      	ldr	r3, [pc, #348]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	055b      	lsls	r3, r3, #21
 80022aa:	4013      	ands	r3, r2
 80022ac:	d110      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b54      	ldr	r3, [pc, #336]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	4b53      	ldr	r3, [pc, #332]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b4:	2180      	movs	r1, #128	@ 0x80
 80022b6:	0549      	lsls	r1, r1, #21
 80022b8:	430a      	orrs	r2, r1
 80022ba:	61da      	str	r2, [r3, #28]
 80022bc:	4b50      	ldr	r3, [pc, #320]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	183b      	adds	r3, r7, r0
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	@ 0x80
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	d11a      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022dc:	4b49      	ldr	r3, [pc, #292]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b48      	ldr	r3, [pc, #288]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022e2:	2180      	movs	r1, #128	@ 0x80
 80022e4:	0049      	lsls	r1, r1, #1
 80022e6:	430a      	orrs	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fc5d 	bl	8000ba8 <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	e008      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7fe fc58 	bl	8000ba8 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	@ 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e077      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b3f      	ldr	r3, [pc, #252]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	2380      	movs	r3, #128	@ 0x80
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4013      	ands	r3, r2
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002312:	4b3b      	ldr	r3, [pc, #236]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	23c0      	movs	r3, #192	@ 0xc0
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d034      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	23c0      	movs	r3, #192	@ 0xc0
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4013      	ands	r3, r2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d02c      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002334:	4b32      	ldr	r3, [pc, #200]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a33      	ldr	r2, [pc, #204]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233e:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	4b2f      	ldr	r3, [pc, #188]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002344:	2180      	movs	r1, #128	@ 0x80
 8002346:	0249      	lsls	r1, r1, #9
 8002348:	430a      	orrs	r2, r1
 800234a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800234c:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	4b2b      	ldr	r3, [pc, #172]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002352:	492e      	ldr	r1, [pc, #184]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002354:	400a      	ands	r2, r1
 8002356:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002358:	4b29      	ldr	r3, [pc, #164]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe fc1f 	bl	8000ba8 <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	e009      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe fc1a 	bl	8000ba8 <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a25      	ldr	r2, [pc, #148]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e038      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b1e      	ldr	r3, [pc, #120]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	2202      	movs	r2, #2
 800238a:	4013      	ands	r3, r2
 800238c:	d0f0      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238e:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002394:	4013      	ands	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023a2:	2317      	movs	r3, #23
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023b2:	4918      	ldr	r1, [pc, #96]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2201      	movs	r2, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	2203      	movs	r2, #3
 80023c8:	4393      	bics	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2220      	movs	r2, #32
 80023dc:	4013      	ands	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023e0:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	2210      	movs	r2, #16
 80023e6:	4393      	bics	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b006      	add	sp, #24
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
 8002408:	fffffcff 	.word	0xfffffcff
 800240c:	fffeffff 	.word	0xfffeffff
 8002410:	00001388 	.word	0x00001388
 8002414:	efffffff 	.word	0xefffffff

08002418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e044      	b.n	80024b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2278      	movs	r2, #120	@ 0x78
 8002436:	2100      	movs	r1, #0
 8002438:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f7fe fa8d 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2224      	movs	r2, #36	@ 0x24
 8002446:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	438a      	bics	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f9f4 	bl	8002850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f8c8 	bl	8002600 <UART_SetConfig>
 8002470:	0003      	movs	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e01c      	b.n	80024b4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	490d      	ldr	r1, [pc, #52]	@ (80024bc <HAL_UART_Init+0xa4>)
 8002486:	400a      	ands	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	212a      	movs	r1, #42	@ 0x2a
 8002496:	438a      	bics	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 fa83 	bl	80029b8 <UART_CheckIdleState>
 80024b2:	0003      	movs	r3, r0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	ffffb7ff 	.word	0xffffb7ff

080024c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d000      	beq.n	80024da <HAL_UART_Transmit+0x1a>
 80024d8:	e08c      	b.n	80025f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_UART_Transmit+0x28>
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e084      	b.n	80025f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d109      	bne.n	800250c <HAL_UART_Transmit+0x4c>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2201      	movs	r2, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d001      	beq.n	800250c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e074      	b.n	80025f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2284      	movs	r2, #132	@ 0x84
 8002510:	2100      	movs	r1, #0
 8002512:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2221      	movs	r2, #33	@ 0x21
 8002518:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800251a:	f7fe fb45 	bl	8000ba8 <HAL_GetTick>
 800251e:	0003      	movs	r3, r0
 8002520:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1dba      	adds	r2, r7, #6
 8002526:	2150      	movs	r1, #80	@ 0x50
 8002528:	8812      	ldrh	r2, [r2, #0]
 800252a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1dba      	adds	r2, r7, #6
 8002530:	2152      	movs	r1, #82	@ 0x52
 8002532:	8812      	ldrh	r2, [r2, #0]
 8002534:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	015b      	lsls	r3, r3, #5
 800253e:	429a      	cmp	r2, r3
 8002540:	d108      	bne.n	8002554 <HAL_UART_Transmit+0x94>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	e003      	b.n	800255c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800255c:	e02f      	b.n	80025be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	0013      	movs	r3, r2
 8002568:	2200      	movs	r2, #0
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	f000 facc 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002570:	1e03      	subs	r3, r0, #0
 8002572:	d004      	beq.n	800257e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e03b      	b.n	80025f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10b      	bne.n	800259c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	05d2      	lsls	r2, r2, #23
 800258e:	0dd2      	lsrs	r2, r2, #23
 8002590:	b292      	uxth	r2, r2
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	3302      	adds	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e007      	b.n	80025ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2252      	movs	r2, #82	@ 0x52
 80025b0:	5a9b      	ldrh	r3, [r3, r2]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b299      	uxth	r1, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2252      	movs	r2, #82	@ 0x52
 80025bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2252      	movs	r2, #82	@ 0x52
 80025c2:	5a9b      	ldrh	r3, [r3, r2]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1c9      	bne.n	800255e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	0013      	movs	r3, r2
 80025d4:	2200      	movs	r2, #0
 80025d6:	2140      	movs	r1, #64	@ 0x40
 80025d8:	f000 fa96 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d004      	beq.n	80025ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e005      	b.n	80025f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b008      	add	sp, #32
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002608:	231e      	movs	r3, #30
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a83      	ldr	r2, [pc, #524]	@ (800283c <UART_SetConfig+0x23c>)
 8002630:	4013      	ands	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a7e      	ldr	r2, [pc, #504]	@ (8002840 <UART_SetConfig+0x240>)
 8002646:	4013      	ands	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a75      	ldr	r2, [pc, #468]	@ (8002844 <UART_SetConfig+0x244>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800267c:	4b72      	ldr	r3, [pc, #456]	@ (8002848 <UART_SetConfig+0x248>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	2203      	movs	r2, #3
 8002682:	4013      	ands	r3, r2
 8002684:	2b03      	cmp	r3, #3
 8002686:	d00d      	beq.n	80026a4 <UART_SetConfig+0xa4>
 8002688:	d81b      	bhi.n	80026c2 <UART_SetConfig+0xc2>
 800268a:	2b02      	cmp	r3, #2
 800268c:	d014      	beq.n	80026b8 <UART_SetConfig+0xb8>
 800268e:	d818      	bhi.n	80026c2 <UART_SetConfig+0xc2>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <UART_SetConfig+0x9a>
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00a      	beq.n	80026ae <UART_SetConfig+0xae>
 8002698:	e013      	b.n	80026c2 <UART_SetConfig+0xc2>
 800269a:	231f      	movs	r3, #31
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e012      	b.n	80026ca <UART_SetConfig+0xca>
 80026a4:	231f      	movs	r3, #31
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2202      	movs	r2, #2
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e00d      	b.n	80026ca <UART_SetConfig+0xca>
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2204      	movs	r2, #4
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e008      	b.n	80026ca <UART_SetConfig+0xca>
 80026b8:	231f      	movs	r3, #31
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2208      	movs	r2, #8
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e003      	b.n	80026ca <UART_SetConfig+0xca>
 80026c2:	231f      	movs	r3, #31
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2210      	movs	r2, #16
 80026c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d15c      	bne.n	8002790 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 80026d6:	231f      	movs	r3, #31
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d015      	beq.n	800270c <UART_SetConfig+0x10c>
 80026e0:	dc18      	bgt.n	8002714 <UART_SetConfig+0x114>
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00d      	beq.n	8002702 <UART_SetConfig+0x102>
 80026e6:	dc15      	bgt.n	8002714 <UART_SetConfig+0x114>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <UART_SetConfig+0xf2>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d005      	beq.n	80026fc <UART_SetConfig+0xfc>
 80026f0:	e010      	b.n	8002714 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026f2:	f7ff fdad 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 80026f6:	0003      	movs	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
        break;
 80026fa:	e012      	b.n	8002722 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026fc:	4b53      	ldr	r3, [pc, #332]	@ (800284c <UART_SetConfig+0x24c>)
 80026fe:	61bb      	str	r3, [r7, #24]
        break;
 8002700:	e00f      	b.n	8002722 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002702:	f7ff fd45 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002706:	0003      	movs	r3, r0
 8002708:	61bb      	str	r3, [r7, #24]
        break;
 800270a:	e00a      	b.n	8002722 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	61bb      	str	r3, [r7, #24]
        break;
 8002712:	e006      	b.n	8002722 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002718:	231e      	movs	r3, #30
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
        break;
 8002720:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d100      	bne.n	800272a <UART_SetConfig+0x12a>
 8002728:	e07a      	b.n	8002820 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	005a      	lsls	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	18d2      	adds	r2, r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0019      	movs	r1, r3
 800273c:	0010      	movs	r0, r2
 800273e:	f7fd fcf5 	bl	800012c <__udivsi3>
 8002742:	0003      	movs	r3, r0
 8002744:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b0f      	cmp	r3, #15
 800274a:	d91c      	bls.n	8002786 <UART_SetConfig+0x186>
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	025b      	lsls	r3, r3, #9
 8002752:	429a      	cmp	r2, r3
 8002754:	d217      	bcs.n	8002786 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	b29a      	uxth	r2, r3
 800275a:	200e      	movs	r0, #14
 800275c:	183b      	adds	r3, r7, r0
 800275e:	210f      	movs	r1, #15
 8002760:	438a      	bics	r2, r1
 8002762:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	b29b      	uxth	r3, r3
 800276a:	2207      	movs	r2, #7
 800276c:	4013      	ands	r3, r2
 800276e:	b299      	uxth	r1, r3
 8002770:	183b      	adds	r3, r7, r0
 8002772:	183a      	adds	r2, r7, r0
 8002774:	8812      	ldrh	r2, [r2, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	183a      	adds	r2, r7, r0
 8002780:	8812      	ldrh	r2, [r2, #0]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	e04c      	b.n	8002820 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002786:	231e      	movs	r3, #30
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e047      	b.n	8002820 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002790:	231f      	movs	r3, #31
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d015      	beq.n	80027c6 <UART_SetConfig+0x1c6>
 800279a:	dc18      	bgt.n	80027ce <UART_SetConfig+0x1ce>
 800279c:	2b04      	cmp	r3, #4
 800279e:	d00d      	beq.n	80027bc <UART_SetConfig+0x1bc>
 80027a0:	dc15      	bgt.n	80027ce <UART_SetConfig+0x1ce>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <UART_SetConfig+0x1ac>
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d005      	beq.n	80027b6 <UART_SetConfig+0x1b6>
 80027aa:	e010      	b.n	80027ce <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ac:	f7ff fd50 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 80027b0:	0003      	movs	r3, r0
 80027b2:	61bb      	str	r3, [r7, #24]
        break;
 80027b4:	e012      	b.n	80027dc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027b6:	4b25      	ldr	r3, [pc, #148]	@ (800284c <UART_SetConfig+0x24c>)
 80027b8:	61bb      	str	r3, [r7, #24]
        break;
 80027ba:	e00f      	b.n	80027dc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027bc:	f7ff fce8 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 80027c0:	0003      	movs	r3, r0
 80027c2:	61bb      	str	r3, [r7, #24]
        break;
 80027c4:	e00a      	b.n	80027dc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	61bb      	str	r3, [r7, #24]
        break;
 80027cc:	e006      	b.n	80027dc <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027d2:	231e      	movs	r3, #30
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
        break;
 80027da:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01e      	beq.n	8002820 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	085a      	lsrs	r2, r3, #1
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	18d2      	adds	r2, r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0019      	movs	r1, r3
 80027f2:	0010      	movs	r0, r2
 80027f4:	f7fd fc9a 	bl	800012c <__udivsi3>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	d90a      	bls.n	8002818 <UART_SetConfig+0x218>
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	025b      	lsls	r3, r3, #9
 8002808:	429a      	cmp	r2, r3
 800280a:	d205      	bcs.n	8002818 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	e003      	b.n	8002820 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002818:	231e      	movs	r3, #30
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800282c:	231e      	movs	r3, #30
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b008      	add	sp, #32
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	ffff69f3 	.word	0xffff69f3
 8002840:	ffffcfff 	.word	0xffffcfff
 8002844:	fffff4ff 	.word	0xfffff4ff
 8002848:	40021000 	.word	0x40021000
 800284c:	007a1200 	.word	0x007a1200

08002850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	2208      	movs	r2, #8
 800285e:	4013      	ands	r3, r2
 8002860:	d00b      	beq.n	800287a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a4a      	ldr	r2, [pc, #296]	@ (8002994 <UART_AdvFeatureConfig+0x144>)
 800286a:	4013      	ands	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	2201      	movs	r2, #1
 8002880:	4013      	ands	r3, r2
 8002882:	d00b      	beq.n	800289c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a43      	ldr	r2, [pc, #268]	@ (8002998 <UART_AdvFeatureConfig+0x148>)
 800288c:	4013      	ands	r3, r2
 800288e:	0019      	movs	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d00b      	beq.n	80028be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a3b      	ldr	r2, [pc, #236]	@ (800299c <UART_AdvFeatureConfig+0x14c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	2204      	movs	r2, #4
 80028c4:	4013      	ands	r3, r2
 80028c6:	d00b      	beq.n	80028e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a34      	ldr	r2, [pc, #208]	@ (80029a0 <UART_AdvFeatureConfig+0x150>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	2210      	movs	r2, #16
 80028e6:	4013      	ands	r3, r2
 80028e8:	d00b      	beq.n	8002902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a2c      	ldr	r2, [pc, #176]	@ (80029a4 <UART_AdvFeatureConfig+0x154>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	2220      	movs	r2, #32
 8002908:	4013      	ands	r3, r2
 800290a:	d00b      	beq.n	8002924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4a25      	ldr	r2, [pc, #148]	@ (80029a8 <UART_AdvFeatureConfig+0x158>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	2240      	movs	r2, #64	@ 0x40
 800292a:	4013      	ands	r3, r2
 800292c:	d01d      	beq.n	800296a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <UART_AdvFeatureConfig+0x15c>)
 8002936:	4013      	ands	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	035b      	lsls	r3, r3, #13
 800294e:	429a      	cmp	r2, r3
 8002950:	d10b      	bne.n	800296a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <UART_AdvFeatureConfig+0x160>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	2280      	movs	r2, #128	@ 0x80
 8002970:	4013      	ands	r3, r2
 8002972:	d00b      	beq.n	800298c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <UART_AdvFeatureConfig+0x164>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
  }
}
 800298c:	46c0      	nop			@ (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}
 8002994:	ffff7fff 	.word	0xffff7fff
 8002998:	fffdffff 	.word	0xfffdffff
 800299c:	fffeffff 	.word	0xfffeffff
 80029a0:	fffbffff 	.word	0xfffbffff
 80029a4:	ffffefff 	.word	0xffffefff
 80029a8:	ffffdfff 	.word	0xffffdfff
 80029ac:	ffefffff 	.word	0xffefffff
 80029b0:	ff9fffff 	.word	0xff9fffff
 80029b4:	fff7ffff 	.word	0xfff7ffff

080029b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b092      	sub	sp, #72	@ 0x48
 80029bc:	af02      	add	r7, sp, #8
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2284      	movs	r2, #132	@ 0x84
 80029c4:	2100      	movs	r1, #0
 80029c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029c8:	f7fe f8ee 	bl	8000ba8 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2208      	movs	r2, #8
 80029d8:	4013      	ands	r3, r2
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d12c      	bne.n	8002a38 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e0:	2280      	movs	r2, #128	@ 0x80
 80029e2:	0391      	lsls	r1, r2, #14
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4a46      	ldr	r2, [pc, #280]	@ (8002b00 <UART_CheckIdleState+0x148>)
 80029e8:	9200      	str	r2, [sp, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f000 f88c 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 80029f0:	1e03      	subs	r3, r0, #0
 80029f2:	d021      	beq.n	8002a38 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f4:	f3ef 8310 	mrs	r3, PRIMASK
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029fe:	2301      	movs	r3, #1
 8002a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	f383 8810 	msr	PRIMASK, r3
}
 8002a08:	46c0      	nop			@ (mov r8, r8)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2180      	movs	r1, #128	@ 0x80
 8002a16:	438a      	bics	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a20:	f383 8810 	msr	PRIMASK, r3
}
 8002a24:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2278      	movs	r2, #120	@ 0x78
 8002a30:	2100      	movs	r1, #0
 8002a32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e05f      	b.n	8002af8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d146      	bne.n	8002ad4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a48:	2280      	movs	r2, #128	@ 0x80
 8002a4a:	03d1      	lsls	r1, r2, #15
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b00 <UART_CheckIdleState+0x148>)
 8002a50:	9200      	str	r2, [sp, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f000 f858 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002a58:	1e03      	subs	r3, r0, #0
 8002a5a:	d03b      	beq.n	8002ad4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a62:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a66:	2301      	movs	r3, #1
 8002a68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f383 8810 	msr	PRIMASK, r3
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4921      	ldr	r1, [pc, #132]	@ (8002b04 <UART_CheckIdleState+0x14c>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f383 8810 	msr	PRIMASK, r3
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a92:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a94:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a96:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f383 8810 	msr	PRIMASK, r3
}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2280      	movs	r2, #128	@ 0x80
 8002ac4:	2120      	movs	r1, #32
 8002ac6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2278      	movs	r2, #120	@ 0x78
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e011      	b.n	8002af8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2280      	movs	r2, #128	@ 0x80
 8002ade:	2120      	movs	r1, #32
 8002ae0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2278      	movs	r2, #120	@ 0x78
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b010      	add	sp, #64	@ 0x40
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	01ffffff 	.word	0x01ffffff
 8002b04:	fffffedf 	.word	0xfffffedf

08002b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b18:	e051      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	d04e      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b20:	f7fe f842 	bl	8000ba8 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d302      	bcc.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e051      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2204      	movs	r2, #4
 8002b42:	4013      	ands	r3, r2
 8002b44:	d03b      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b80      	cmp	r3, #128	@ 0x80
 8002b4a:	d038      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b40      	cmp	r3, #64	@ 0x40
 8002b50:	d035      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d111      	bne.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2208      	movs	r2, #8
 8002b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f83c 	bl	8002be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2284      	movs	r2, #132	@ 0x84
 8002b74:	2108      	movs	r1, #8
 8002b76:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2278      	movs	r2, #120	@ 0x78
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e02c      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	401a      	ands	r2, r3
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d112      	bne.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2280      	movs	r2, #128	@ 0x80
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f81f 	bl	8002be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2284      	movs	r2, #132	@ 0x84
 8002bae:	2120      	movs	r1, #32
 8002bb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2278      	movs	r2, #120	@ 0x78
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e00f      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	425a      	negs	r2, r3
 8002bce:	4153      	adcs	r3, r2
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d09e      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	@ 0x38
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8002bf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4926      	ldr	r1, [pc, #152]	@ (8002cac <UART_EndRxTransfer+0xc4>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f383 8810 	msr	PRIMASK, r3
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c22:	f3ef 8310 	mrs	r3, PRIMASK
 8002c26:	623b      	str	r3, [r7, #32]
  return(result);
 8002c28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	f383 8810 	msr	PRIMASK, r3
}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4e:	f383 8810 	msr	PRIMASK, r3
}
 8002c52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d118      	bne.n	8002c8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c66:	2301      	movs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f383 8810 	msr	PRIMASK, r3
}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2110      	movs	r1, #16
 8002c7e:	438a      	bics	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f383 8810 	msr	PRIMASK, r3
}
 8002c8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2280      	movs	r2, #128	@ 0x80
 8002c92:	2120      	movs	r1, #32
 8002c94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b00e      	add	sp, #56	@ 0x38
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	fffffedf 	.word	0xfffffedf

08002cb0 <sniprintf>:
 8002cb0:	b40c      	push	{r2, r3}
 8002cb2:	b530      	push	{r4, r5, lr}
 8002cb4:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <sniprintf+0x64>)
 8002cb6:	000c      	movs	r4, r1
 8002cb8:	681d      	ldr	r5, [r3, #0]
 8002cba:	b09d      	sub	sp, #116	@ 0x74
 8002cbc:	2900      	cmp	r1, #0
 8002cbe:	da08      	bge.n	8002cd2 <sniprintf+0x22>
 8002cc0:	238b      	movs	r3, #139	@ 0x8b
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	602b      	str	r3, [r5, #0]
 8002cc6:	4240      	negs	r0, r0
 8002cc8:	b01d      	add	sp, #116	@ 0x74
 8002cca:	bc30      	pop	{r4, r5}
 8002ccc:	bc08      	pop	{r3}
 8002cce:	b002      	add	sp, #8
 8002cd0:	4718      	bx	r3
 8002cd2:	2382      	movs	r3, #130	@ 0x82
 8002cd4:	466a      	mov	r2, sp
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	8293      	strh	r3, [r2, #20]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9002      	str	r0, [sp, #8]
 8002cde:	9006      	str	r0, [sp, #24]
 8002ce0:	4299      	cmp	r1, r3
 8002ce2:	d000      	beq.n	8002ce6 <sniprintf+0x36>
 8002ce4:	1e4b      	subs	r3, r1, #1
 8002ce6:	9304      	str	r3, [sp, #16]
 8002ce8:	9307      	str	r3, [sp, #28]
 8002cea:	2301      	movs	r3, #1
 8002cec:	466a      	mov	r2, sp
 8002cee:	425b      	negs	r3, r3
 8002cf0:	82d3      	strh	r3, [r2, #22]
 8002cf2:	0028      	movs	r0, r5
 8002cf4:	ab21      	add	r3, sp, #132	@ 0x84
 8002cf6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002cf8:	a902      	add	r1, sp, #8
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	f000 f9a6 	bl	800304c <_svfiprintf_r>
 8002d00:	1c43      	adds	r3, r0, #1
 8002d02:	da01      	bge.n	8002d08 <sniprintf+0x58>
 8002d04:	238b      	movs	r3, #139	@ 0x8b
 8002d06:	602b      	str	r3, [r5, #0]
 8002d08:	2c00      	cmp	r4, #0
 8002d0a:	d0dd      	beq.n	8002cc8 <sniprintf+0x18>
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	9b02      	ldr	r3, [sp, #8]
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e7d9      	b.n	8002cc8 <sniprintf+0x18>
 8002d14:	20000010 	.word	0x20000010

08002d18 <memset>:
 8002d18:	0003      	movs	r3, r0
 8002d1a:	1882      	adds	r2, r0, r2
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	7019      	strb	r1, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <__errno>:
 8002d28:	4b01      	ldr	r3, [pc, #4]	@ (8002d30 <__errno+0x8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4770      	bx	lr
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	20000010 	.word	0x20000010

08002d34 <__libc_init_array>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	2600      	movs	r6, #0
 8002d38:	4c0c      	ldr	r4, [pc, #48]	@ (8002d6c <__libc_init_array+0x38>)
 8002d3a:	4d0d      	ldr	r5, [pc, #52]	@ (8002d70 <__libc_init_array+0x3c>)
 8002d3c:	1b64      	subs	r4, r4, r5
 8002d3e:	10a4      	asrs	r4, r4, #2
 8002d40:	42a6      	cmp	r6, r4
 8002d42:	d109      	bne.n	8002d58 <__libc_init_array+0x24>
 8002d44:	2600      	movs	r6, #0
 8002d46:	f000 fc65 	bl	8003614 <_init>
 8002d4a:	4c0a      	ldr	r4, [pc, #40]	@ (8002d74 <__libc_init_array+0x40>)
 8002d4c:	4d0a      	ldr	r5, [pc, #40]	@ (8002d78 <__libc_init_array+0x44>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	42a6      	cmp	r6, r4
 8002d54:	d105      	bne.n	8002d62 <__libc_init_array+0x2e>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	00b3      	lsls	r3, r6, #2
 8002d5a:	58eb      	ldr	r3, [r5, r3]
 8002d5c:	4798      	blx	r3
 8002d5e:	3601      	adds	r6, #1
 8002d60:	e7ee      	b.n	8002d40 <__libc_init_array+0xc>
 8002d62:	00b3      	lsls	r3, r6, #2
 8002d64:	58eb      	ldr	r3, [r5, r3]
 8002d66:	4798      	blx	r3
 8002d68:	3601      	adds	r6, #1
 8002d6a:	e7f2      	b.n	8002d52 <__libc_init_array+0x1e>
 8002d6c:	080036e0 	.word	0x080036e0
 8002d70:	080036e0 	.word	0x080036e0
 8002d74:	080036e4 	.word	0x080036e4
 8002d78:	080036e0 	.word	0x080036e0

08002d7c <__retarget_lock_acquire_recursive>:
 8002d7c:	4770      	bx	lr

08002d7e <__retarget_lock_release_recursive>:
 8002d7e:	4770      	bx	lr

08002d80 <memcpy>:
 8002d80:	2300      	movs	r3, #0
 8002d82:	b510      	push	{r4, lr}
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d100      	bne.n	8002d8a <memcpy+0xa>
 8002d88:	bd10      	pop	{r4, pc}
 8002d8a:	5ccc      	ldrb	r4, [r1, r3]
 8002d8c:	54c4      	strb	r4, [r0, r3]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	e7f8      	b.n	8002d84 <memcpy+0x4>
	...

08002d94 <_free_r>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	0005      	movs	r5, r0
 8002d98:	1e0c      	subs	r4, r1, #0
 8002d9a:	d010      	beq.n	8002dbe <_free_r+0x2a>
 8002d9c:	3c04      	subs	r4, #4
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	da00      	bge.n	8002da6 <_free_r+0x12>
 8002da4:	18e4      	adds	r4, r4, r3
 8002da6:	0028      	movs	r0, r5
 8002da8:	f000 f8e0 	bl	8002f6c <__malloc_lock>
 8002dac:	4a1d      	ldr	r2, [pc, #116]	@ (8002e24 <_free_r+0x90>)
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <_free_r+0x2c>
 8002db4:	6063      	str	r3, [r4, #4]
 8002db6:	6014      	str	r4, [r2, #0]
 8002db8:	0028      	movs	r0, r5
 8002dba:	f000 f8df 	bl	8002f7c <__malloc_unlock>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	d908      	bls.n	8002dd6 <_free_r+0x42>
 8002dc4:	6820      	ldr	r0, [r4, #0]
 8002dc6:	1821      	adds	r1, r4, r0
 8002dc8:	428b      	cmp	r3, r1
 8002dca:	d1f3      	bne.n	8002db4 <_free_r+0x20>
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	1809      	adds	r1, r1, r0
 8002dd2:	6021      	str	r1, [r4, #0]
 8002dd4:	e7ee      	b.n	8002db4 <_free_r+0x20>
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <_free_r+0x4e>
 8002dde:	42a3      	cmp	r3, r4
 8002de0:	d9f9      	bls.n	8002dd6 <_free_r+0x42>
 8002de2:	6811      	ldr	r1, [r2, #0]
 8002de4:	1850      	adds	r0, r2, r1
 8002de6:	42a0      	cmp	r0, r4
 8002de8:	d10b      	bne.n	8002e02 <_free_r+0x6e>
 8002dea:	6820      	ldr	r0, [r4, #0]
 8002dec:	1809      	adds	r1, r1, r0
 8002dee:	1850      	adds	r0, r2, r1
 8002df0:	6011      	str	r1, [r2, #0]
 8002df2:	4283      	cmp	r3, r0
 8002df4:	d1e0      	bne.n	8002db8 <_free_r+0x24>
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	1841      	adds	r1, r0, r1
 8002dfc:	6011      	str	r1, [r2, #0]
 8002dfe:	6053      	str	r3, [r2, #4]
 8002e00:	e7da      	b.n	8002db8 <_free_r+0x24>
 8002e02:	42a0      	cmp	r0, r4
 8002e04:	d902      	bls.n	8002e0c <_free_r+0x78>
 8002e06:	230c      	movs	r3, #12
 8002e08:	602b      	str	r3, [r5, #0]
 8002e0a:	e7d5      	b.n	8002db8 <_free_r+0x24>
 8002e0c:	6820      	ldr	r0, [r4, #0]
 8002e0e:	1821      	adds	r1, r4, r0
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d103      	bne.n	8002e1c <_free_r+0x88>
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	1809      	adds	r1, r1, r0
 8002e1a:	6021      	str	r1, [r4, #0]
 8002e1c:	6063      	str	r3, [r4, #4]
 8002e1e:	6054      	str	r4, [r2, #4]
 8002e20:	e7ca      	b.n	8002db8 <_free_r+0x24>
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	200002e4 	.word	0x200002e4

08002e28 <sbrk_aligned>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8002e68 <sbrk_aligned+0x40>)
 8002e2c:	000d      	movs	r5, r1
 8002e2e:	6831      	ldr	r1, [r6, #0]
 8002e30:	0004      	movs	r4, r0
 8002e32:	2900      	cmp	r1, #0
 8002e34:	d102      	bne.n	8002e3c <sbrk_aligned+0x14>
 8002e36:	f000 fb99 	bl	800356c <_sbrk_r>
 8002e3a:	6030      	str	r0, [r6, #0]
 8002e3c:	0029      	movs	r1, r5
 8002e3e:	0020      	movs	r0, r4
 8002e40:	f000 fb94 	bl	800356c <_sbrk_r>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d103      	bne.n	8002e50 <sbrk_aligned+0x28>
 8002e48:	2501      	movs	r5, #1
 8002e4a:	426d      	negs	r5, r5
 8002e4c:	0028      	movs	r0, r5
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
 8002e50:	2303      	movs	r3, #3
 8002e52:	1cc5      	adds	r5, r0, #3
 8002e54:	439d      	bics	r5, r3
 8002e56:	42a8      	cmp	r0, r5
 8002e58:	d0f8      	beq.n	8002e4c <sbrk_aligned+0x24>
 8002e5a:	1a29      	subs	r1, r5, r0
 8002e5c:	0020      	movs	r0, r4
 8002e5e:	f000 fb85 	bl	800356c <_sbrk_r>
 8002e62:	3001      	adds	r0, #1
 8002e64:	d1f2      	bne.n	8002e4c <sbrk_aligned+0x24>
 8002e66:	e7ef      	b.n	8002e48 <sbrk_aligned+0x20>
 8002e68:	200002e0 	.word	0x200002e0

08002e6c <_malloc_r>:
 8002e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e6e:	2203      	movs	r2, #3
 8002e70:	1ccb      	adds	r3, r1, #3
 8002e72:	4393      	bics	r3, r2
 8002e74:	3308      	adds	r3, #8
 8002e76:	0005      	movs	r5, r0
 8002e78:	001f      	movs	r7, r3
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d234      	bcs.n	8002ee8 <_malloc_r+0x7c>
 8002e7e:	270c      	movs	r7, #12
 8002e80:	42b9      	cmp	r1, r7
 8002e82:	d833      	bhi.n	8002eec <_malloc_r+0x80>
 8002e84:	0028      	movs	r0, r5
 8002e86:	f000 f871 	bl	8002f6c <__malloc_lock>
 8002e8a:	4e37      	ldr	r6, [pc, #220]	@ (8002f68 <_malloc_r+0xfc>)
 8002e8c:	6833      	ldr	r3, [r6, #0]
 8002e8e:	001c      	movs	r4, r3
 8002e90:	2c00      	cmp	r4, #0
 8002e92:	d12f      	bne.n	8002ef4 <_malloc_r+0x88>
 8002e94:	0039      	movs	r1, r7
 8002e96:	0028      	movs	r0, r5
 8002e98:	f7ff ffc6 	bl	8002e28 <sbrk_aligned>
 8002e9c:	0004      	movs	r4, r0
 8002e9e:	1c43      	adds	r3, r0, #1
 8002ea0:	d15f      	bne.n	8002f62 <_malloc_r+0xf6>
 8002ea2:	6834      	ldr	r4, [r6, #0]
 8002ea4:	9400      	str	r4, [sp, #0]
 8002ea6:	9b00      	ldr	r3, [sp, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d14a      	bne.n	8002f42 <_malloc_r+0xd6>
 8002eac:	2c00      	cmp	r4, #0
 8002eae:	d052      	beq.n	8002f56 <_malloc_r+0xea>
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	18e3      	adds	r3, r4, r3
 8002eb6:	9900      	ldr	r1, [sp, #0]
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	f000 fb57 	bl	800356c <_sbrk_r>
 8002ebe:	9b01      	ldr	r3, [sp, #4]
 8002ec0:	4283      	cmp	r3, r0
 8002ec2:	d148      	bne.n	8002f56 <_malloc_r+0xea>
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	0028      	movs	r0, r5
 8002ec8:	1aff      	subs	r7, r7, r3
 8002eca:	0039      	movs	r1, r7
 8002ecc:	f7ff ffac 	bl	8002e28 <sbrk_aligned>
 8002ed0:	3001      	adds	r0, #1
 8002ed2:	d040      	beq.n	8002f56 <_malloc_r+0xea>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	19db      	adds	r3, r3, r7
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	6833      	ldr	r3, [r6, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	2a00      	cmp	r2, #0
 8002ee0:	d133      	bne.n	8002f4a <_malloc_r+0xde>
 8002ee2:	9b00      	ldr	r3, [sp, #0]
 8002ee4:	6033      	str	r3, [r6, #0]
 8002ee6:	e019      	b.n	8002f1c <_malloc_r+0xb0>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dac9      	bge.n	8002e80 <_malloc_r+0x14>
 8002eec:	230c      	movs	r3, #12
 8002eee:	602b      	str	r3, [r5, #0]
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ef4:	6821      	ldr	r1, [r4, #0]
 8002ef6:	1bc9      	subs	r1, r1, r7
 8002ef8:	d420      	bmi.n	8002f3c <_malloc_r+0xd0>
 8002efa:	290b      	cmp	r1, #11
 8002efc:	d90a      	bls.n	8002f14 <_malloc_r+0xa8>
 8002efe:	19e2      	adds	r2, r4, r7
 8002f00:	6027      	str	r7, [r4, #0]
 8002f02:	42a3      	cmp	r3, r4
 8002f04:	d104      	bne.n	8002f10 <_malloc_r+0xa4>
 8002f06:	6032      	str	r2, [r6, #0]
 8002f08:	6863      	ldr	r3, [r4, #4]
 8002f0a:	6011      	str	r1, [r2, #0]
 8002f0c:	6053      	str	r3, [r2, #4]
 8002f0e:	e005      	b.n	8002f1c <_malloc_r+0xb0>
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e7f9      	b.n	8002f08 <_malloc_r+0x9c>
 8002f14:	6862      	ldr	r2, [r4, #4]
 8002f16:	42a3      	cmp	r3, r4
 8002f18:	d10e      	bne.n	8002f38 <_malloc_r+0xcc>
 8002f1a:	6032      	str	r2, [r6, #0]
 8002f1c:	0028      	movs	r0, r5
 8002f1e:	f000 f82d 	bl	8002f7c <__malloc_unlock>
 8002f22:	0020      	movs	r0, r4
 8002f24:	2207      	movs	r2, #7
 8002f26:	300b      	adds	r0, #11
 8002f28:	1d23      	adds	r3, r4, #4
 8002f2a:	4390      	bics	r0, r2
 8002f2c:	1ac2      	subs	r2, r0, r3
 8002f2e:	4298      	cmp	r0, r3
 8002f30:	d0df      	beq.n	8002ef2 <_malloc_r+0x86>
 8002f32:	1a1b      	subs	r3, r3, r0
 8002f34:	50a3      	str	r3, [r4, r2]
 8002f36:	e7dc      	b.n	8002ef2 <_malloc_r+0x86>
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	e7ef      	b.n	8002f1c <_malloc_r+0xb0>
 8002f3c:	0023      	movs	r3, r4
 8002f3e:	6864      	ldr	r4, [r4, #4]
 8002f40:	e7a6      	b.n	8002e90 <_malloc_r+0x24>
 8002f42:	9c00      	ldr	r4, [sp, #0]
 8002f44:	6863      	ldr	r3, [r4, #4]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	e7ad      	b.n	8002ea6 <_malloc_r+0x3a>
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	42a3      	cmp	r3, r4
 8002f50:	d1fb      	bne.n	8002f4a <_malloc_r+0xde>
 8002f52:	2300      	movs	r3, #0
 8002f54:	e7da      	b.n	8002f0c <_malloc_r+0xa0>
 8002f56:	230c      	movs	r3, #12
 8002f58:	0028      	movs	r0, r5
 8002f5a:	602b      	str	r3, [r5, #0]
 8002f5c:	f000 f80e 	bl	8002f7c <__malloc_unlock>
 8002f60:	e7c6      	b.n	8002ef0 <_malloc_r+0x84>
 8002f62:	6007      	str	r7, [r0, #0]
 8002f64:	e7da      	b.n	8002f1c <_malloc_r+0xb0>
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	200002e4 	.word	0x200002e4

08002f6c <__malloc_lock>:
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	4802      	ldr	r0, [pc, #8]	@ (8002f78 <__malloc_lock+0xc>)
 8002f70:	f7ff ff04 	bl	8002d7c <__retarget_lock_acquire_recursive>
 8002f74:	bd10      	pop	{r4, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	200002dc 	.word	0x200002dc

08002f7c <__malloc_unlock>:
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	4802      	ldr	r0, [pc, #8]	@ (8002f88 <__malloc_unlock+0xc>)
 8002f80:	f7ff fefd 	bl	8002d7e <__retarget_lock_release_recursive>
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	200002dc 	.word	0x200002dc

08002f8c <__ssputs_r>:
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	688e      	ldr	r6, [r1, #8]
 8002f90:	b085      	sub	sp, #20
 8002f92:	001f      	movs	r7, r3
 8002f94:	000c      	movs	r4, r1
 8002f96:	680b      	ldr	r3, [r1, #0]
 8002f98:	9002      	str	r0, [sp, #8]
 8002f9a:	9203      	str	r2, [sp, #12]
 8002f9c:	42be      	cmp	r6, r7
 8002f9e:	d830      	bhi.n	8003002 <__ssputs_r+0x76>
 8002fa0:	210c      	movs	r1, #12
 8002fa2:	5e62      	ldrsh	r2, [r4, r1]
 8002fa4:	2190      	movs	r1, #144	@ 0x90
 8002fa6:	00c9      	lsls	r1, r1, #3
 8002fa8:	420a      	tst	r2, r1
 8002faa:	d028      	beq.n	8002ffe <__ssputs_r+0x72>
 8002fac:	2003      	movs	r0, #3
 8002fae:	6921      	ldr	r1, [r4, #16]
 8002fb0:	1a5b      	subs	r3, r3, r1
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	6963      	ldr	r3, [r4, #20]
 8002fb6:	4343      	muls	r3, r0
 8002fb8:	9801      	ldr	r0, [sp, #4]
 8002fba:	0fdd      	lsrs	r5, r3, #31
 8002fbc:	18ed      	adds	r5, r5, r3
 8002fbe:	1c7b      	adds	r3, r7, #1
 8002fc0:	181b      	adds	r3, r3, r0
 8002fc2:	106d      	asrs	r5, r5, #1
 8002fc4:	42ab      	cmp	r3, r5
 8002fc6:	d900      	bls.n	8002fca <__ssputs_r+0x3e>
 8002fc8:	001d      	movs	r5, r3
 8002fca:	0552      	lsls	r2, r2, #21
 8002fcc:	d528      	bpl.n	8003020 <__ssputs_r+0x94>
 8002fce:	0029      	movs	r1, r5
 8002fd0:	9802      	ldr	r0, [sp, #8]
 8002fd2:	f7ff ff4b 	bl	8002e6c <_malloc_r>
 8002fd6:	1e06      	subs	r6, r0, #0
 8002fd8:	d02c      	beq.n	8003034 <__ssputs_r+0xa8>
 8002fda:	9a01      	ldr	r2, [sp, #4]
 8002fdc:	6921      	ldr	r1, [r4, #16]
 8002fde:	f7ff fecf 	bl	8002d80 <memcpy>
 8002fe2:	89a2      	ldrh	r2, [r4, #12]
 8002fe4:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <__ssputs_r+0xbc>)
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	2380      	movs	r3, #128	@ 0x80
 8002fea:	4313      	orrs	r3, r2
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	9b01      	ldr	r3, [sp, #4]
 8002ff0:	6126      	str	r6, [r4, #16]
 8002ff2:	18f6      	adds	r6, r6, r3
 8002ff4:	6026      	str	r6, [r4, #0]
 8002ff6:	003e      	movs	r6, r7
 8002ff8:	6165      	str	r5, [r4, #20]
 8002ffa:	1aed      	subs	r5, r5, r3
 8002ffc:	60a5      	str	r5, [r4, #8]
 8002ffe:	42be      	cmp	r6, r7
 8003000:	d900      	bls.n	8003004 <__ssputs_r+0x78>
 8003002:	003e      	movs	r6, r7
 8003004:	0032      	movs	r2, r6
 8003006:	9903      	ldr	r1, [sp, #12]
 8003008:	6820      	ldr	r0, [r4, #0]
 800300a:	f000 fa9b 	bl	8003544 <memmove>
 800300e:	2000      	movs	r0, #0
 8003010:	68a3      	ldr	r3, [r4, #8]
 8003012:	1b9b      	subs	r3, r3, r6
 8003014:	60a3      	str	r3, [r4, #8]
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	199b      	adds	r3, r3, r6
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	b005      	add	sp, #20
 800301e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003020:	002a      	movs	r2, r5
 8003022:	9802      	ldr	r0, [sp, #8]
 8003024:	f000 fabf 	bl	80035a6 <_realloc_r>
 8003028:	1e06      	subs	r6, r0, #0
 800302a:	d1e0      	bne.n	8002fee <__ssputs_r+0x62>
 800302c:	6921      	ldr	r1, [r4, #16]
 800302e:	9802      	ldr	r0, [sp, #8]
 8003030:	f7ff feb0 	bl	8002d94 <_free_r>
 8003034:	230c      	movs	r3, #12
 8003036:	2001      	movs	r0, #1
 8003038:	9a02      	ldr	r2, [sp, #8]
 800303a:	4240      	negs	r0, r0
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	89a2      	ldrh	r2, [r4, #12]
 8003040:	3334      	adds	r3, #52	@ 0x34
 8003042:	4313      	orrs	r3, r2
 8003044:	81a3      	strh	r3, [r4, #12]
 8003046:	e7e9      	b.n	800301c <__ssputs_r+0x90>
 8003048:	fffffb7f 	.word	0xfffffb7f

0800304c <_svfiprintf_r>:
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304e:	b0a1      	sub	sp, #132	@ 0x84
 8003050:	9003      	str	r0, [sp, #12]
 8003052:	001d      	movs	r5, r3
 8003054:	898b      	ldrh	r3, [r1, #12]
 8003056:	000f      	movs	r7, r1
 8003058:	0016      	movs	r6, r2
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	d511      	bpl.n	8003082 <_svfiprintf_r+0x36>
 800305e:	690b      	ldr	r3, [r1, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10e      	bne.n	8003082 <_svfiprintf_r+0x36>
 8003064:	2140      	movs	r1, #64	@ 0x40
 8003066:	f7ff ff01 	bl	8002e6c <_malloc_r>
 800306a:	6038      	str	r0, [r7, #0]
 800306c:	6138      	str	r0, [r7, #16]
 800306e:	2800      	cmp	r0, #0
 8003070:	d105      	bne.n	800307e <_svfiprintf_r+0x32>
 8003072:	230c      	movs	r3, #12
 8003074:	9a03      	ldr	r2, [sp, #12]
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	2001      	movs	r0, #1
 800307a:	4240      	negs	r0, r0
 800307c:	e0cf      	b.n	800321e <_svfiprintf_r+0x1d2>
 800307e:	2340      	movs	r3, #64	@ 0x40
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	2300      	movs	r3, #0
 8003084:	ac08      	add	r4, sp, #32
 8003086:	6163      	str	r3, [r4, #20]
 8003088:	3320      	adds	r3, #32
 800308a:	7663      	strb	r3, [r4, #25]
 800308c:	3310      	adds	r3, #16
 800308e:	76a3      	strb	r3, [r4, #26]
 8003090:	9507      	str	r5, [sp, #28]
 8003092:	0035      	movs	r5, r6
 8003094:	782b      	ldrb	r3, [r5, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <_svfiprintf_r+0x52>
 800309a:	2b25      	cmp	r3, #37	@ 0x25
 800309c:	d148      	bne.n	8003130 <_svfiprintf_r+0xe4>
 800309e:	1bab      	subs	r3, r5, r6
 80030a0:	9305      	str	r3, [sp, #20]
 80030a2:	42b5      	cmp	r5, r6
 80030a4:	d00b      	beq.n	80030be <_svfiprintf_r+0x72>
 80030a6:	0032      	movs	r2, r6
 80030a8:	0039      	movs	r1, r7
 80030aa:	9803      	ldr	r0, [sp, #12]
 80030ac:	f7ff ff6e 	bl	8002f8c <__ssputs_r>
 80030b0:	3001      	adds	r0, #1
 80030b2:	d100      	bne.n	80030b6 <_svfiprintf_r+0x6a>
 80030b4:	e0ae      	b.n	8003214 <_svfiprintf_r+0x1c8>
 80030b6:	6963      	ldr	r3, [r4, #20]
 80030b8:	9a05      	ldr	r2, [sp, #20]
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	6163      	str	r3, [r4, #20]
 80030be:	782b      	ldrb	r3, [r5, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d100      	bne.n	80030c6 <_svfiprintf_r+0x7a>
 80030c4:	e0a6      	b.n	8003214 <_svfiprintf_r+0x1c8>
 80030c6:	2201      	movs	r2, #1
 80030c8:	2300      	movs	r3, #0
 80030ca:	4252      	negs	r2, r2
 80030cc:	6062      	str	r2, [r4, #4]
 80030ce:	a904      	add	r1, sp, #16
 80030d0:	3254      	adds	r2, #84	@ 0x54
 80030d2:	1852      	adds	r2, r2, r1
 80030d4:	1c6e      	adds	r6, r5, #1
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	60e3      	str	r3, [r4, #12]
 80030da:	60a3      	str	r3, [r4, #8]
 80030dc:	7013      	strb	r3, [r2, #0]
 80030de:	65a3      	str	r3, [r4, #88]	@ 0x58
 80030e0:	4b54      	ldr	r3, [pc, #336]	@ (8003234 <_svfiprintf_r+0x1e8>)
 80030e2:	2205      	movs	r2, #5
 80030e4:	0018      	movs	r0, r3
 80030e6:	7831      	ldrb	r1, [r6, #0]
 80030e8:	9305      	str	r3, [sp, #20]
 80030ea:	f000 fa51 	bl	8003590 <memchr>
 80030ee:	1c75      	adds	r5, r6, #1
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d11f      	bne.n	8003134 <_svfiprintf_r+0xe8>
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	06d3      	lsls	r3, r2, #27
 80030f8:	d504      	bpl.n	8003104 <_svfiprintf_r+0xb8>
 80030fa:	2353      	movs	r3, #83	@ 0x53
 80030fc:	a904      	add	r1, sp, #16
 80030fe:	185b      	adds	r3, r3, r1
 8003100:	2120      	movs	r1, #32
 8003102:	7019      	strb	r1, [r3, #0]
 8003104:	0713      	lsls	r3, r2, #28
 8003106:	d504      	bpl.n	8003112 <_svfiprintf_r+0xc6>
 8003108:	2353      	movs	r3, #83	@ 0x53
 800310a:	a904      	add	r1, sp, #16
 800310c:	185b      	adds	r3, r3, r1
 800310e:	212b      	movs	r1, #43	@ 0x2b
 8003110:	7019      	strb	r1, [r3, #0]
 8003112:	7833      	ldrb	r3, [r6, #0]
 8003114:	2b2a      	cmp	r3, #42	@ 0x2a
 8003116:	d016      	beq.n	8003146 <_svfiprintf_r+0xfa>
 8003118:	0035      	movs	r5, r6
 800311a:	2100      	movs	r1, #0
 800311c:	200a      	movs	r0, #10
 800311e:	68e3      	ldr	r3, [r4, #12]
 8003120:	782a      	ldrb	r2, [r5, #0]
 8003122:	1c6e      	adds	r6, r5, #1
 8003124:	3a30      	subs	r2, #48	@ 0x30
 8003126:	2a09      	cmp	r2, #9
 8003128:	d950      	bls.n	80031cc <_svfiprintf_r+0x180>
 800312a:	2900      	cmp	r1, #0
 800312c:	d111      	bne.n	8003152 <_svfiprintf_r+0x106>
 800312e:	e017      	b.n	8003160 <_svfiprintf_r+0x114>
 8003130:	3501      	adds	r5, #1
 8003132:	e7af      	b.n	8003094 <_svfiprintf_r+0x48>
 8003134:	9b05      	ldr	r3, [sp, #20]
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	1ac0      	subs	r0, r0, r3
 800313a:	2301      	movs	r3, #1
 800313c:	4083      	lsls	r3, r0
 800313e:	4313      	orrs	r3, r2
 8003140:	002e      	movs	r6, r5
 8003142:	6023      	str	r3, [r4, #0]
 8003144:	e7cc      	b.n	80030e0 <_svfiprintf_r+0x94>
 8003146:	9b07      	ldr	r3, [sp, #28]
 8003148:	1d19      	adds	r1, r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	9107      	str	r1, [sp, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db01      	blt.n	8003156 <_svfiprintf_r+0x10a>
 8003152:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003154:	e004      	b.n	8003160 <_svfiprintf_r+0x114>
 8003156:	425b      	negs	r3, r3
 8003158:	60e3      	str	r3, [r4, #12]
 800315a:	2302      	movs	r3, #2
 800315c:	4313      	orrs	r3, r2
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	782b      	ldrb	r3, [r5, #0]
 8003162:	2b2e      	cmp	r3, #46	@ 0x2e
 8003164:	d10c      	bne.n	8003180 <_svfiprintf_r+0x134>
 8003166:	786b      	ldrb	r3, [r5, #1]
 8003168:	2b2a      	cmp	r3, #42	@ 0x2a
 800316a:	d134      	bne.n	80031d6 <_svfiprintf_r+0x18a>
 800316c:	9b07      	ldr	r3, [sp, #28]
 800316e:	3502      	adds	r5, #2
 8003170:	1d1a      	adds	r2, r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	9207      	str	r2, [sp, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	da01      	bge.n	800317e <_svfiprintf_r+0x132>
 800317a:	2301      	movs	r3, #1
 800317c:	425b      	negs	r3, r3
 800317e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003180:	4e2d      	ldr	r6, [pc, #180]	@ (8003238 <_svfiprintf_r+0x1ec>)
 8003182:	2203      	movs	r2, #3
 8003184:	0030      	movs	r0, r6
 8003186:	7829      	ldrb	r1, [r5, #0]
 8003188:	f000 fa02 	bl	8003590 <memchr>
 800318c:	2800      	cmp	r0, #0
 800318e:	d006      	beq.n	800319e <_svfiprintf_r+0x152>
 8003190:	2340      	movs	r3, #64	@ 0x40
 8003192:	1b80      	subs	r0, r0, r6
 8003194:	4083      	lsls	r3, r0
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	3501      	adds	r5, #1
 800319a:	4313      	orrs	r3, r2
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	7829      	ldrb	r1, [r5, #0]
 80031a0:	2206      	movs	r2, #6
 80031a2:	4826      	ldr	r0, [pc, #152]	@ (800323c <_svfiprintf_r+0x1f0>)
 80031a4:	1c6e      	adds	r6, r5, #1
 80031a6:	7621      	strb	r1, [r4, #24]
 80031a8:	f000 f9f2 	bl	8003590 <memchr>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d038      	beq.n	8003222 <_svfiprintf_r+0x1d6>
 80031b0:	4b23      	ldr	r3, [pc, #140]	@ (8003240 <_svfiprintf_r+0x1f4>)
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d122      	bne.n	80031fc <_svfiprintf_r+0x1b0>
 80031b6:	2207      	movs	r2, #7
 80031b8:	9b07      	ldr	r3, [sp, #28]
 80031ba:	3307      	adds	r3, #7
 80031bc:	4393      	bics	r3, r2
 80031be:	3308      	adds	r3, #8
 80031c0:	9307      	str	r3, [sp, #28]
 80031c2:	6963      	ldr	r3, [r4, #20]
 80031c4:	9a04      	ldr	r2, [sp, #16]
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	6163      	str	r3, [r4, #20]
 80031ca:	e762      	b.n	8003092 <_svfiprintf_r+0x46>
 80031cc:	4343      	muls	r3, r0
 80031ce:	0035      	movs	r5, r6
 80031d0:	2101      	movs	r1, #1
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	e7a4      	b.n	8003120 <_svfiprintf_r+0xd4>
 80031d6:	2300      	movs	r3, #0
 80031d8:	200a      	movs	r0, #10
 80031da:	0019      	movs	r1, r3
 80031dc:	3501      	adds	r5, #1
 80031de:	6063      	str	r3, [r4, #4]
 80031e0:	782a      	ldrb	r2, [r5, #0]
 80031e2:	1c6e      	adds	r6, r5, #1
 80031e4:	3a30      	subs	r2, #48	@ 0x30
 80031e6:	2a09      	cmp	r2, #9
 80031e8:	d903      	bls.n	80031f2 <_svfiprintf_r+0x1a6>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0c8      	beq.n	8003180 <_svfiprintf_r+0x134>
 80031ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80031f0:	e7c6      	b.n	8003180 <_svfiprintf_r+0x134>
 80031f2:	4341      	muls	r1, r0
 80031f4:	0035      	movs	r5, r6
 80031f6:	2301      	movs	r3, #1
 80031f8:	1889      	adds	r1, r1, r2
 80031fa:	e7f1      	b.n	80031e0 <_svfiprintf_r+0x194>
 80031fc:	aa07      	add	r2, sp, #28
 80031fe:	9200      	str	r2, [sp, #0]
 8003200:	0021      	movs	r1, r4
 8003202:	003a      	movs	r2, r7
 8003204:	4b0f      	ldr	r3, [pc, #60]	@ (8003244 <_svfiprintf_r+0x1f8>)
 8003206:	9803      	ldr	r0, [sp, #12]
 8003208:	e000      	b.n	800320c <_svfiprintf_r+0x1c0>
 800320a:	bf00      	nop
 800320c:	9004      	str	r0, [sp, #16]
 800320e:	9b04      	ldr	r3, [sp, #16]
 8003210:	3301      	adds	r3, #1
 8003212:	d1d6      	bne.n	80031c2 <_svfiprintf_r+0x176>
 8003214:	89bb      	ldrh	r3, [r7, #12]
 8003216:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003218:	065b      	lsls	r3, r3, #25
 800321a:	d500      	bpl.n	800321e <_svfiprintf_r+0x1d2>
 800321c:	e72c      	b.n	8003078 <_svfiprintf_r+0x2c>
 800321e:	b021      	add	sp, #132	@ 0x84
 8003220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003222:	aa07      	add	r2, sp, #28
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	0021      	movs	r1, r4
 8003228:	003a      	movs	r2, r7
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <_svfiprintf_r+0x1f8>)
 800322c:	9803      	ldr	r0, [sp, #12]
 800322e:	f000 f87b 	bl	8003328 <_printf_i>
 8003232:	e7eb      	b.n	800320c <_svfiprintf_r+0x1c0>
 8003234:	080036ac 	.word	0x080036ac
 8003238:	080036b2 	.word	0x080036b2
 800323c:	080036b6 	.word	0x080036b6
 8003240:	00000000 	.word	0x00000000
 8003244:	08002f8d 	.word	0x08002f8d

08003248 <_printf_common>:
 8003248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800324a:	0016      	movs	r6, r2
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	688a      	ldr	r2, [r1, #8]
 8003250:	690b      	ldr	r3, [r1, #16]
 8003252:	000c      	movs	r4, r1
 8003254:	9000      	str	r0, [sp, #0]
 8003256:	4293      	cmp	r3, r2
 8003258:	da00      	bge.n	800325c <_printf_common+0x14>
 800325a:	0013      	movs	r3, r2
 800325c:	0022      	movs	r2, r4
 800325e:	6033      	str	r3, [r6, #0]
 8003260:	3243      	adds	r2, #67	@ 0x43
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	2a00      	cmp	r2, #0
 8003266:	d001      	beq.n	800326c <_printf_common+0x24>
 8003268:	3301      	adds	r3, #1
 800326a:	6033      	str	r3, [r6, #0]
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	069b      	lsls	r3, r3, #26
 8003270:	d502      	bpl.n	8003278 <_printf_common+0x30>
 8003272:	6833      	ldr	r3, [r6, #0]
 8003274:	3302      	adds	r3, #2
 8003276:	6033      	str	r3, [r6, #0]
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	2306      	movs	r3, #6
 800327c:	0015      	movs	r5, r2
 800327e:	401d      	ands	r5, r3
 8003280:	421a      	tst	r2, r3
 8003282:	d027      	beq.n	80032d4 <_printf_common+0x8c>
 8003284:	0023      	movs	r3, r4
 8003286:	3343      	adds	r3, #67	@ 0x43
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	1e5a      	subs	r2, r3, #1
 800328c:	4193      	sbcs	r3, r2
 800328e:	6822      	ldr	r2, [r4, #0]
 8003290:	0692      	lsls	r2, r2, #26
 8003292:	d430      	bmi.n	80032f6 <_printf_common+0xae>
 8003294:	0022      	movs	r2, r4
 8003296:	9901      	ldr	r1, [sp, #4]
 8003298:	9800      	ldr	r0, [sp, #0]
 800329a:	9d08      	ldr	r5, [sp, #32]
 800329c:	3243      	adds	r2, #67	@ 0x43
 800329e:	47a8      	blx	r5
 80032a0:	3001      	adds	r0, #1
 80032a2:	d025      	beq.n	80032f0 <_printf_common+0xa8>
 80032a4:	2206      	movs	r2, #6
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	2500      	movs	r5, #0
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d105      	bne.n	80032bc <_printf_common+0x74>
 80032b0:	6833      	ldr	r3, [r6, #0]
 80032b2:	68e5      	ldr	r5, [r4, #12]
 80032b4:	1aed      	subs	r5, r5, r3
 80032b6:	43eb      	mvns	r3, r5
 80032b8:	17db      	asrs	r3, r3, #31
 80032ba:	401d      	ands	r5, r3
 80032bc:	68a3      	ldr	r3, [r4, #8]
 80032be:	6922      	ldr	r2, [r4, #16]
 80032c0:	4293      	cmp	r3, r2
 80032c2:	dd01      	ble.n	80032c8 <_printf_common+0x80>
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	18ed      	adds	r5, r5, r3
 80032c8:	2600      	movs	r6, #0
 80032ca:	42b5      	cmp	r5, r6
 80032cc:	d120      	bne.n	8003310 <_printf_common+0xc8>
 80032ce:	2000      	movs	r0, #0
 80032d0:	e010      	b.n	80032f4 <_printf_common+0xac>
 80032d2:	3501      	adds	r5, #1
 80032d4:	68e3      	ldr	r3, [r4, #12]
 80032d6:	6832      	ldr	r2, [r6, #0]
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	42ab      	cmp	r3, r5
 80032dc:	ddd2      	ble.n	8003284 <_printf_common+0x3c>
 80032de:	0022      	movs	r2, r4
 80032e0:	2301      	movs	r3, #1
 80032e2:	9901      	ldr	r1, [sp, #4]
 80032e4:	9800      	ldr	r0, [sp, #0]
 80032e6:	9f08      	ldr	r7, [sp, #32]
 80032e8:	3219      	adds	r2, #25
 80032ea:	47b8      	blx	r7
 80032ec:	3001      	adds	r0, #1
 80032ee:	d1f0      	bne.n	80032d2 <_printf_common+0x8a>
 80032f0:	2001      	movs	r0, #1
 80032f2:	4240      	negs	r0, r0
 80032f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032f6:	2030      	movs	r0, #48	@ 0x30
 80032f8:	18e1      	adds	r1, r4, r3
 80032fa:	3143      	adds	r1, #67	@ 0x43
 80032fc:	7008      	strb	r0, [r1, #0]
 80032fe:	0021      	movs	r1, r4
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	3145      	adds	r1, #69	@ 0x45
 8003304:	7809      	ldrb	r1, [r1, #0]
 8003306:	18a2      	adds	r2, r4, r2
 8003308:	3243      	adds	r2, #67	@ 0x43
 800330a:	3302      	adds	r3, #2
 800330c:	7011      	strb	r1, [r2, #0]
 800330e:	e7c1      	b.n	8003294 <_printf_common+0x4c>
 8003310:	0022      	movs	r2, r4
 8003312:	2301      	movs	r3, #1
 8003314:	9901      	ldr	r1, [sp, #4]
 8003316:	9800      	ldr	r0, [sp, #0]
 8003318:	9f08      	ldr	r7, [sp, #32]
 800331a:	321a      	adds	r2, #26
 800331c:	47b8      	blx	r7
 800331e:	3001      	adds	r0, #1
 8003320:	d0e6      	beq.n	80032f0 <_printf_common+0xa8>
 8003322:	3601      	adds	r6, #1
 8003324:	e7d1      	b.n	80032ca <_printf_common+0x82>
	...

08003328 <_printf_i>:
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	b08b      	sub	sp, #44	@ 0x2c
 800332c:	9206      	str	r2, [sp, #24]
 800332e:	000a      	movs	r2, r1
 8003330:	3243      	adds	r2, #67	@ 0x43
 8003332:	9307      	str	r3, [sp, #28]
 8003334:	9005      	str	r0, [sp, #20]
 8003336:	9203      	str	r2, [sp, #12]
 8003338:	7e0a      	ldrb	r2, [r1, #24]
 800333a:	000c      	movs	r4, r1
 800333c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800333e:	2a78      	cmp	r2, #120	@ 0x78
 8003340:	d809      	bhi.n	8003356 <_printf_i+0x2e>
 8003342:	2a62      	cmp	r2, #98	@ 0x62
 8003344:	d80b      	bhi.n	800335e <_printf_i+0x36>
 8003346:	2a00      	cmp	r2, #0
 8003348:	d100      	bne.n	800334c <_printf_i+0x24>
 800334a:	e0bc      	b.n	80034c6 <_printf_i+0x19e>
 800334c:	497b      	ldr	r1, [pc, #492]	@ (800353c <_printf_i+0x214>)
 800334e:	9104      	str	r1, [sp, #16]
 8003350:	2a58      	cmp	r2, #88	@ 0x58
 8003352:	d100      	bne.n	8003356 <_printf_i+0x2e>
 8003354:	e090      	b.n	8003478 <_printf_i+0x150>
 8003356:	0025      	movs	r5, r4
 8003358:	3542      	adds	r5, #66	@ 0x42
 800335a:	702a      	strb	r2, [r5, #0]
 800335c:	e022      	b.n	80033a4 <_printf_i+0x7c>
 800335e:	0010      	movs	r0, r2
 8003360:	3863      	subs	r0, #99	@ 0x63
 8003362:	2815      	cmp	r0, #21
 8003364:	d8f7      	bhi.n	8003356 <_printf_i+0x2e>
 8003366:	f7fc fed7 	bl	8000118 <__gnu_thumb1_case_shi>
 800336a:	0016      	.short	0x0016
 800336c:	fff6001f 	.word	0xfff6001f
 8003370:	fff6fff6 	.word	0xfff6fff6
 8003374:	001ffff6 	.word	0x001ffff6
 8003378:	fff6fff6 	.word	0xfff6fff6
 800337c:	fff6fff6 	.word	0xfff6fff6
 8003380:	003600a1 	.word	0x003600a1
 8003384:	fff60080 	.word	0xfff60080
 8003388:	00b2fff6 	.word	0x00b2fff6
 800338c:	0036fff6 	.word	0x0036fff6
 8003390:	fff6fff6 	.word	0xfff6fff6
 8003394:	0084      	.short	0x0084
 8003396:	0025      	movs	r5, r4
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	3542      	adds	r5, #66	@ 0x42
 800339c:	1d11      	adds	r1, r2, #4
 800339e:	6019      	str	r1, [r3, #0]
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	702b      	strb	r3, [r5, #0]
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0a0      	b.n	80034ea <_printf_i+0x1c2>
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	6809      	ldr	r1, [r1, #0]
 80033ac:	1d02      	adds	r2, r0, #4
 80033ae:	060d      	lsls	r5, r1, #24
 80033b0:	d50b      	bpl.n	80033ca <_printf_i+0xa2>
 80033b2:	6806      	ldr	r6, [r0, #0]
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	2e00      	cmp	r6, #0
 80033b8:	da03      	bge.n	80033c2 <_printf_i+0x9a>
 80033ba:	232d      	movs	r3, #45	@ 0x2d
 80033bc:	9a03      	ldr	r2, [sp, #12]
 80033be:	4276      	negs	r6, r6
 80033c0:	7013      	strb	r3, [r2, #0]
 80033c2:	4b5e      	ldr	r3, [pc, #376]	@ (800353c <_printf_i+0x214>)
 80033c4:	270a      	movs	r7, #10
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	e018      	b.n	80033fc <_printf_i+0xd4>
 80033ca:	6806      	ldr	r6, [r0, #0]
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	0649      	lsls	r1, r1, #25
 80033d0:	d5f1      	bpl.n	80033b6 <_printf_i+0x8e>
 80033d2:	b236      	sxth	r6, r6
 80033d4:	e7ef      	b.n	80033b6 <_printf_i+0x8e>
 80033d6:	6808      	ldr	r0, [r1, #0]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	c940      	ldmia	r1!, {r6}
 80033dc:	0605      	lsls	r5, r0, #24
 80033de:	d402      	bmi.n	80033e6 <_printf_i+0xbe>
 80033e0:	0640      	lsls	r0, r0, #25
 80033e2:	d500      	bpl.n	80033e6 <_printf_i+0xbe>
 80033e4:	b2b6      	uxth	r6, r6
 80033e6:	6019      	str	r1, [r3, #0]
 80033e8:	4b54      	ldr	r3, [pc, #336]	@ (800353c <_printf_i+0x214>)
 80033ea:	270a      	movs	r7, #10
 80033ec:	9304      	str	r3, [sp, #16]
 80033ee:	2a6f      	cmp	r2, #111	@ 0x6f
 80033f0:	d100      	bne.n	80033f4 <_printf_i+0xcc>
 80033f2:	3f02      	subs	r7, #2
 80033f4:	0023      	movs	r3, r4
 80033f6:	2200      	movs	r2, #0
 80033f8:	3343      	adds	r3, #67	@ 0x43
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	60a3      	str	r3, [r4, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	db03      	blt.n	800340c <_printf_i+0xe4>
 8003404:	2104      	movs	r1, #4
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	438a      	bics	r2, r1
 800340a:	6022      	str	r2, [r4, #0]
 800340c:	2e00      	cmp	r6, #0
 800340e:	d102      	bne.n	8003416 <_printf_i+0xee>
 8003410:	9d03      	ldr	r5, [sp, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <_printf_i+0x108>
 8003416:	9d03      	ldr	r5, [sp, #12]
 8003418:	0030      	movs	r0, r6
 800341a:	0039      	movs	r1, r7
 800341c:	f7fc ff0c 	bl	8000238 <__aeabi_uidivmod>
 8003420:	9b04      	ldr	r3, [sp, #16]
 8003422:	3d01      	subs	r5, #1
 8003424:	5c5b      	ldrb	r3, [r3, r1]
 8003426:	702b      	strb	r3, [r5, #0]
 8003428:	0033      	movs	r3, r6
 800342a:	0006      	movs	r6, r0
 800342c:	429f      	cmp	r7, r3
 800342e:	d9f3      	bls.n	8003418 <_printf_i+0xf0>
 8003430:	2f08      	cmp	r7, #8
 8003432:	d109      	bne.n	8003448 <_printf_i+0x120>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	07db      	lsls	r3, r3, #31
 8003438:	d506      	bpl.n	8003448 <_printf_i+0x120>
 800343a:	6862      	ldr	r2, [r4, #4]
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	429a      	cmp	r2, r3
 8003440:	dc02      	bgt.n	8003448 <_printf_i+0x120>
 8003442:	2330      	movs	r3, #48	@ 0x30
 8003444:	3d01      	subs	r5, #1
 8003446:	702b      	strb	r3, [r5, #0]
 8003448:	9b03      	ldr	r3, [sp, #12]
 800344a:	1b5b      	subs	r3, r3, r5
 800344c:	6123      	str	r3, [r4, #16]
 800344e:	9b07      	ldr	r3, [sp, #28]
 8003450:	0021      	movs	r1, r4
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	9805      	ldr	r0, [sp, #20]
 8003456:	9b06      	ldr	r3, [sp, #24]
 8003458:	aa09      	add	r2, sp, #36	@ 0x24
 800345a:	f7ff fef5 	bl	8003248 <_printf_common>
 800345e:	3001      	adds	r0, #1
 8003460:	d148      	bne.n	80034f4 <_printf_i+0x1cc>
 8003462:	2001      	movs	r0, #1
 8003464:	4240      	negs	r0, r0
 8003466:	b00b      	add	sp, #44	@ 0x2c
 8003468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346a:	2220      	movs	r2, #32
 800346c:	6809      	ldr	r1, [r1, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	6022      	str	r2, [r4, #0]
 8003472:	2278      	movs	r2, #120	@ 0x78
 8003474:	4932      	ldr	r1, [pc, #200]	@ (8003540 <_printf_i+0x218>)
 8003476:	9104      	str	r1, [sp, #16]
 8003478:	0021      	movs	r1, r4
 800347a:	3145      	adds	r1, #69	@ 0x45
 800347c:	700a      	strb	r2, [r1, #0]
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	6822      	ldr	r2, [r4, #0]
 8003482:	c940      	ldmia	r1!, {r6}
 8003484:	0610      	lsls	r0, r2, #24
 8003486:	d402      	bmi.n	800348e <_printf_i+0x166>
 8003488:	0650      	lsls	r0, r2, #25
 800348a:	d500      	bpl.n	800348e <_printf_i+0x166>
 800348c:	b2b6      	uxth	r6, r6
 800348e:	6019      	str	r1, [r3, #0]
 8003490:	07d3      	lsls	r3, r2, #31
 8003492:	d502      	bpl.n	800349a <_printf_i+0x172>
 8003494:	2320      	movs	r3, #32
 8003496:	4313      	orrs	r3, r2
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	2e00      	cmp	r6, #0
 800349c:	d001      	beq.n	80034a2 <_printf_i+0x17a>
 800349e:	2710      	movs	r7, #16
 80034a0:	e7a8      	b.n	80033f4 <_printf_i+0xcc>
 80034a2:	2220      	movs	r2, #32
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	4393      	bics	r3, r2
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	e7f8      	b.n	800349e <_printf_i+0x176>
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	680d      	ldr	r5, [r1, #0]
 80034b0:	1d10      	adds	r0, r2, #4
 80034b2:	6949      	ldr	r1, [r1, #20]
 80034b4:	6018      	str	r0, [r3, #0]
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	062e      	lsls	r6, r5, #24
 80034ba:	d501      	bpl.n	80034c0 <_printf_i+0x198>
 80034bc:	6019      	str	r1, [r3, #0]
 80034be:	e002      	b.n	80034c6 <_printf_i+0x19e>
 80034c0:	066d      	lsls	r5, r5, #25
 80034c2:	d5fb      	bpl.n	80034bc <_printf_i+0x194>
 80034c4:	8019      	strh	r1, [r3, #0]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9d03      	ldr	r5, [sp, #12]
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	e7bf      	b.n	800344e <_printf_i+0x126>
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	1d11      	adds	r1, r2, #4
 80034d2:	6019      	str	r1, [r3, #0]
 80034d4:	6815      	ldr	r5, [r2, #0]
 80034d6:	2100      	movs	r1, #0
 80034d8:	0028      	movs	r0, r5
 80034da:	6862      	ldr	r2, [r4, #4]
 80034dc:	f000 f858 	bl	8003590 <memchr>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d001      	beq.n	80034e8 <_printf_i+0x1c0>
 80034e4:	1b40      	subs	r0, r0, r5
 80034e6:	6060      	str	r0, [r4, #4]
 80034e8:	6863      	ldr	r3, [r4, #4]
 80034ea:	6123      	str	r3, [r4, #16]
 80034ec:	2300      	movs	r3, #0
 80034ee:	9a03      	ldr	r2, [sp, #12]
 80034f0:	7013      	strb	r3, [r2, #0]
 80034f2:	e7ac      	b.n	800344e <_printf_i+0x126>
 80034f4:	002a      	movs	r2, r5
 80034f6:	6923      	ldr	r3, [r4, #16]
 80034f8:	9906      	ldr	r1, [sp, #24]
 80034fa:	9805      	ldr	r0, [sp, #20]
 80034fc:	9d07      	ldr	r5, [sp, #28]
 80034fe:	47a8      	blx	r5
 8003500:	3001      	adds	r0, #1
 8003502:	d0ae      	beq.n	8003462 <_printf_i+0x13a>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	079b      	lsls	r3, r3, #30
 8003508:	d415      	bmi.n	8003536 <_printf_i+0x20e>
 800350a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800350c:	68e0      	ldr	r0, [r4, #12]
 800350e:	4298      	cmp	r0, r3
 8003510:	daa9      	bge.n	8003466 <_printf_i+0x13e>
 8003512:	0018      	movs	r0, r3
 8003514:	e7a7      	b.n	8003466 <_printf_i+0x13e>
 8003516:	0022      	movs	r2, r4
 8003518:	2301      	movs	r3, #1
 800351a:	9906      	ldr	r1, [sp, #24]
 800351c:	9805      	ldr	r0, [sp, #20]
 800351e:	9e07      	ldr	r6, [sp, #28]
 8003520:	3219      	adds	r2, #25
 8003522:	47b0      	blx	r6
 8003524:	3001      	adds	r0, #1
 8003526:	d09c      	beq.n	8003462 <_printf_i+0x13a>
 8003528:	3501      	adds	r5, #1
 800352a:	68e3      	ldr	r3, [r4, #12]
 800352c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	42ab      	cmp	r3, r5
 8003532:	dcf0      	bgt.n	8003516 <_printf_i+0x1ee>
 8003534:	e7e9      	b.n	800350a <_printf_i+0x1e2>
 8003536:	2500      	movs	r5, #0
 8003538:	e7f7      	b.n	800352a <_printf_i+0x202>
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	080036bd 	.word	0x080036bd
 8003540:	080036ce 	.word	0x080036ce

08003544 <memmove>:
 8003544:	b510      	push	{r4, lr}
 8003546:	4288      	cmp	r0, r1
 8003548:	d806      	bhi.n	8003558 <memmove+0x14>
 800354a:	2300      	movs	r3, #0
 800354c:	429a      	cmp	r2, r3
 800354e:	d008      	beq.n	8003562 <memmove+0x1e>
 8003550:	5ccc      	ldrb	r4, [r1, r3]
 8003552:	54c4      	strb	r4, [r0, r3]
 8003554:	3301      	adds	r3, #1
 8003556:	e7f9      	b.n	800354c <memmove+0x8>
 8003558:	188b      	adds	r3, r1, r2
 800355a:	4298      	cmp	r0, r3
 800355c:	d2f5      	bcs.n	800354a <memmove+0x6>
 800355e:	3a01      	subs	r2, #1
 8003560:	d200      	bcs.n	8003564 <memmove+0x20>
 8003562:	bd10      	pop	{r4, pc}
 8003564:	5c8b      	ldrb	r3, [r1, r2]
 8003566:	5483      	strb	r3, [r0, r2]
 8003568:	e7f9      	b.n	800355e <memmove+0x1a>
	...

0800356c <_sbrk_r>:
 800356c:	2300      	movs	r3, #0
 800356e:	b570      	push	{r4, r5, r6, lr}
 8003570:	4d06      	ldr	r5, [pc, #24]	@ (800358c <_sbrk_r+0x20>)
 8003572:	0004      	movs	r4, r0
 8003574:	0008      	movs	r0, r1
 8003576:	602b      	str	r3, [r5, #0]
 8003578:	f7fd fa56 	bl	8000a28 <_sbrk>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	d103      	bne.n	8003588 <_sbrk_r+0x1c>
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d000      	beq.n	8003588 <_sbrk_r+0x1c>
 8003586:	6023      	str	r3, [r4, #0]
 8003588:	bd70      	pop	{r4, r5, r6, pc}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	200002d8 	.word	0x200002d8

08003590 <memchr>:
 8003590:	b2c9      	uxtb	r1, r1
 8003592:	1882      	adds	r2, r0, r2
 8003594:	4290      	cmp	r0, r2
 8003596:	d101      	bne.n	800359c <memchr+0xc>
 8003598:	2000      	movs	r0, #0
 800359a:	4770      	bx	lr
 800359c:	7803      	ldrb	r3, [r0, #0]
 800359e:	428b      	cmp	r3, r1
 80035a0:	d0fb      	beq.n	800359a <memchr+0xa>
 80035a2:	3001      	adds	r0, #1
 80035a4:	e7f6      	b.n	8003594 <memchr+0x4>

080035a6 <_realloc_r>:
 80035a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035a8:	0006      	movs	r6, r0
 80035aa:	000c      	movs	r4, r1
 80035ac:	0015      	movs	r5, r2
 80035ae:	2900      	cmp	r1, #0
 80035b0:	d105      	bne.n	80035be <_realloc_r+0x18>
 80035b2:	0011      	movs	r1, r2
 80035b4:	f7ff fc5a 	bl	8002e6c <_malloc_r>
 80035b8:	0004      	movs	r4, r0
 80035ba:	0020      	movs	r0, r4
 80035bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035be:	2a00      	cmp	r2, #0
 80035c0:	d103      	bne.n	80035ca <_realloc_r+0x24>
 80035c2:	f7ff fbe7 	bl	8002d94 <_free_r>
 80035c6:	2400      	movs	r4, #0
 80035c8:	e7f7      	b.n	80035ba <_realloc_r+0x14>
 80035ca:	f000 f81b 	bl	8003604 <_malloc_usable_size_r>
 80035ce:	0007      	movs	r7, r0
 80035d0:	4285      	cmp	r5, r0
 80035d2:	d802      	bhi.n	80035da <_realloc_r+0x34>
 80035d4:	0843      	lsrs	r3, r0, #1
 80035d6:	42ab      	cmp	r3, r5
 80035d8:	d3ef      	bcc.n	80035ba <_realloc_r+0x14>
 80035da:	0029      	movs	r1, r5
 80035dc:	0030      	movs	r0, r6
 80035de:	f7ff fc45 	bl	8002e6c <_malloc_r>
 80035e2:	9001      	str	r0, [sp, #4]
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d0ee      	beq.n	80035c6 <_realloc_r+0x20>
 80035e8:	002a      	movs	r2, r5
 80035ea:	42bd      	cmp	r5, r7
 80035ec:	d900      	bls.n	80035f0 <_realloc_r+0x4a>
 80035ee:	003a      	movs	r2, r7
 80035f0:	0021      	movs	r1, r4
 80035f2:	9801      	ldr	r0, [sp, #4]
 80035f4:	f7ff fbc4 	bl	8002d80 <memcpy>
 80035f8:	0021      	movs	r1, r4
 80035fa:	0030      	movs	r0, r6
 80035fc:	f7ff fbca 	bl	8002d94 <_free_r>
 8003600:	9c01      	ldr	r4, [sp, #4]
 8003602:	e7da      	b.n	80035ba <_realloc_r+0x14>

08003604 <_malloc_usable_size_r>:
 8003604:	1f0b      	subs	r3, r1, #4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	1f18      	subs	r0, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	da01      	bge.n	8003612 <_malloc_usable_size_r+0xe>
 800360e:	580b      	ldr	r3, [r1, r0]
 8003610:	18c0      	adds	r0, r0, r3
 8003612:	4770      	bx	lr

08003614 <_init>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

08003620 <_fini>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr
